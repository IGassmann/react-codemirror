{"version":3,"sources":["../node_modules/code-example/lib/apl.js","../node_modules/code-example/lib/brainfuck.js","../node_modules/code-example/lib/clike.js","../node_modules/code-example/lib/clojure.js","../node_modules/code-example/lib/cmake.js","../node_modules/code-example/lib/cobol.js","../node_modules/code-example/lib/coffeescript.js","../node_modules/code-example/lib/commonlisp.js","../node_modules/code-example/lib/crystal.js","../node_modules/code-example/lib/css.js","../node_modules/code-example/lib/cypher.js","../node_modules/code-example/lib/cython.js","../node_modules/code-example/lib/d.js","../node_modules/code-example/lib/dart.js","../node_modules/code-example/lib/diff.js","../node_modules/code-example/lib/django.js","../node_modules/code-example/lib/dockerfile.js","../node_modules/code-example/lib/dtd.js","../node_modules/code-example/lib/dylan.js","../node_modules/code-example/lib/ecl.js","../node_modules/code-example/lib/eiffel.js","../node_modules/code-example/lib/elm.js","../node_modules/code-example/lib/erlang.js","../node_modules/code-example/lib/factor.js","../node_modules/code-example/lib/fcl.js","../node_modules/code-example/lib/forth.js","../node_modules/code-example/lib/fortran.js","../node_modules/code-example/lib/gas.js","../node_modules/code-example/lib/gherkin.js","../node_modules/code-example/lib/go.js","../node_modules/code-example/lib/groovy.js","../node_modules/code-example/lib/haml.js","../node_modules/code-example/lib/handlebars.js","../node_modules/code-example/lib/haskell-literate.js","../node_modules/code-example/lib/haskell.js","../node_modules/code-example/lib/haxe.js","../node_modules/code-example/lib/htmlembedded.js","../node_modules/code-example/lib/htmlmixed.js","../node_modules/code-example/lib/http.js","../node_modules/code-example/lib/idl.js","../node_modules/code-example/lib/ini.js","../node_modules/code-example/lib/java.js","../node_modules/code-example/lib/javascript.js","../node_modules/code-example/lib/jinja2.js","../node_modules/code-example/lib/json.js","../node_modules/code-example/lib/jsx.js","../node_modules/code-example/lib/julia.js","../node_modules/code-example/lib/less.js","../node_modules/code-example/lib/livescript.js","../node_modules/code-example/lib/lua.js","../node_modules/code-example/lib/markdown.js","../node_modules/code-example/lib/mathematica.js","../node_modules/code-example/lib/mbox.js","../node_modules/code-example/lib/md.js","../node_modules/code-example/lib/mirc.js","../node_modules/code-example/lib/modelica.js","../node_modules/code-example/lib/mscgen.js","../node_modules/code-example/lib/mumps.js","../node_modules/code-example/lib/nginx.js","../node_modules/code-example/lib/nsis.js","../node_modules/code-example/lib/ntriples.js","../node_modules/code-example/lib/octave.js","../node_modules/code-example/lib/oz.js","../node_modules/code-example/lib/pascal.js","../node_modules/code-example/lib/pegjs.js","../node_modules/code-example/lib/perl.js","../node_modules/code-example/lib/php.js","../node_modules/code-example/lib/pig.js","../node_modules/code-example/lib/powershell.js","../node_modules/code-example/lib/properties.js","../node_modules/code-example/lib/protobuf.js","../node_modules/code-example/lib/pug.js","../node_modules/code-example/lib/puppet.js","../node_modules/code-example/lib/python.js","../node_modules/code-example/lib/q.js","../node_modules/code-example/lib/r.js","../node_modules/code-example/lib/rpm.js","../node_modules/code-example/lib/rst.js","../node_modules/code-example/lib/ruby.js","../node_modules/code-example/lib/rust.js","../node_modules/code-example/lib/sas.js","../node_modules/code-example/lib/sass.js","../node_modules/code-example/lib/scheme.js","../node_modules/code-example/lib/shell.js","../node_modules/code-example/lib/sieve.js","../node_modules/code-example/lib/slim.js","../node_modules/code-example/lib/smalltalk.js","../node_modules/code-example/lib/smarty.js","../node_modules/code-example/lib/solr.js","../node_modules/code-example/lib/soy.js","../node_modules/code-example/lib/sparql.js","../node_modules/code-example/lib/spreadsheet.js","../node_modules/code-example/lib/sql.js","../node_modules/code-example/lib/stex.js","../node_modules/code-example/lib/stylus.js","../node_modules/code-example/lib/swift.js","../node_modules/code-example/lib/tcl.js","../node_modules/code-example/lib/textile.js","../node_modules/code-example/lib/tiddlywiki.js","../node_modules/code-example/lib/tiki.js","../node_modules/code-example/lib/toml.js","../node_modules/code-example/lib/tornado.js","../node_modules/code-example/lib/troff.js","../node_modules/code-example/lib/ttcn-cfg.js","../node_modules/code-example/lib/ttcn.js","../node_modules/code-example/lib/turtle.js","../node_modules/code-example/lib/twig.js","../node_modules/code-example/lib/typescript.js","../node_modules/code-example/lib/vb.js","../node_modules/code-example/lib/vbscript.js","../node_modules/code-example/lib/velocity.js","../node_modules/code-example/lib/verilog.js","../node_modules/code-example/lib/vhdl.js","../node_modules/code-example/lib/vue.js","../node_modules/code-example/lib/webidl.js","../node_modules/code-example/lib/xml.js","../node_modules/code-example/lib/xquery.js","../node_modules/code-example/lib/yacas.js","../node_modules/code-example/lib/yaml-frontmatter.js","../node_modules/code-example/lib/yaml.js","../node_modules/code-example/lib/z80.js"],"names":["Object","defineProperty","exports","value","default"],"mappings":"sIAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,q3B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,kjE,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,o3D,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ilD,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+6F,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,w2F,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0/qB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+5K,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,m7C,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6b,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,2P,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,miB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,8sK,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,uoB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6pG,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,knB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,y8B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ipE,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,gqX,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0S,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ggY,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0iB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,23B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,wjB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,w1D,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,iT,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,03C,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0S,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+gB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,m8B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,2gC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,isB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6nB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,87B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,87B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,spC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,oP,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,siB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,4V,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,oa,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,yO,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,8d,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,gjD,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,8mB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,gzB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0f,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,g1C,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6c,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,q7R,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+mB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+yQ,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,siC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,wP,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+yQ,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,4pJ,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,oe,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,kwB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,qjD,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ujI,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,yjB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,gS,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6kB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,yS,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,8U,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6jB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6f,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,yS,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,oL,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,wnM,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,mc,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,4oB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,y5B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0iE,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6nE,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,myP,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,goC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,46B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,u/f,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,67I,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,kV,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+gB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,gc,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6kD,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6mB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,20C,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,43B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ihB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ihB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0M,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,gX,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,klB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,iC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,shB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+jG,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,wrC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,m5B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,moK,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,2qG,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,syG,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+rB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,2qB,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,mW,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ggH,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,8vD,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+qD,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,qX,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,kW,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ykE,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,wM,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,0Z,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,8pE,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,ojC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,88B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,wP,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,y/B,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,6Q,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,qhM,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,+hC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,mmD,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,mlC,mCCJXJ,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAGlBF,EAAQE,QAFG,8R","file":"static/js/code-example-vendor.c63911aa.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"\\u235D Conway's game of life\\n\\n\\u235D This example was inspired by the impressive demo at\\n\\u235D http://www.youtube.com/watch?v=a9xAKttWgP4\\n\\n\\u235D Create a matrix:\\n\\u235D     0 1 1\\n\\u235D     1 1 0\\n\\u235D     0 1 0\\ncreature \\u2190 (3 3 \\u2374 \\u2373 9) \\u2208 1 2 3 4 7   \\u235D Original creature from demo\\ncreature \\u2190 (3 3 \\u2374 \\u2373 9) \\u2208 1 3 6 7 8   \\u235D Glider\\n\\n\\u235D Place the creature on a larger board, near the centre\\nboard \\u2190 \\xAF1 \\u2296 \\xAF2 \\u233D 5 7 \\u2191 creature\\n\\n\\u235D A function to move from one generation to the next\\nlife \\u2190 {\\u2228/ 1 \\u2375 \\u2227 3 4 = \\u2282+/ +\\u233F 1 0 \\xAF1 \\u2218.\\u2296 1 0 \\xAF1 \\u233D\\xA8 \\u2282\\u2375}\\n\\n\\u235D Compute n-th generation and format it as a\\n\\u235D character matrix\\ngen \\u2190 {' #'[(life \\u2363 \\u2375) board]}\\n\\n\\u235D Show first three generations\\n(gen 1) (gen 2) (gen 3)\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"[ This program prints \\\"Hello World!\\\" and a newline to the screen, its\\n  length is 106 active command characters [it is not the shortest.]\\n\\n  This loop is a \\\"comment loop\\\", it's a simple way of adding a comment\\n  to a BF program such that you don't have to worry about any command\\n  characters. Any \\\".\\\", \\\",\\\", \\\"+\\\", \\\"-\\\", \\\"<\\\" and \\\">\\\" characters are simply\\n  ignored, the \\\"[\\\" and \\\"]\\\" characters just have to be balanced.\\n]\\n+++++ +++               Set Cell #0 to 8\\n[\\n    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4\\n    [                   as the cell will be cleared by the loop\\n        >++             Add 2 to Cell #2\\n        >+++            Add 3 to Cell #3\\n        >+++            Add 3 to Cell #4\\n        >+              Add 1 to Cell #5\\n        <<<<-           Decrement the loop counter in Cell #1\\n    ]                   Loop till Cell #1 is zero; number of iterations is 4\\n    >+                  Add 1 to Cell #2\\n    >+                  Add 1 to Cell #3\\n    >-                  Subtract 1 from Cell #4\\n    >>+                 Add 1 to Cell #6\\n    [<]                 Move back to the first zero cell you find; this will\\n                        be Cell #1 which was cleared by the previous loop\\n    <-                  Decrement the loop Counter in Cell #0\\n]                       Loop till Cell #0 is zero; number of iterations is 8\\n\\nThe result of this is:\\nCell No :   0   1   2   3   4   5   6\\nContents:   0   0  72 104  88  32   8\\nPointer :   ^\\n\\n>>.                     Cell #2 has value 72 which is 'H'\\n>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'\\n+++++++..+++.           Likewise for 'llo' from Cell #3\\n>>.                     Cell #5 is 32 for the space\\n<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'\\n<.                      Cell #3 was set to 'o' from the end of 'Hello'\\n+++.------.--------.    Cell #3 for 'rl' and 'd'\\n>>+.                    Add 1 to Cell #5 gives us an exclamation point\\n>++.                    And finally a newline from Cell #6\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/* C demo code */\\n\\n#include <zmq.h>\\n#include <pthread.h>\\n#include <semaphore.h>\\n#include <time.h>\\n#include <stdio.h>\\n#include <fcntl.h>\\n#include <malloc.h>\\n\\ntypedef struct {\\n  void* arg_socket;\\n  zmq_msg_t* arg_msg;\\n  char* arg_string;\\n  unsigned long arg_len;\\n  int arg_int, arg_command;\\n\\n  int signal_fd;\\n  int pad;\\n  void* context;\\n  sem_t sem;\\n} acl_zmq_context;\\n\\n#define p(X) (context->arg_##X)\\n\\nvoid* zmq_thread(void* context_pointer) {\\n  acl_zmq_context* context = (acl_zmq_context*)context_pointer;\\n  char ok = 'K', err = 'X';\\n  int res;\\n\\n  while (1) {\\n    while ((res = sem_wait(&context->sem)) == EINTR);\\n    if (res) {write(context->signal_fd, &err, 1); goto cleanup;}\\n    switch(p(command)) {\\n    case 0: goto cleanup;\\n    case 1: p(socket) = zmq_socket(context->context, p(int)); break;\\n    case 2: p(int) = zmq_close(p(socket)); break;\\n    case 3: p(int) = zmq_bind(p(socket), p(string)); break;\\n    case 4: p(int) = zmq_connect(p(socket), p(string)); break;\\n    case 5: p(int) = zmq_getsockopt(p(socket), p(int), (void*)p(string), &p(len)); break;\\n    case 6: p(int) = zmq_setsockopt(p(socket), p(int), (void*)p(string), p(len)); break;\\n    case 7: p(int) = zmq_send(p(socket), p(msg), p(int)); break;\\n    case 8: p(int) = zmq_recv(p(socket), p(msg), p(int)); break;\\n    case 9: p(int) = zmq_poll(p(socket), p(int), p(len)); break;\\n    }\\n    p(command) = errno;\\n    write(context->signal_fd, &ok, 1);\\n  }\\n cleanup:\\n  close(context->signal_fd);\\n  free(context_pointer);\\n  return 0;\\n}\\n\\nvoid* zmq_thread_init(void* zmq_context, int signal_fd) {\\n  acl_zmq_context* context = malloc(sizeof(acl_zmq_context));\\n  pthread_t thread;\\n\\n  context->context = zmq_context;\\n  context->signal_fd = signal_fd;\\n  sem_init(&context->sem, 1, 0);\\n  pthread_create(&thread, 0, &zmq_thread, context);\\n  pthread_detach(thread);\\n  return context;\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"; Conway's Game of Life, based on the work of:\\n;; Laurent Petit https://gist.github.com/1200343\\n;; Christophe Grand http://clj-me.cgrand.net/2011/08/19/conways-game-of-life\\n\\n(ns ^{:doc \\\"Conway's Game of Life.\\\"}\\n game-of-life)\\n\\n;; Core game of life's algorithm functions\\n\\n(defn neighbours\\n  \\\"Given a cell's coordinates, returns the coordinates of its neighbours.\\\"\\n  [[x y]]\\n  (for [dx [-1 0 1] dy (if (zero? dx) [-1 1] [-1 0 1])]\\n    [(+ dx x) (+ dy y)]))\\n\\n(defn step\\n  \\\"Given a set of living cells, computes the new set of living cells.\\\"\\n  [cells]\\n  (set (for [[cell n] (frequencies (mapcat neighbours cells))\\n             :when (or (= n 3) (and (= n 2) (cells cell)))]\\n         cell)))\\n\\n;; Utility methods for displaying game on a text terminal\\n\\n(defn print-board\\n  \\\"Prints a board on *out*, representing a step in the game.\\\"\\n  [board w h]\\n  (doseq [x (range (inc w)) y (range (inc h))]\\n    (if (= y 0) (print \\\"\\\\n\\\"))\\n    (print (if (board [x y]) \\\"[X]\\\" \\\" . \\\"))))\\n\\n(defn display-grids\\n  \\\"Prints a squence of boards on *out*, representing several steps.\\\"\\n  [grids w h]\\n  (doseq [board grids]\\n    (print-board board w h)\\n    (print \\\"\\\\n\\\")))\\n\\n;; Launches an example board\\n\\n(def\\n  ^{:doc \\\"board represents the initial set of living cells\\\"}\\n   board #{[2 1] [2 2] [2 3]})\\n\\n(display-grids (take 3 (iterate step board)) 5 5)\\n\\n;; Let's play with characters\\n(println \\\\1 \\\\a \\\\# \\\\\\n         \\\\\\\" \\\\( \\\\newline\\n         \\\\} \\\\\\\" \\\\space\\n         \\\\tab \\\\return \\\\backspace\\n         \\\\u1000 \\\\uAaAa \\\\u9F9F)\\n\\n;; Let's play with numbers\\n(+ 1 -1 1/2 -1/2 -0.5 0.5)\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# vim: syntax=cmake\\nif(NOT CMAKE_BUILD_TYPE)\\n    # default to Release build for GCC builds\\n    set(CMAKE_BUILD_TYPE Release CACHE STRING\\n        \\\"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.\\\"\\n        FORCE)\\nendif()\\nmessage(STATUS \\\"cmake version ${CMAKE_VERSION}\\\")\\nif(POLICY CMP0025)\\n    cmake_policy(SET CMP0025 OLD) # report Apple's Clang as just Clang\\nendif()\\nif(POLICY CMP0042)\\n    cmake_policy(SET CMP0042 NEW) # MACOSX_RPATH\\nendif()\\n\\nproject (x265)\\ncmake_minimum_required (VERSION 2.8.8) # OBJECT libraries require 2.8.8\\ninclude(CheckIncludeFiles)\\ninclude(CheckFunctionExists)\\ninclude(CheckSymbolExists)\\ninclude(CheckCXXCompilerFlag)\\n\\n# X265_BUILD must be incremented each time the public API is changed\\nset(X265_BUILD 48)\\nconfigure_file(\\\"${PROJECT_SOURCE_DIR}/x265.def.in\\\"\\n               \\\"${PROJECT_BINARY_DIR}/x265.def\\\")\\nconfigure_file(\\\"${PROJECT_SOURCE_DIR}/x265_config.h.in\\\"\\n               \\\"${PROJECT_BINARY_DIR}/x265_config.h\\\")\\n\\nSET(CMAKE_MODULE_PATH \\\"${PROJECT_SOURCE_DIR}/cmake\\\" \\\"${CMAKE_MODULE_PATH}\\\")\\n\\n# System architecture detection\\nstring(TOLOWER \\\"${CMAKE_SYSTEM_PROCESSOR}\\\" SYSPROC)\\nset(X86_ALIASES x86 i386 i686 x86_64 amd64)\\nlist(FIND X86_ALIASES \\\"${SYSPROC}\\\" X86MATCH)\\nif(\\\"${SYSPROC}\\\" STREQUAL \\\"\\\" OR X86MATCH GREATER \\\"-1\\\")\\n    message(STATUS \\\"Detected x86 target processor\\\")\\n    set(X86 1)\\n    add_definitions(-DX265_ARCH_X86=1)\\n    if(\\\"${CMAKE_SIZEOF_VOID_P}\\\" MATCHES 8)\\n        set(X64 1)\\n        add_definitions(-DX86_64=1)\\n    endif()\\nelseif(${SYSPROC} STREQUAL \\\"armv6l\\\")\\n    message(STATUS \\\"Detected ARM target processor\\\")\\n    set(ARM 1)\\n    add_definitions(-DX265_ARCH_ARM=1 -DHAVE_ARMV6=1)\\nelse()\\n    message(STATUS \\\"CMAKE_SYSTEM_PROCESSOR value `${ CMAKE_SYSTEM_PROCESSOR }` is unknown\\\")\\n    message(STATUS \\\"Please add this value near ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}\\\")\\nendif()\\n\\nif(UNIX)\\n    list(APPEND PLATFORM_LIBS pthread)\\n    find_library(LIBRT rt)\\n    if(LIBRT)\\n        list(APPEND PLATFORM_LIBS rt)\\n    endif()\\n    find_package(Numa)\\n    if(NUMA_FOUND)\\n        list(APPEND CMAKE_REQUIRED_LIBRARIES ${NUMA_LIBRARY})\\n        check_symbol_exists(numa_node_of_cpu numa.h NUMA_V2)\\n        if(NUMA_V2)\\n            add_definitions(-DHAVE_LIBNUMA)\\n            message(STATUS \\\"libnuma found, building with support for NUMA nodes\\\")\\n            list(APPEND PLATFORM_LIBS ${NUMA_LIBRARY})\\n            link_directories(${NUMA_LIBRARY_DIR})\\n            include_directories(${NUMA_INCLUDE_DIR})\\n        endif()\\n    endif()\\n    mark_as_advanced(LIBRT NUMA_FOUND)\\nendif(UNIX)\\n\\nif(X64 AND NOT WIN32)\\n    option(ENABLE_PIC \\\"Enable Position Independent Code\\\" ON)\\nelse()\\n    option(ENABLE_PIC \\\"Enable Position Independent Code\\\" OFF)\\nendif(X64 AND NOT WIN32)\\n\\n# Compiler detection\\nif(CMAKE_GENERATOR STREQUAL \\\"Xcode\\\")\\n  set(XCODE 1)\\nendif()\\nif (APPLE)\\n  add_definitions(-DMACOS)\\nendif()\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"---------1---------2---------3---------4---------5---------6---------7---------8\\n12345678911234567892123456789312345678941234567895123456789612345678971234567898\\n000010 IDENTIFICATION DIVISION.                                        MODTGHERE\\n000020 PROGRAM-ID.       SAMPLE.\\n000030 AUTHOR.           TEST SAM. \\n000040 DATE-WRITTEN.     5 February 2013\\n000041\\n000042* A sample program just to show the form.\\n000043* The program copies its input to the output,\\n000044* and counts the number of records.\\n000045* At the end this number is printed.\\n000046\\n000050 ENVIRONMENT DIVISION.\\n000060 INPUT-OUTPUT SECTION.\\n000070 FILE-CONTROL.\\n000080     SELECT STUDENT-FILE     ASSIGN TO SYSIN\\n000090         ORGANIZATION IS LINE SEQUENTIAL.\\n000100     SELECT PRINT-FILE       ASSIGN TO SYSOUT\\n000110         ORGANIZATION IS LINE SEQUENTIAL.\\n000120\\n000130 DATA DIVISION.\\n000140 FILE SECTION.\\n000150 FD  STUDENT-FILE\\n000160     RECORD CONTAINS 43 CHARACTERS\\n000170     DATA RECORD IS STUDENT-IN.\\n000180 01  STUDENT-IN              PIC X(43).\\n000190\\n000200 FD  PRINT-FILE\\n000210     RECORD CONTAINS 80 CHARACTERS\\n000220     DATA RECORD IS PRINT-LINE.\\n000230 01  PRINT-LINE              PIC X(80).\\n000240\\n000250 WORKING-STORAGE SECTION.\\n000260 01  DATA-REMAINS-SWITCH     PIC X(2)      VALUE SPACES.\\n000261 01  RECORDS-WRITTEN         PIC 99.\\n000270\\n000280 01  DETAIL-LINE.\\n000290     05  FILLER              PIC X(7)      VALUE SPACES.\\n000300     05  RECORD-IMAGE        PIC X(43).\\n000310     05  FILLER              PIC X(30)     VALUE SPACES.\\n000311 \\n000312 01  SUMMARY-LINE.\\n000313     05  FILLER              PIC X(7)      VALUE SPACES.\\n000314     05  TOTAL-READ          PIC 99.\\n000315     05  FILLER              PIC X         VALUE SPACE.\\n000316     05  FILLER              PIC X(17)     \\n000317                 VALUE  'Records were read'.\\n000318     05  FILLER              PIC X(53)     VALUE SPACES.\\n000319\\n000320 PROCEDURE DIVISION.\\n000321\\n000330 PREPARE-SENIOR-REPORT.\\n000340     OPEN INPUT  STUDENT-FILE\\n000350          OUTPUT PRINT-FILE.\\n000351     MOVE ZERO TO RECORDS-WRITTEN.\\n000360     READ STUDENT-FILE\\n000370         AT END MOVE 'NO' TO DATA-REMAINS-SWITCH\\n000380     END-READ.\\n000390     PERFORM PROCESS-RECORDS\\n000410         UNTIL DATA-REMAINS-SWITCH = 'NO'.\\n000411     PERFORM PRINT-SUMMARY.\\n000420     CLOSE STUDENT-FILE\\n000430           PRINT-FILE.\\n000440     STOP RUN.\\n000450\\n000460 PROCESS-RECORDS.\\n000470     MOVE STUDENT-IN TO RECORD-IMAGE.\\n000480     MOVE DETAIL-LINE TO PRINT-LINE.\\n000490     WRITE PRINT-LINE.\\n000500     ADD 1 TO RECORDS-WRITTEN.\\n000510     READ STUDENT-FILE\\n000520         AT END MOVE 'NO' TO DATA-REMAINS-SWITCH\\n000530     END-READ. \\n000540\\n000550 PRINT-SUMMARY.\\n000560     MOVE RECORDS-WRITTEN TO TOTAL-READ.\\n000570     MOVE SUMMARY-LINE TO PRINT-LINE.\\n000571     WRITE PRINT-LINE. \\n000572\\n000580\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# CoffeeScript mode for CodeMirror\\n# Copyright (c) 2011 Jeff Pickhardt, released under\\n# the MIT License.\\n#\\n# Modified from the Python CodeMirror mode, which also is \\n# under the MIT License Copyright (c) 2010 Timothy Farrell.\\n#\\n# The following script, Underscore.coffee, is used to \\n# demonstrate CoffeeScript mode for CodeMirror.\\n#\\n# To download CoffeeScript mode for CodeMirror, go to:\\n# https://github.com/pickhardt/coffeescript-codemirror-mode\\n\\n# **Underscore.coffee\\n# (c) 2011 Jeremy Ashkenas, DocumentCloud Inc.**\\n# Underscore is freely distributable under the terms of the\\n# [MIT license](http://en.wikipedia.org/wiki/MIT_License).\\n# Portions of Underscore are inspired by or borrowed from\\n# [Prototype.js](http://prototypejs.org/api), Oliver Steele's\\n# [Functional](http://osteele.com), and John Resig's\\n# [Micro-Templating](http://ejohn.org).\\n# For all details and documentation:\\n# http://documentcloud.github.com/underscore/\\n\\n\\n# Baseline setup\\n# --------------\\n\\n# Establish the root object, `window` in the browser, or `global` on the server.\\nroot = this\\n\\n\\n# Save the previous value of the `_` variable.\\npreviousUnderscore = root._\\n\\n### Multiline\\n    comment\\n###\\n\\n# Establish the object that gets thrown to break out of a loop iteration.\\n# `StopIteration` is SOP on Mozilla.\\nbreaker = if typeof(StopIteration) is 'undefined' then '__break__' else StopIteration\\n\\n\\n#### Docco style single line comment (title)\\n\\n\\n# Helper function to escape **RegExp** contents, because JS doesn't have one.\\nescapeRegExp = (string) -> string.replace(/([.*+?^${}()|[\\\\]\\\\/\\\\])/g, '\\\\$1')\\n\\n\\n# Save bytes in the minified (but not gzipped) version:\\nArrayProto = Array.prototype\\nObjProto = Object.prototype\\n\\n\\n# Create quick reference variables for speed access to core prototypes.\\nslice = ArrayProto.slice\\nunshift = ArrayProto.unshift\\ntoString = ObjProto.toString\\nhasOwnProperty = ObjProto.hasOwnProperty\\npropertyIsEnumerable = ObjProto.propertyIsEnumerable\\n\\n\\n# All **ECMA5** native implementations we hope to use are declared here.\\nnativeForEach = ArrayProto.forEach\\nnativeMap = ArrayProto.map\\nnativeReduce = ArrayProto.reduce\\nnativeReduceRight = ArrayProto.reduceRight\\nnativeFilter = ArrayProto.filter\\nnativeEvery = ArrayProto.every\\nnativeSome = ArrayProto.some\\nnativeIndexOf = ArrayProto.indexOf\\nnativeLastIndexOf = ArrayProto.lastIndexOf\\nnativeIsArray = Array.isArray\\nnativeKeys = Object.keys\\n\\n\\n# Create a safe reference to the Underscore object for use below.\\n_ = (obj) -> new wrapper(obj)\\n\\n\\n# Export the Underscore object for **CommonJS**.\\nif typeof(exports) != 'undefined' then exports._ = _\\n\\n\\n# Export Underscore to global scope.\\nroot._ = _\\n\\n\\n# Current version.\\n_.VERSION = '1.1.0'\\n\\n\\n# Collection Functions\\n# --------------------\\n\\n# The cornerstone, an **each** implementation.\\n# Handles objects implementing **forEach**, arrays, and raw objects.\\n_.each = (obj, iterator, context) ->\\n  try\\n    if nativeForEach and obj.forEach is nativeForEach\\n      obj.forEach iterator, context\\n    else if _.isNumber obj.length\\n      iterator.call context, obj[i], i, obj for i in [0...obj.length]\\n    else\\n      iterator.call context, val, key, obj for own key, val of obj\\n  catch e\\n    throw e if e isnt breaker\\n  obj\\n\\n\\n# Return the results of applying the iterator to each element. Use JavaScript\\n# 1.6's version of **map**, if possible.\\n_.map = (obj, iterator, context) ->\\n  return obj.map(iterator, context) if nativeMap and obj.map is nativeMap\\n  results = []\\n  _.each obj, (value, index, list) ->\\n    results.push iterator.call context, value, index, list\\n  results\\n\\n\\n# **Reduce** builds up a single result from a list of values. Also known as\\n# **inject**, or **foldl**. Uses JavaScript 1.8's version of **reduce**, if possible.\\n_.reduce = (obj, iterator, memo, context) ->\\n  if nativeReduce and obj.reduce is nativeReduce\\n    iterator = _.bind iterator, context if context\\n    return obj.reduce iterator, memo\\n  _.each obj, (value, index, list) ->\\n    memo = iterator.call context, memo, value, index, list\\n  memo\\n\\n\\n# The right-associative version of **reduce**, also known as **foldr**. Uses\\n# JavaScript 1.8's version of **reduceRight**, if available.\\n_.reduceRight = (obj, iterator, memo, context) ->\\n  if nativeReduceRight and obj.reduceRight is nativeReduceRight\\n    iterator = _.bind iterator, context if context\\n    return obj.reduceRight iterator, memo\\n  reversed = _.clone(_.toArray(obj)).reverse()\\n  _.reduce reversed, iterator, memo, context\\n\\n\\n# Return the first value which passes a truth test.\\n_.detect = (obj, iterator, context) ->\\n  result = null\\n  _.each obj, (value, index, list) ->\\n    if iterator.call context, value, index, list\\n      result = value\\n      _.breakLoop()\\n  result\\n\\n\\n# Return all the elements that pass a truth test. Use JavaScript 1.6's\\n# **filter**, if it exists.\\n_.filter = (obj, iterator, context) ->\\n  return obj.filter iterator, context if nativeFilter and obj.filter is nativeFilter\\n  results = []\\n  _.each obj, (value, index, list) ->\\n    results.push value if iterator.call context, value, index, list\\n  results\\n\\n\\n# Return all the elements for which a truth test fails.\\n_.reject = (obj, iterator, context) ->\\n  results = []\\n  _.each obj, (value, index, list) ->\\n    results.push value if not iterator.call context, value, index, list\\n  results\\n\\n\\n# Determine whether all of the elements match a truth test. Delegate to\\n# JavaScript 1.6's **every**, if it is present.\\n_.every = (obj, iterator, context) ->\\n  iterator ||= _.identity\\n  return obj.every iterator, context if nativeEvery and obj.every is nativeEvery\\n  result = true\\n  _.each obj, (value, index, list) ->\\n    _.breakLoop() unless (result = result and iterator.call(context, value, index, list))\\n  result\\n\\n\\n# Determine if at least one element in the object matches a truth test. Use\\n# JavaScript 1.6's **some**, if it exists.\\n_.some = (obj, iterator, context) ->\\n  iterator ||= _.identity\\n  return obj.some iterator, context if nativeSome and obj.some is nativeSome\\n  result = false\\n  _.each obj, (value, index, list) ->\\n    _.breakLoop() if (result = iterator.call(context, value, index, list))\\n  result\\n\\n\\n# Determine if a given value is included in the array or object,\\n# based on `=== `.\\n_.include = (obj, target) ->\\n  return _.indexOf(obj, target) isnt -1 if nativeIndexOf and obj.indexOf is nativeIndexOf\\n  return true for own key, val of obj when val is target\\n  false\\n\\n\\n# Invoke a method with arguments on every item in a collection.\\n_.invoke = (obj, method) ->\\n  args = _.rest arguments, 2\\n  (if method then val[method] else val).apply(val, args) for val in obj\\n\\n\\n# Convenience version of a common use case of **map**: fetching a property.\\n_.pluck = (obj, key) ->\\n  _.map(obj, (val) -> val[key])\\n\\n\\n# Return the maximum item or (item-based computation).\\n_.max = (obj, iterator, context) ->\\n  return Math.max.apply(Math, obj) if not iterator and _.isArray(obj)\\n  result = computed: -Infinity\\n  _.each obj, (value, index, list) ->\\n    computed = if iterator then iterator.call(context, value, index, list) else value\\n    computed >= result.computed and (result = {value: value, computed: computed})\\n  result.value\\n\\n\\n# Return the minimum element (or element-based computation).\\n_.min = (obj, iterator, context) ->\\n  return Math.min.apply(Math, obj) if not iterator and _.isArray(obj)\\n  result = computed: Infinity\\n  _.each obj, (value, index, list) ->\\n    computed = if iterator then iterator.call(context, value, index, list) else value\\n    computed < result.computed and (result = {value: value, computed: computed})\\n  result.value\\n\\n\\n# Sort the object's values by a criterion produced by an iterator.\\n_.sortBy = (obj, iterator, context) ->\\n  _.pluck(((_.map obj, (value, index, list) ->\\n    {value: value, criteria: iterator.call(context, value, index, list)}\\n  ).sort((left, right) ->\\n    a = left.criteria; b = right.criteria\\n    if a < b then -1 else if a > b then 1 else 0\\n  )), 'value')\\n\\n\\n# Use a comparator function to figure out at what index an object should\\n# be inserted so as to maintain order. Uses binary search.\\n_.sortedIndex = (array, obj, iterator) ->\\n  iterator ||= _.identity\\n  low = 0\\n  high = array.length\\n  while low < high\\n    mid = (low + high) >> 1\\n    if iterator(array[mid]) < iterator(obj) then low = mid + 1 else high = mid\\n  low\\n\\n\\n# Convert anything iterable into a real, live array.\\n_.toArray = (iterable) ->\\n  return [] if (!iterable)\\n  return iterable.toArray() if (iterable.toArray)\\n  return iterable if (_.isArray(iterable))\\n  return slice.call(iterable) if (_.isArguments(iterable))\\n  _.values(iterable)\\n\\n\\n# Return the number of elements in an object.\\n_.size = (obj) -> _.toArray(obj).length\\n\\n\\n# Array Functions\\n# ---------------\\n\\n# Get the first element of an array. Passing `n` will return the first N\\n# values in the array. Aliased as **head**. The `guard` check allows it to work\\n# with **map**.\\n_.first = (array, n, guard) ->\\n  if n and not guard then slice.call(array, 0, n) else array[0]\\n\\n\\n# Returns everything but the first entry of the array. Aliased as **tail**.\\n# Especially useful on the arguments object. Passing an `index` will return\\n# the rest of the values in the array from that index onward. The `guard`\\n# check allows it to work with **map**.\\n_.rest = (array, index, guard) ->\\n  slice.call(array, if _.isUndefined(index) or guard then 1 else index)\\n\\n\\n# Get the last element of an array.\\n_.last = (array) -> array[array.length - 1]\\n\\n\\n# Trim out all falsy values from an array.\\n_.compact = (array) -> item for item in array when item\\n\\n\\n# Return a completely flattened version of an array.\\n_.flatten = (array) ->\\n  _.reduce array, (memo, value) ->\\n    return memo.concat(_.flatten(value)) if _.isArray value\\n    memo.push value\\n    memo\\n  , []\\n\\n\\n# Return a version of the array that does not contain the specified value(s).\\n_.without = (array) ->\\n  values = _.rest arguments\\n  val for val in _.toArray(array) when not _.include values, val\\n\\n\\n# Produce a duplicate-free version of the array. If the array has already\\n# been sorted, you have the option of using a faster algorithm.\\n_.uniq = (array, isSorted) ->\\n  memo = []\\n  for el, i in _.toArray array\\n    memo.push el if i is 0 || (if isSorted is true then _.last(memo) isnt el else not _.include(memo, el))\\n  memo\\n\\n\\n# Produce an array that contains every item shared between all the\\n# passed-in arrays.\\n_.intersect = (array) ->\\n  rest = _.rest arguments\\n  _.select _.uniq(array), (item) ->\\n    _.all rest, (other) ->\\n      _.indexOf(other, item) >= 0\\n\\n\\n# Zip together multiple lists into a single array -- elements that share\\n# an index go together.\\n_.zip = ->\\n  length = _.max _.pluck arguments, 'length'\\n  results = new Array length\\n  for i in [0...length]\\n    results[i] = _.pluck arguments, String i\\n  results\\n\\n\\n# If the browser doesn't supply us with **indexOf** (I'm looking at you, MSIE),\\n# we need this function. Return the position of the first occurrence of an\\n# item in an array, or -1 if the item is not included in the array.\\n_.indexOf = (array, item) ->\\n  return array.indexOf item if nativeIndexOf and array.indexOf is nativeIndexOf\\n  i = 0; l = array.length\\n  while l - i\\n    if array[i] is item then return i else i++\\n  -1\\n\\n\\n# Provide JavaScript 1.6's **lastIndexOf**, delegating to the native function,\\n# if possible.\\n_.lastIndexOf = (array, item) ->\\n  return array.lastIndexOf(item) if nativeLastIndexOf and array.lastIndexOf is nativeLastIndexOf\\n  i = array.length\\n  while i\\n    if array[i] is item then return i else i--\\n  -1\\n\\n\\n# Generate an integer Array containing an arithmetic progression. A port of\\n# [the native Python **range** function](http://docs.python.org/library/functions.html#range).\\n_.range = (start, stop, step) ->\\n  a = arguments\\n  solo = a.length <= 1\\n  i = start = if solo then 0 else a[0]\\n  stop = if solo then a[0] else a[1]\\n  step = a[2] or 1\\n  len = Math.ceil((stop - start) / step)\\n  return [] if len <= 0\\n  range = new Array len\\n  idx = 0\\n  loop\\n    return range if (if step > 0 then i - stop else stop - i) >= 0\\n    range[idx] = i\\n    idx++\\n    i+= step\\n\\n\\n# Function Functions\\n# ------------------\\n\\n# Create a function bound to a given object (assigning `this`, and arguments,\\n# optionally). Binding with arguments is also known as **curry**.\\n_.bind = (func, obj) ->\\n  args = _.rest arguments, 2\\n  -> func.apply obj or root, args.concat arguments\\n\\n\\n# Bind all of an object's methods to that object. Useful for ensuring that\\n# all callbacks defined on an object belong to it.\\n_.bindAll = (obj) ->\\n  funcs = if arguments.length > 1 then _.rest(arguments) else _.functions(obj)\\n  _.each funcs, (f) -> obj[f] = _.bind obj[f], obj\\n  obj\\n\\n\\n# Delays a function for the given number of milliseconds, and then calls\\n# it with the arguments supplied.\\n_.delay = (func, wait) ->\\n  args = _.rest arguments, 2\\n  setTimeout((-> func.apply(func, args)), wait)\\n\\n\\n# Memoize an expensive function by storing its results.\\n_.memoize = (func, hasher) ->\\n  memo = {}\\n  hasher or= _.identity\\n  ->\\n    key = hasher.apply this, arguments\\n    return memo[key] if key of memo\\n    memo[key] = func.apply this, arguments\\n\\n\\n# Defers a function, scheduling it to run after the current call stack has\\n# cleared.\\n_.defer = (func) ->\\n  _.delay.apply _, [func, 1].concat _.rest arguments\\n\\n\\n# Returns the first function passed as an argument to the second,\\n# allowing you to adjust arguments, run code before and after, and\\n# conditionally execute the original function.\\n_.wrap = (func, wrapper) ->\\n  -> wrapper.apply wrapper, [func].concat arguments\\n\\n\\n# Returns a function that is the composition of a list of functions, each\\n# consuming the return value of the function that follows.\\n_.compose = ->\\n  funcs = arguments\\n  ->\\n    args = arguments\\n    for i in [funcs.length - 1..0] by -1\\n      args = [funcs[i].apply(this, args)]\\n    args[0]\\n\\n\\n# Object Functions\\n# ----------------\\n\\n# Retrieve the names of an object's properties.\\n_.keys = nativeKeys or (obj) ->\\n  return _.range 0, obj.length if _.isArray(obj)\\n  key for key, val of obj\\n\\n\\n# Retrieve the values of an object's properties.\\n_.values = (obj) ->\\n  _.map obj, _.identity\\n\\n\\n# Return a sorted list of the function names available in Underscore.\\n_.functions = (obj) ->\\n  _.filter(_.keys(obj), (key) -> _.isFunction(obj[key])).sort()\\n\\n\\n# Extend a given object with all of the properties in a source object.\\n_.extend = (obj) ->\\n  for source in _.rest(arguments)\\n    obj[key] = val for key, val of source\\n  obj\\n\\n\\n# Create a (shallow-cloned) duplicate of an object.\\n_.clone = (obj) ->\\n  return obj.slice 0 if _.isArray obj\\n  _.extend {}, obj\\n\\n\\n# Invokes interceptor with the obj, and then returns obj.\\n# The primary purpose of this method is to \\\"tap into\\\" a method chain,\\n# in order to perform operations on intermediate results within\\n the chain.\\n_.tap = (obj, interceptor) ->\\n  interceptor obj\\n  obj\\n\\n\\n# Perform a deep comparison to check if two objects are equal.\\n_.isEqual = (a, b) ->\\n  # Check object identity.\\n  return true if a is b\\n  # Different types?\\n  atype = typeof(a); btype = typeof(b)\\n  return false if atype isnt btype\\n  # Basic equality test (watch out for coercions).\\n  return true if `a == b`\\n  # One is falsy and the other truthy.\\n  return false if (!a and b) or (a and !b)\\n  # One of them implements an `isEqual()`?\\n  return a.isEqual(b) if a.isEqual\\n  # Check dates' integer values.\\n  return a.getTime() is b.getTime() if _.isDate(a) and _.isDate(b)\\n  # Both are NaN?\\n  return false if _.isNaN(a) and _.isNaN(b)\\n  # Compare regular expressions.\\n  if _.isRegExp(a) and _.isRegExp(b)\\n    return a.source is b.source and\\n           a.global is b.global and\\n           a.ignoreCase is b.ignoreCase and\\n           a.multiline is b.multiline\\n  # If a is not an object by this point, we can't handle it.\\n  return false if atype isnt 'object'\\n  # Check for different array lengths before comparing contents.\\n  return false if a.length and (a.length isnt b.length)\\n  # Nothing else worked, deep compare the contents.\\n  aKeys = _.keys(a); bKeys = _.keys(b)\\n  # Different object sizes?\\n  return false if aKeys.length isnt bKeys.length\\n  # Recursive comparison of contents.\\n  return false for key, val of a when !(key of b) or !_.isEqual(val, b[key])\\n  true\\n\\n\\n# Is a given array or object empty?\\n_.isEmpty = (obj) ->\\n  return obj.length is 0 if _.isArray(obj) or _.isString(obj)\\n  return false for own key of obj\\n  true\\n\\n\\n# Is a given value a DOM element?\\n_.isElement = (obj) -> obj and obj.nodeType is 1\\n\\n\\n# Is a given value an array?\\n_.isArray = nativeIsArray or (obj) -> !!(obj and obj.concat and obj.unshift and not obj.callee)\\n\\n\\n# Is a given variable an arguments object?\\n_.isArguments = (obj) -> obj and obj.callee\\n\\n\\n# Is the given value a function?\\n_.isFunction = (obj) -> !!(obj and obj.constructor and obj.call and obj.apply)\\n\\n\\n# Is the given value a string?\\n_.isString = (obj) -> !!(obj is '' or (obj and obj.charCodeAt and obj.substr))\\n\\n\\n# Is a given value a number?\\n_.isNumber = (obj) -> (obj is +obj) or toString.call(obj) is '[object Number]'\\n\\n\\n# Is a given value a boolean?\\n_.isBoolean = (obj) -> obj is true or obj is false\\n\\n\\n# Is a given value a Date?\\n_.isDate = (obj) -> !!(obj and obj.getTimezoneOffset and obj.setUTCFullYear)\\n\\n\\n# Is the given value a regular expression?\\n_.isRegExp = (obj) -> !!(obj and obj.exec and (obj.ignoreCase or obj.ignoreCase is false))\\n\\n\\n# Is the given value NaN -- this one is interesting. `NaN != NaN`, and\\n# `isNaN(undefined) == tru`, so we make sure it's a number first.\\n_.isNaN = (obj) -> _.isNumber(obj) and window.isNaN(obj)\\n\\n\\n# Is a given value equal to null?\\n_.isNull = (obj) -> obj is null\\n\\n\\n# Is a given variable undefined?\\n_.isUndefined = (obj) -> typeof obj is 'undefined'\\n\\n\\n# Utility Functions\\n# -----------------\\n\\n# Run Underscore.js in noConflict mode, returning the `_` variable to its\\n# previous owner. Returns a reference to the Underscore object.\\n_.noConflict = ->\\n  root._ = previousUnderscore\\n  this\\n\\n\\n# Keep the identity function around for default iterators.\\n_.identity = (value) -> value\\n\\n\\n# Run a function `n` times.\\n_.times = (n, iterator, context) ->\\n  iterator.call context, i for i in [0...n]\\n\\n\\n# Break out of the middle of an iteration.\\n_.breakLoop = -> throw breaker\\n\\n\\n# Add your own custom functions to the Underscore object, ensuring that\\n# they're correctly added to the OOP wrapper as well.\\n_.mixin = (obj) ->\\n  for name in _.functions(obj)\\n    addToWrapper name, _[name] = obj[name]\\n\\n\\n# Generate a unique integer id (unique within the entire client session).\\n# Useful for temporary DOM ids.\\nidCounter = 0\\n_.uniqueId = (prefix) ->\\n  (prefix or '') + idCounter++\\n\\n\\n# By default, Underscore uses **ERB**-style template delimiters, change the\\n# following template settings to use alternative delimiters.\\n_.templateSettings = {\\n  start: '<%'\\n  end: '%>'\\n  interpolate: /<%=(.+?)%>/g\\n}\\n\\n\\n# JavaScript templating a-la **ERB**, pilfered from John Resig's\\n# *Secrets of the JavaScript Ninja*, page 83.\\n# Single-quote fix from Rick Strahl.\\n# With alterations for arbitrary delimiters, and to preserve whitespace.\\n_.template = (str, data) ->\\n  c = _.templateSettings\\n  endMatch = new RegExp(\\\"'(?=[^\\\"+c.end.substr(0, 1)+\\\"]*\\\"+escapeRegExp(c.end)+\\\")\\\",\\\"g\\\")\\n  fn = new Function 'obj',\\n    'var p=[],print=function(){p.push.apply(p,arguments);};' +\\n    'with(obj||{}){p.push(\\\\'' +\\n    str.replace(/\\r/g, '\\\\r')\\n       .replace(/\\n/g, '\\\\n')\\n       .replace(/\\t/g, '\\\\t')\\n       .replace(endMatch,\\\"\\uFFFD\\uFFFD\\uFFFD\\\")\\n       .split(\\\"'\\\").join(\\\"\\\\'\\\")\\n       .split(\\\"\\uFFFD\\uFFFD\\uFFFD\\\").join(\\\"'\\\")\\n       .replace(c.interpolate, \\\"',$1,'\\\")\\n       .split(c.start).join(\\\"');\\\")\\n       .split(c.end).join(\\\"p.push('\\\") +\\n       \\\"');}return p.join('');\\\"\\n  if data then fn(data) else fn\\n\\n\\n# Aliases\\n# -------\\n\\n_.forEach = _.each\\n_.foldl = _.inject = _.reduce\\n_.foldr = _.reduceRight\\n_.select = _.filter\\n_.all = _.every\\n_.any = _.some\\n_.contains = _.include\\n_.head = _.first\\n_.tail = _.rest\\n_.methods = _.functions\\n\\n\\n# Setup the OOP Wrapper\\n# ---------------------\\n\\n# If Underscore is called as a function, it returns a wrapped object that\\n# can be used OO-style. This wrapper holds altered versions of all the\\n# underscore functions. Wrapped objects may be chained.\\nwrapper = (obj) ->\\n  this._wrapped = obj\\n  this\\n\\n\\n# Helper function to continue chaining intermediate results.\\nresult = (obj, chain) ->\\n  if chain then _(obj).chain() else obj\\n\\n\\n# A method to easily add functions to the OOP wrapper.\\naddToWrapper = (name, func) ->\\n  wrapper.prototype[name] = ->\\n    args = _.toArray arguments\\n    unshift.call args, this._wrapped\\n    result func.apply(_, args), this._chain\\n\\n\\n# Add all ofthe Underscore functions to the wrapper object.\\n_.mixin _\\n\\n\\n# Add all mutator Array functions to the wrapper.\\n_.each ['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], (name) ->\\n  method = Array.prototype[name]\\n  wrapper.prototype[name] = ->\\n    method.apply(this._wrapped, arguments)\\n    result(this._wrapped, this._chain)\\n\\n\\n# Add all accessor Array functions to the wrapper.\\n_.each ['concat', 'join', 'slice'], (name) ->\\n  method = Array.prototype[name]\\n  wrapper.prototype[name] = ->\\n    result(method.apply(this._wrapped, arguments), this._chain)\\n\\n\\n# Start chaining a wrapped Underscore object.\\nwrapper::chain = ->\\n  this._chain = true\\n  this\\n\\n\\n# Extracts the result from a wrapped and chained object.\\nwrapper::value = -> this._wrapped\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"(in-package :cl-postgres)\\n\\n;; These are used to synthesize reader and writer names for integer\\n;; reading/writing functions when the amount of bytes and the\\n;; signedness is known. Both the macro that creates the functions and\\n;; some macros that use them create names this way.\\n(eval-when (:compile-toplevel :load-toplevel :execute)\\n  (defun integer-reader-name (bytes signed)\\n    (intern (with-standard-io-syntax\\n              (format nil \\\"~a~a~a~a\\\" '#:read- (if signed \\\"\\\" '#:u) '#:int bytes))))\\n  (defun integer-writer-name (bytes signed)\\n    (intern (with-standard-io-syntax\\n              (format nil \\\"~a~a~a~a\\\" '#:write- (if signed \\\"\\\" '#:u) '#:int bytes)))))\\n\\n(defmacro integer-reader (bytes)\\n  \\\"Create a function to read integers from a binary stream.\\\"\\n  (let ((bits (* bytes 8)))\\n    (labels ((return-form (signed)\\n               (if signed\\n                   `(if (logbitp, (1 - bits) result)\\n(dpb result(byte, (1 - bits) 0) - 1)\\nresult)\\n`result))\\n             (generate-reader (signed)\\n               `(defun, (integer - reader - name bytes signed)(socket)\\n  (declare(type stream socket)\\n  #.* optimize *)\\n  , (if (= bytes 1)\\n`(let ((result (the (unsigned-byte 8) (read-byte socket))))\\n                          (declare (type (unsigned-byte 8) result))\\n                          ,(return-form signed))\\n                       `(let((result 0))\\n  (declare(type(unsigned - byte, bits) result))\\n  ,@(loop : for byte : from(1 - bytes) : downto 0\\n                                   : collect`(setf (ldb (byte 8 ,(* 8 byte)) result)\\n                                                   (the (unsigned-byte 8) (read-byte socket))))\\n                          ,(return-form signed))))))\\n      `(progn\\n;; This causes weird errors on SBCL in some circumstances.Disabled for now.\\n; ; (declaim(inline, (integer - reader - name bytes t)\\n;;                          , (integer - reader - name bytes nil)))\\n(declaim(ftype(function (t) (signed - byte, bits))\\n  , (integer - reader - name bytes t)))\\n         , (generate - reader t)\\n(declaim(ftype(function (t) (unsigned - byte, bits))\\n  , (integer - reader - name bytes nil)))\\n         , (generate - reader nil)))))\\n\\n(defmacro integer - writer(bytes)\\n\\\"Create a function to write integers to a binary stream.\\\"\\n  (let((bits(* 8 bytes)))\\n    `(progn\\n      (declaim (inline ,(integer-writer-name bytes t)\\n                       ,(integer-writer-name bytes nil)))\\n      (defun ,(integer-writer-name bytes nil) (socket value)\\n        (declare (type stream socket)\\n                 (type (unsigned-byte ,bits) value)\\n                 #.*optimize*)\\n        ,@(if (= bytes 1)\\n              `((write - byte value socket))\\n  (loop :for byte : from(1 - bytes) : downto 0\\n                    : collect`(write-byte (ldb (byte 8 ,(* byte 8)) value)\\n                               socket)))\\n        (values))\\n      (defun ,(integer-writer-name bytes t) (socket value)\\n        (declare (type stream socket)\\n                 (type (signed-byte ,bits) value)\\n                 #.*optimize*)\\n        ,@(if (= bytes 1)\\n              `((write - byte(ldb(byte 8 0) value) socket))\\n(loop: for byte: from (1 - bytes) : downto 0\\n                    : collect `(write-byte (ldb (byte 8 ,(* byte 8)) value)\\n                               socket)))\\n        (values)))))\\n\\n;; All the instances of the above that we need.\\n\\n(integer-reader 1)\\n(integer-reader 2)\\n(integer-reader 4)\\n(integer-reader 8)\\n\\n(integer-writer 1)\\n(integer-writer 2)\\n(integer-writer 4)\\n\\n(defun write-bytes (socket bytes)\\n  \\\"Write a byte-array to a stream.\\\"\\n  (declare (type stream socket)\\n           (type (simple-array (unsigned-byte 8)) bytes)\\n           #.*optimize*)\\n  (write-sequence bytes socket))\\n\\n(defun write-str (socket string)\\n  \\\"Write a null-terminated string to a stream \\\\(encoding it when UTF-8\\nsupport is enabled.).\\\"\\n  (declare (type stream socket)\\n           (type string string)\\n           #.*optimize*)\\n  (enc-write-string string socket)\\n  (write-uint1 socket 0))\\n\\n(declaim (ftype (function (t unsigned-byte)\\n                          (simple-array (unsigned-byte 8) (*)))\\n                read-bytes))\\n(defun read-bytes (socket length)\\n  \\\"Read a byte array of the given length from a stream.\\\"\\n  (declare (type stream socket)\\n           (type fixnum length)\\n           #.*optimize*)\\n  (let ((result (make-array length :element-type '(unsigned-byte 8))))\\n    (read-sequence result socket)\\n    result))\\n\\n(declaim (ftype (function (t) string) read-str))\\n(defun read-str (socket)\\n  \\\"Read a null-terminated string from a stream. Takes care of encoding\\nwhen UTF-8 support is enabled.\\\"\\n  (declare (type stream socket)\\n           #.*optimize*)\\n  (enc-read-string socket :null-terminated t))\\n\\n(defun skip-bytes (socket length)\\n  \\\"Skip a given number of bytes in a binary stream.\\\"\\n  (declare (type stream socket)\\n           (type (unsigned-byte 32) length)\\n           #.*optimize*)\\n  (dotimes (i length)\\n    (read-byte socket)))\\n\\n(defun skip-str (socket)\\n  \\\"Skip a null-terminated string.\\\"\\n  (declare (type stream socket)\\n           #.*optimize*)\\n  (loop :for char :of-type fixnum = (read-byte socket)\\n        :until (zerop char)))\\n\\n(defun ensure-socket-is-closed (socket &key abort)\\n  (when (open-stream-p socket)\\n    (handler-case\\n        (close socket :abort abort)\\n      (error (error)\\n        (warn \\\"Ignoring the error which happened while trying to close PostgreSQL socket: ~A\\\" error)))))\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# Features of Crystal\\n# - Ruby-inspired syntax.\\n# - Statically type-checked but without having to specify the type of variables or method arguments.\\n# - Be able to call C code by writing bindings to it in Crystal.\\n# - Have compile-time evaluation and generation of code, to avoid boilerplate code.\\n# - Compile to efficient native code.\\n\\n# A very basic HTTP server\\nrequire \\\"http/server\\\"\\n\\nserver = HTTP::Server.new(8080) do |request|\\n  HTTP::Response.ok \\\"text/plain\\\", \\\"Hello world, got #{request.path}!\\\"\\nend\\n\\nputs \\\"Listening on http://0.0.0.0:8080\\\"\\nserver.listen\\n\\nmodule Foo\\n  abstract def abstract_method : String\\n\\n  @[AlwaysInline]\\n  def with_foofoo\\n    with Foo.new(self) yield\\n  end\\n\\n  struct Foo\\n    def initialize(@foo : ::Foo)\\n    end\\n\\n    def hello_world\\n      @foo.abstract_method\\n    end\\n  end\\nend\\n\\nclass Bar\\n  include Foo\\n\\n  @@foobar = 12345\\n\\n  def initialize(@bar : Int32)\\n  end\\n\\n  macro alias_method(name, method)\\n    def {{ name }}(*args)\\n      {{ method }}(*args)\\n    end\\n  end\\n\\n  def a_method\\n    \\\"Hello, World\\\"\\n  end\\n\\n  alias_method abstract_method, a_method\\n\\n  def show_instance_vars : Nil\\n    {% for var in @type.instance_vars %}\\n      puts \\\"@{{ var }} = #{ @{{ var }} }\\\"\\n    {% end %}\\n  end\\nend\\n\\nclass Baz < Bar; end\\n\\nlib LibC\\n  fun c_puts = \\\"puts\\\"(str : Char*) : Int\\nend\\n\\nbaz = Baz.new(100)\\nbaz.show_instance_vars\\nbaz.with_foofoo do\\n  LibC.c_puts hello_world\\nend\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/* Some example CSS */\\n\\n@import url(\\\"something.css\\\");\\n\\nbody {\\n  margin: 0;\\n  padding: 3em 6em;\\n  font-family: tahoma, arial, sans-serif;\\n  color: #000;\\n}\\n\\n#navigation a {\\n  font-weight: bold;\\n  text-decoration: none !important;\\n}\\n\\nh1 {\\n  font-size: 2.5em;\\n}\\n\\nh2 {\\n  font-size: 1.7em;\\n}\\n\\nh1:before, h2:before {\\n  content: \\\"::\\\";\\n}\\n\\ncode {\\n  font-family: courier, monospace;\\n  font-size: 80%;\\n  color: #418A8A;\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// Cypher Mode for CodeMirror, using the neo theme\\nMATCH (joe { name: 'Joe' })-[:knows*2..2]-(friend_of_friend)\\nWHERE NOT (joe)-[:knows]-(friend_of_friend)\\nRETURN friend_of_friend.name, COUNT(*)\\nORDER BY COUNT(*) DESC , friend_of_friend.name\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"\\nimport numpy as np\\ncimport cython\\nfrom libc.math cimport sqrt\\n\\n@cython.boundscheck(False)\\n@cython.wraparound(False)\\ndef pairwise_cython(double[:, ::1] X):\\n    cdef int M = X.shape[0]\\n    cdef int N = X.shape[1]\\n    cdef double tmp, d\\n    cdef double[:, ::1] D = np.empty((M, M), dtype=np.float64)\\n    for i in range(M):\\n        for j in range(M):\\n            d = 0.0\\n            for k in range(N):\\n                tmp = X[i, k] - X[j, k]\\n                d += tmp * tmp\\n            D[i, j] = sqrt(d)\\n    return np.asarray(D)\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/* D demo code // copied from phobos/sd/metastrings.d */\\n// Written in the D programming language.\\n\\n/**\\nTemplates with which to do compile-time manipulation of strings.\\n\\nMacros:\\n WIKI = Phobos/StdMetastrings\\n\\nCopyright: Copyright Digital Mars 2007 - 2009.\\nLicense:   <a href=\\\"http://www.boost.org/LICENSE_1_0.txt\\\">Boost License 1.0</a>.\\nAuthors:   $(WEB digitalmars.com, Walter Bright),\\n           Don Clugston\\nSource:    $(PHOBOSSRC std/_metastrings.d)\\n*/\\n/*\\n         Copyright Digital Mars 2007 - 2009.\\nDistributed under the Boost Software License, Version 1.0.\\n   (See accompanying file LICENSE_1_0.txt or copy at\\n         http://www.boost.org/LICENSE_1_0.txt)\\n */\\nmodule std.metastrings;\\n\\n/**\\nFormats constants into a string at compile time.  Analogous to $(XREF\\nstring,format).\\n\\nParameters:\\n\\nA = tuple of constants, which can be strings, characters, or integral\\n    values.\\n\\nFormats:\\n *    The formats supported are %s for strings, and %%\\n *    for the % character.\\nExample:\\n---\\nimport std.metastrings;\\nimport std.stdio;\\n\\nvoid main()\\n{\\n  string s = Format!(\\\"Arg %s = %s\\\", \\\"foo\\\", 27);\\n  writefln(s); // \\\"Arg foo = 27\\\"\\n}\\n * ---\\n */\\n\\ntemplate Format(A...)\\n{\\n    static if (A.length == 0)\\n        enum Format = \\\"\\\";\\n    else static if (is(typeof(A[0]) : const(char)[]))\\n        enum Format = FormatString!(A[0], A[1..$]);\\n    else\\n        enum Format = toStringNow!(A[0]) ~ Format!(A[1..$]);\\n}\\n\\ntemplate FormatString(const(char)[] F, A...)\\n{\\n    static if (F.length == 0)\\n        enum FormatString = Format!(A);\\n    else static if (F.length == 1)\\n        enum FormatString = F[0] ~ Format!(A);\\n    else static if (F[0..2] == \\\"%s\\\")\\n        enum FormatString\\n            = toStringNow!(A[0]) ~ FormatString!(F[2..$],A[1..$]);\\n    else static if (F[0..2] == \\\"%%\\\")\\n        enum FormatString = \\\"%\\\" ~ FormatString!(F[2..$],A);\\n    else\\n    {\\n        static assert(F[0] != '%', \\\"unrecognized format %\\\" ~ F[1]);\\n        enum FormatString = F[0] ~ FormatString!(F[1..$],A);\\n    }\\n}\\n\\nunittest\\n{\\n    auto s = Format!(\\\"hel%slo\\\", \\\"world\\\", -138, 'c', true);\\n    assert(s == \\\"helworldlo-138ctrue\\\", \\\"[\\\" ~ s ~ \\\"]\\\");\\n}\\n\\n/**\\n * Convert constant argument to a string.\\n */\\n\\ntemplate toStringNow(ulong v)\\n{\\n    static if (v < 10)\\n        enum toStringNow = \\\"\\\" ~ cast(char)(v + '0');\\n    else\\n        enum toStringNow = toStringNow!(v / 10) ~ toStringNow!(v % 10);\\n}\\n\\nunittest\\n{\\n    static assert(toStringNow!(1uL << 62) == \\\"4611686018427387904\\\");\\n}\\n\\n/// ditto\\ntemplate toStringNow(long v)\\n{\\n    static if (v < 0)\\n        enum toStringNow = \\\"-\\\" ~ toStringNow!(cast(ulong) -v);\\n    else\\n        enum toStringNow = toStringNow!(cast(ulong) v);\\n}\\n\\nunittest\\n{\\n    static assert(toStringNow!(0x100000000) == \\\"4294967296\\\");\\n    static assert(toStringNow!(-138L) == \\\"-138\\\");\\n}\\n\\n/// ditto\\ntemplate toStringNow(uint U)\\n{\\n    enum toStringNow = toStringNow!(cast(ulong)U);\\n}\\n\\n/// ditto\\ntemplate toStringNow(int I)\\n{\\n    enum toStringNow = toStringNow!(cast(long)I);\\n}\\n\\n/// ditto\\ntemplate toStringNow(bool B)\\n{\\n    enum toStringNow = B ? \\\"true\\\" : \\\"false\\\";\\n}\\n\\n/// ditto\\ntemplate toStringNow(string S)\\n{\\n    enum toStringNow = S;\\n}\\n\\n/// ditto\\ntemplate toStringNow(char C)\\n{\\n    enum toStringNow = \\\"\\\" ~ C;\\n}\\n\\n\\n/********\\n * Parse unsigned integer literal from the start of string s.\\n * returns:\\n *    .value = the integer literal as a string,\\n *    .rest = the string following the integer literal\\n * Otherwise:\\n *    .value = null,\\n *    .rest = s\\n */\\n\\ntemplate parseUinteger(const(char)[] s)\\n{\\n    static if (s.length == 0)\\n    {\\n        enum value = \\\"\\\";\\n        enum rest = \\\"\\\";\\n    }\\n    else static if (s[0] >= '0' && s[0] <= '9')\\n    {\\n        enum value = s[0] ~ parseUinteger!(s[1..$]).value;\\n        enum rest = parseUinteger!(s[1..$]).rest;\\n    }\\n    else\\n    {\\n        enum value = \\\"\\\";\\n        enum rest = s;\\n    }\\n}\\n\\n/********\\nParse integer literal optionally preceded by $(D '-') from the start\\nof string $(D s).\\n\\nReturns:\\n   .value = the integer literal as a string,\\n   .rest = the string following the integer literal\\n\\nOtherwise:\\n   .value = null,\\n   .rest = s\\n*/\\n\\ntemplate parseInteger(const(char)[] s)\\n{\\n    static if (s.length == 0)\\n    {\\n        enum value = \\\"\\\";\\n        enum rest = \\\"\\\";\\n    }\\n    else static if (s[0] >= '0' && s[0] <= '9')\\n    {\\n        enum value = s[0] ~ parseUinteger!(s[1..$]).value;\\n        enum rest = parseUinteger!(s[1..$]).rest;\\n    }\\n    else static if (s.length >= 2 &&\\n            s[0] == '-' && s[1] >= '0' && s[1] <= '9')\\n    {\\n        enum value = s[0..2] ~ parseUinteger!(s[2..$]).value;\\n        enum rest = parseUinteger!(s[2..$]).rest;\\n    }\\n    else\\n    {\\n        enum value = \\\"\\\";\\n        enum rest = s;\\n    }\\n}\\n\\nunittest\\n{\\n    assert(parseUinteger!(\\\"1234abc\\\").value == \\\"1234\\\");\\n    assert(parseUinteger!(\\\"1234abc\\\").rest == \\\"abc\\\");\\n    assert(parseInteger!(\\\"-1234abc\\\").value == \\\"-1234\\\");\\n    assert(parseInteger!(\\\"-1234abc\\\").rest == \\\"abc\\\");\\n}\\n\\n/**\\nDeprecated aliases held for backward compatibility.\\n*/\\ndeprecated alias toStringNow ToString;\\n/// Ditto\\ndeprecated alias parseUinteger ParseUinteger;\\n/// Ditto\\ndeprecated alias parseUinteger ParseInteger;\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"import 'dart:math' show Random;\\n\\nvoid main() {\\n  print(new Die(n: 12).roll());\\n}\\n\\n// Define a class.\\nclass Die {\\n  // Define a class variable.\\n  static Random shaker = new Random();\\n\\n  // Define instance variables.\\n  int sides, value;\\n\\n  // Define a method using shorthand syntax.\\n  String toString() => '$value';\\n\\n  // Define a constructor.\\n  Die({int n: 6}) {\\n    if (4 <= n && n <= 20) {\\n      sides = n;\\n    } else {\\n      // Support for errors and exceptions.\\n      throw new ArgumentError(/* */);\\n    }\\n  }\\n\\n  // Define an instance method.\\n  int roll() {\\n    return value = shaker.nextInt(sides) + 1;\\n  }\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"diff --git a/index.html b/index.html\\nindex c1d9156..7764744 100644\\n--- a/index.html\\n+++ b/index.html\\n@@ -95,7 +95,8 @@ StringStream.prototype = {\\n     <script>\\n       var editor = CodeMirror.fromTextArea(document.getElementById(\\\"code\\\"), {\\n         lineNumbers: true,\\n-        autoMatchBrackets: true\\n+        autoMatchBrackets: true,\\n+      onGutterClick: function(x){console.log(x);}\\n       });\\n     </script>\\n   </body>\\ndiff --git a/lib/codemirror.js b/lib/codemirror.js\\nindex 04646a9..9a39cc7 100644\\n--- a/lib/codemirror.js\\n+++ b/lib/codemirror.js\\n@@ -399,10 +399,16 @@ var CodeMirror = (function() {\\n     }\\n \\n     function onMouseDown(e) {\\n-      var start = posFromMouse(e), last = start;    \\n+      var start = posFromMouse(e), last = start, target = e.target();\\n       if (!start) return;\\n       setCursor(start.line, start.ch, false);\\n       if (e.button() != 1) return;\\n+      if (target.parentNode == gutter) {    \\n+        if (options.onGutterClick)\\n+          options.onGutterClick(indexOf(gutter.childNodes, target) + showingFrom);\\n+        return;\\n+      }\\n+\\n       if (!focused) onFocus();\\n \\n       e.stop();\\n@@ -808,7 +814,7 @@ var CodeMirror = (function() {\\n       for (var i = showingFrom; i < showingTo; ++i) {\\n         var marker = lines[i].gutterMarker;\\n         if (marker) html.push('<div class=\\\"' + marker.style + '\\\">' + htmlEscape(marker.text) + '</div>');\\n-        else html.push(\\\"<div>\\\" + (options.lineNumbers ? i + 1 : \\\"\\\\u00a0\\\") + \\\"</div>\\\");\\n+        else html.push(\\\"<div>\\\" + (options.lineNumbers ? i + options.firstLineNumber : \\\"\\\\u00a0\\\") + \\\"</div>\\\");\\n       }\\n       gutter.style.display = \\\"none\\\"; // TODO test whether this actually helps\\n       gutter.innerHTML = html.join(\\\"\\\");\\n@@ -1371,10 +1377,8 @@ var CodeMirror = (function() {\\n         if (option == \\\"parser\\\") setParser(value);\\n         else if (option === \\\"lineNumbers\\\") setLineNumbers(value);\\n         else if (option === \\\"gutter\\\") setGutter(value);\\n-        else if (option === \\\"readOnly\\\") options.readOnly = value;\\n-        else if (option === \\\"indentUnit\\\") {options.indentUnit = indentUnit = value; setParser(options.parser);}\\n-        else if (/^(?:enterMode|tabMode|indentWithTabs|readOnly|autoMatchBrackets|undoDepth)$/.test(option)) options[option] = value;\\n-        else throw new Error(\\\"Can't set option \\\" + option);\\n+        else if (option === \\\"indentUnit\\\") {options.indentUnit = value; setParser(options.parser);}\\n+        else options[option] = value;\\n       },\\n       cursorCoords: cursorCoords,\\n       undo: operation(undo),\\n@@ -1402,7 +1406,8 @@ var CodeMirror = (function() {\\n       replaceRange: operation(replaceRange),\\n \\n       operation: function(f){return operation(f)();},\\n-      refresh: function(){updateDisplay([{from: 0, to: lines.length}]);}\\n+      refresh: function(){updateDisplay([{from: 0, to: lines.length}]);},\\n+      getInputField: function(){return input;}\\n     };\\n     return instance;\\n   }\\n@@ -1420,6 +1425,7 @@ var CodeMirror = (function() {\\n     readOnly: false,\\n     onChange: null,\\n     onCursorActivity: null,\\n+    onGutterClick: null,\\n     autoMatchBrackets: false,\\n     workTime: 200,\\n     workDelay: 300,\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<!doctype html>\\n<html>\\n  <head>\\n    <title>My Django web application</title>\\n  </head>\\n  <body>\\n    <h1>\\n      {{ page.title|capfirst }}\\n    </h1>\\n    <ul class=\\\"my-list\\\">\\n      {# traverse a list of items and produce links to their views. #}\\n      {% for item in items %}\\n      <li>\\n        <a href=\\\"{% url 'item_view' item.name|slugify %}\\\">\\n          {{ item.name }}\\n        </a>\\n      </li>\\n      {% empty %}\\n      <li>You have no items in your list.</li>\\n      {% endfor %}\\n    </ul>\\n    {% comment \\\"this is a forgotten footer\\\" %}\\n    <footer></footer>\\n    {% endcomment %}\\n  </body>\\n</html>\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# Install Ghost blogging platform and run development environment\\n#\\n# VERSION 1.0.0\\n\\nFROM ubuntu:12.10\\nMAINTAINER Amer Grgic \\\"amer@livebyt.es\\\"\\nWORKDIR /data/ghost\\n\\n# Install dependencies for nginx installation\\nRUN apt-get update\\nRUN apt-get install -y python g++ make software-properties-common --force-yes\\nRUN add-apt-repository ppa:chris-lea/node.js\\nRUN apt-get update\\n# Install unzip\\nRUN apt-get install -y unzip\\n# Install curl\\nRUN apt-get install -y curl\\n# Install nodejs & npm\\nRUN apt-get install -y rlwrap\\nRUN apt-get install -y nodejs \\n# Download Ghost v0.4.1\\nRUN curl -L https://ghost.org/zip/ghost-latest.zip -o /tmp/ghost.zip\\n# Unzip Ghost zip to /data/ghost\\nRUN unzip -uo /tmp/ghost.zip -d /data/ghost\\n# Add custom config js to /data/ghost\\nADD ./config.example.js /data/ghost/config.js\\n# Install Ghost with NPM\\nRUN cd /data/ghost/ && npm install --production\\n# Expose port 2368\\nEXPOSE 2368\\n# Run Ghost\\nCMD [\\\"npm\\\",\\\"start\\\"]\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\\n<!ATTLIST title\\n  xmlns CDATA #FIXED  \\\"http://docbook.org/ns/docbook\\\"\\n  role  CDATA #IMPLIED\\n  %db.common.attributes;\\n  %db.common.linking.attributes;\\n>\\n\\n<!--\\n  Try: http://docbook.org/xml/5.0/dtd/docbook.dtd\\n-->\\n\\n<!DOCTYPE xsl:stylesheet\\n  [\\n    <!ENTITY nbsp   \\\"&#160;\\\">\\n    <!ENTITY copy   \\\"&#169;\\\">\\n    <!ENTITY reg    \\\"&#174;\\\">\\n    <!ENTITY trade  \\\"&#8482;\\\">\\n    <!ENTITY mdash  \\\"&#8212;\\\">\\n    <!ENTITY ldquo  \\\"&#8220;\\\">\\n    <!ENTITY rdquo  \\\"&#8221;\\\">\\n    <!ENTITY pound  \\\"&#163;\\\">\\n    <!ENTITY yen    \\\"&#165;\\\">\\n    <!ENTITY euro   \\\"&#8364;\\\">\\n    <!ENTITY mathml \\\"http://www.w3.org/1998/Math/MathML\\\">\\n  ]\\n>\\n\\n<!ELEMENT title (#PCDATA|inlinemediaobject|remark|superscript|subscript|xref|link|olink|anchor|biblioref|alt|annotation|indexterm|abbrev|acronym|date|emphasis|footnote|footnoteref|foreignphrase|phrase|quote|wordasword|firstterm|glossterm|coref|trademark|productnumber|productname|database|application|hardware|citation|citerefentry|citetitle|citebiblioid|author|person|personname|org|orgname|editor|jobtitle|replaceable|package|parameter|termdef|nonterminal|systemitem|option|optional|property|inlineequation|tag|markup|token|symbol|literal|code|constant|email|uri|guiicon|guibutton|guimenuitem|guimenu|guisubmenu|guilabel|menuchoice|mousebutton|keycombo|keycap|keycode|keysym|shortcut|accel|prompt|envar|filename|command|computeroutput|userinput|function|varname|returnvalue|type|classname|exceptionname|interfacename|methodname|modifier|initializer|ooclass|ooexception|oointerface|errorcode|errortext|errorname|errortype)*>\\n\\n<!ENTITY % db.common.attributes \\\"\\n  xml:id  ID #IMPLIED\\n  version CDATA #IMPLIED\\n  xml:lang CDATA #IMPLIED\\n  xml:base CDATA #IMPLIED\\n  remap CDATA #IMPLIED\\n  xreflabel CDATA #IMPLIED\\n  revisionflag (changed|added|deleted|off) #IMPLIED\\n  dir (ltr|rtl|lro|rlo) #IMPLIED\\n  arch CDATA #IMPLIED\\n  audience CDATA #IMPLIED\\n  condition CDATA #IMPLIED\\n  conformance CDATA #IMPLIED\\n  os CDATA #IMPLIED\\n  revision CDATA #IMPLIED\\n  security CDATA #IMPLIED\\n  userlevel CDATA #IMPLIED\\n  vendor CDATA #IMPLIED\\n  wordsize CDATA #IMPLIED\\n  annotations CDATA #IMPLIED\\n\\\">\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"Module:       locators-internals\\nSynopsis:     Abstract modeling of locations\\nAuthor:       Andy Armstrong\\nCopyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.\\n              All rights reserved.\\nLicense:      See License.txt in this distribution for details.\\nWarranty:     Distributed WITHOUT WARRANTY OF ANY KIND\\n\\ndefine open generic locator-server\\n    (locator :: <locator>) => (server :: false-or(<server-locator>));\\ndefine open generic locator-host\\n    (locator :: <locator>) => (host :: false-or(<string>));\\ndefine open generic locator-volume\\n    (locator :: <locator>) => (volume :: false-or(<string>));\\ndefine open generic locator-directory\\n    (locator :: <locator>) => (directory :: false-or(<directory-locator>));\\ndefine open generic locator-relative?\\n    (locator :: <locator>) => (relative? :: <boolean>);\\ndefine open generic locator-path\\n    (locator :: <locator>) => (path :: <sequence>);\\ndefine open generic locator-base\\n    (locator :: <locator>) => (base :: false-or(<string>));\\ndefine open generic locator-extension\\n    (locator :: <locator>) => (extension :: false-or(<string>));\\n\\n/// Locator classes\\n\\ndefine open abstract class <directory-locator> (<physical-locator>)\\nend class <directory-locator>;\\n\\ndefine open abstract class <file-locator> (<physical-locator>)\\nend class <file-locator>;\\n\\ndefine method as\\n    (class == <directory-locator>, string :: <string>)\\n => (locator :: <directory-locator>)\\n  as(<native-directory-locator>, string)\\nend method as;\\n\\ndefine method make\\n    (class == <directory-locator>,\\n     #key server :: false-or(<server-locator>) = #f,\\n          path :: <sequence> = #[],\\n          relative? :: <boolean> = #f,\\n          name :: false-or(<string>) = #f)\\n => (locator :: <directory-locator>)\\n  make(<native-directory-locator>,\\n       server:    server,\\n       path:      path,\\n       relative?: relative?,\\n       name:      name)\\nend method make;\\n\\ndefine method as\\n    (class == <file-locator>, string :: <string>)\\n => (locator :: <file-locator>)\\n  as(<native-file-locator>, string)\\nend method as;\\n\\ndefine method make\\n    (class == <file-locator>,\\n     #key directory :: false-or(<directory-locator>) = #f,\\n          base :: false-or(<string>) = #f,\\n          extension :: false-or(<string>) = #f,\\n          name :: false-or(<string>) = #f)\\n => (locator :: <file-locator>)\\n  make(<native-file-locator>,\\n       directory: directory,\\n       base:      base,\\n       extension: extension,\\n       name:      name)\\nend method make;\\n\\n/// Locator coercion\\n\\n//---*** andrewa: This caching scheme doesn't work yet, so disable it.\\ndefine constant $cache-locators?        = #f;\\ndefine constant $cache-locator-strings? = #f;\\n\\ndefine constant $locator-to-string-cache = make(<object-table>, weak: #\\\"key\\\");\\ndefine constant $string-to-locator-cache = make(<string-table>, weak: #\\\"value\\\");\\n\\ndefine open generic locator-as-string\\n    (class :: subclass(<string>), locator :: <locator>)\\n => (string :: <string>);\\n\\ndefine open generic string-as-locator\\n    (class :: subclass(<locator>), string :: <string>)\\n => (locator :: <locator>);\\n\\ndefine sealed sideways method as\\n    (class :: subclass(<string>), locator :: <locator>)\\n => (string :: <string>)\\n  let string = element($locator-to-string-cache, locator, default: #f);\\n  if (string)\\n    as(class, string)\\n  else\\n    let string = locator-as-string(class, locator);\\n    if ($cache-locator-strings?)\\n      element($locator-to-string-cache, locator) := string;\\n    else\\n      string\\n    end\\n  end\\nend method as;\\n\\ndefine sealed sideways method as\\n    (class :: subclass(<locator>), string :: <string>)\\n => (locator :: <locator>)\\n  let locator = element($string-to-locator-cache, string, default: #f);\\n  if (instance?(locator, class))\\n    locator\\n  else\\n    let locator = string-as-locator(class, string);\\n    if ($cache-locators?)\\n      element($string-to-locator-cache, string) := locator;\\n    else\\n      locator\\n    end\\n  end\\nend method as;\\n\\n/// Locator conditions\\n\\ndefine class <locator-error> (<format-string-condition>, <error>)\\nend class <locator-error>;\\n\\ndefine function locator-error\\n    (format-string :: <string>, #rest format-arguments)\\n  error(make(<locator-error>, \\n             format-string:    format-string,\\n             format-arguments: format-arguments))\\nend function locator-error;\\n\\n/// Useful locator protocols\\n\\ndefine open generic locator-test\\n    (locator :: <directory-locator>) => (test :: <function>);\\n\\ndefine method locator-test\\n    (locator :: <directory-locator>) => (test :: <function>)\\n  \\\\=\\nend method locator-test;\\n\\ndefine open generic locator-might-have-links?\\n    (locator :: <directory-locator>) => (links? :: <boolean>);\\n\\ndefine method locator-might-have-links?\\n    (locator :: <directory-locator>) => (links? :: singleton(#f))\\n  #f\\nend method locator-might-have-links?;\\n\\ndefine method locator-relative?\\n    (locator :: <file-locator>) => (relative? :: <boolean>)\\n  let directory = locator.locator-directory;\\n  ~directory | directory.locator-relative?\\nend method locator-relative?;\\n\\ndefine method current-directory-locator?\\n    (locator :: <directory-locator>) => (current-directory? :: <boolean>)\\n  locator.locator-relative?\\n    & locator.locator-path = #[#\\\"self\\\"]\\nend method current-directory-locator?;\\n\\ndefine method locator-directory\\n    (locator :: <directory-locator>) => (parent :: false-or(<directory-locator>))\\n  let path = locator.locator-path;\\n  unless (empty?(path))\\n    make(object-class(locator),\\n         server:    locator.locator-server,\\n         path:      copy-sequence(path, end: path.size - 1),\\n         relative?: locator.locator-relative?)\\n  end\\nend method locator-directory;\\n\\n/// Simplify locator\\n\\ndefine open generic simplify-locator\\n    (locator :: <physical-locator>)\\n => (simplified-locator :: <physical-locator>);\\n\\ndefine method simplify-locator\\n    (locator :: <directory-locator>)\\n => (simplified-locator :: <directory-locator>)\\n  let path = locator.locator-path;\\n  let relative? = locator.locator-relative?;\\n  let resolve-parent? = ~locator.locator-might-have-links?;\\n  let simplified-path\\n    = simplify-path(path, \\n                    resolve-parent?: resolve-parent?,\\n                    relative?: relative?);\\n  if (path ~= simplified-path)\\n    make(object-class(locator),\\n         server:    locator.locator-server,\\n         path:      simplified-path,\\n         relative?: locator.locator-relative?)\\n  else\\n    locator\\n  end\\nend method simplify-locator;\\n\\ndefine method simplify-locator\\n    (locator :: <file-locator>) => (simplified-locator :: <file-locator>)\\n  let directory = locator.locator-directory;\\n  let simplified-directory = directory & simplify-locator(directory);\\n  if (directory ~= simplified-directory)\\n    make(object-class(locator),\\n         directory: simplified-directory,\\n         base:      locator.locator-base,\\n         extension: locator.locator-extension)\\n  else\\n    locator\\n  end\\nend method simplify-locator;\\n\\n/// Subdirectory locator\\n\\ndefine open generic subdirectory-locator\\n    (locator :: <directory-locator>, #rest sub-path)\\n => (subdirectory :: <directory-locator>);\\n\\ndefine method subdirectory-locator\\n    (locator :: <directory-locator>, #rest sub-path)\\n => (subdirectory :: <directory-locator>)\\n  let old-path = locator.locator-path;\\n  let new-path = concatenate-as(<simple-object-vector>, old-path, sub-path);\\n  make(object-class(locator),\\n       server:    locator.locator-server,\\n       path:      new-path,\\n       relative?: locator.locator-relative?)\\nend method subdirectory-locator;\\n\\n/// Relative locator\\n\\ndefine open generic relative-locator\\n    (locator :: <physical-locator>, from-locator :: <physical-locator>)\\n => (relative-locator :: <physical-locator>);\\n\\ndefine method relative-locator\\n    (locator :: <directory-locator>, from-locator :: <directory-locator>)\\n => (relative-locator :: <directory-locator>)\\n  let path = locator.locator-path;\\n  let from-path = from-locator.locator-path;\\n  case\\n    ~locator.locator-relative? & from-locator.locator-relative? =>\\n      locator-error\\n        (\\\"Cannot find relative path of absolute locator %= from relative locator %=\\\",\\n         locator, from-locator);\\n    locator.locator-server ~= from-locator.locator-server =>\\n      locator;\\n    path = from-path =>\\n      make(object-class(locator),\\n           path: vector(#\\\"self\\\"),\\n           relative?: #t);\\n    otherwise =>\\n      make(object-class(locator),\\n           path: relative-path(path, from-path, test: locator.locator-test),\\n           relative?: #t);\\n  end\\nend method relative-locator;\\n\\ndefine method relative-locator\\n    (locator :: <file-locator>, from-directory :: <directory-locator>)\\n => (relative-locator :: <file-locator>)\\n  let directory = locator.locator-directory;\\n  let relative-directory = directory & relative-locator(directory, from-directory);\\n  if (relative-directory ~= directory)\\n    simplify-locator\\n      (make(object-class(locator),\\n            directory: relative-directory,\\n            base:      locator.locator-base,\\n            extension: locator.locator-extension))\\n  else\\n    locator\\n  end\\nend method relative-locator;\\n\\ndefine method relative-locator\\n    (locator :: <physical-locator>, from-locator :: <file-locator>)\\n => (relative-locator :: <physical-locator>)\\n  let from-directory = from-locator.locator-directory;\\n  case\\n    from-directory =>\\n      relative-locator(locator, from-directory);\\n    ~locator.locator-relative? =>\\n      locator-error\\n        (\\\"Cannot find relative path of absolute locator %= from relative locator %=\\\",\\n         locator, from-locator);\\n    otherwise =>\\n      locator;\\n  end\\nend method relative-locator;\\n\\n/// Merge locators\\n\\ndefine open generic merge-locators\\n    (locator :: <physical-locator>, from-locator :: <physical-locator>)\\n => (merged-locator :: <physical-locator>);\\n\\n/// Merge locators\\n\\ndefine method merge-locators\\n    (locator :: <directory-locator>, from-locator :: <directory-locator>)\\n => (merged-locator :: <directory-locator>)\\n  if (locator.locator-relative?)\\n    let path = concatenate(from-locator.locator-path, locator.locator-path);\\n    simplify-locator\\n      (make(object-class(locator),\\n            server:    from-locator.locator-server,\\n            path:      path,\\n            relative?: from-locator.locator-relative?))\\n  else\\n    locator\\n  end\\nend method merge-locators;\\n\\ndefine method merge-locators\\n    (locator :: <file-locator>, from-locator :: <directory-locator>)\\n => (merged-locator :: <file-locator>)\\n  let directory = locator.locator-directory;\\n  let merged-directory \\n    = if (directory)\\n        merge-locators(directory, from-locator)\\n      else\\n        simplify-locator(from-locator)\\n      end;\\n  if (merged-directory ~= directory)\\n    make(object-class(locator),\\n         directory: merged-directory,\\n         base:      locator.locator-base,\\n         extension: locator.locator-extension)\\n  else\\n    locator\\n  end\\nend method merge-locators;\\n\\ndefine method merge-locators\\n    (locator :: <physical-locator>, from-locator :: <file-locator>)\\n => (merged-locator :: <physical-locator>)\\n  let from-directory = from-locator.locator-directory;\\n  if (from-directory)\\n    merge-locators(locator, from-directory)\\n  else\\n    locator\\n  end\\nend method merge-locators;\\n\\n/// Locator protocols\\n\\ndefine sideways method supports-open-locator?\\n    (locator :: <file-locator>) => (openable? :: <boolean>)\\n  ~locator.locator-relative?\\nend method supports-open-locator?;\\n\\ndefine sideways method open-locator\\n    (locator :: <file-locator>, #rest keywords, #key, #all-keys)\\n => (stream :: <stream>)\\n  apply(open-file-stream, locator, keywords)\\nend method open-locator;\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/*\\nsample useless code to demonstrate ecl syntax highlighting\\nthis is a multiline comment!\\n*/\\n\\n//  this is a singleline comment!\\n\\nimport ut;\\nr := \\n  record\\n   string22 s1 := '123';\\n   integer4 i1 := 123;\\n  end;\\n#option('tmp', true);\\nd := dataset('tmp::qb', r, thor);\\noutput(d);\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"note\\n    description: \\\"[\\n        Project-wide universal properties.\\n        This class is an ancestor to all developer-written classes.\\n        ANY may be customized for individual projects or teams.\\n        ]\\\"\\n\\n    library: \\\"Free implementation of ELKS library\\\"\\n    status: \\\"See notice at end of class.\\\"\\n    legal: \\\"See notice at end of class.\\\"\\n    date: \\\"$Date: 2013-01-25 11:49:00 -0800 (Fri, 25 Jan 2013) $\\\"\\n    revision: \\\"$Revision: 712 $\\\"\\n\\nclass\\n    ANY\\n\\nfeature -- Customization\\n\\nfeature -- Access\\n\\n    generator: STRING\\n            -- Name of current object's generating class\\n            -- (base class of the type of which it is a direct instance)\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            generator_not_void: Result /= Void\\n            generator_not_empty: not Result.is_empty\\n        end\\n\\n    generating_type: TYPE [detachable like Current]\\n            -- Type of current object\\n            -- (type of which it is a direct instance)\\n        do\\n            Result := {detachable like Current}\\n        ensure\\n            generating_type_not_void: Result /= Void\\n        end\\n\\nfeature -- Status report\\n\\n    conforms_to (other: ANY): BOOLEAN\\n            -- Does type of current object conform to type\\n            -- of `other' (as per Eiffel: The Language, chapter 13)?\\n        require\\n            other_not_void: other /= Void\\n        external\\n            \\\"built_in\\\"\\n        end\\n\\n    same_type (other: ANY): BOOLEAN\\n            -- Is type of current object identical to type of `other'?\\n        require\\n            other_not_void: other /= Void\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            definition: Result = (conforms_to (other) and\\n                                        other.conforms_to (Current))\\n        end\\n\\nfeature -- Comparison\\n\\n    is_equal (other: like Current): BOOLEAN\\n            -- Is `other' attached to an object considered\\n            -- equal to current object?\\n        require\\n            other_not_void: other /= Void\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            symmetric: Result implies other ~ Current\\n            consistent: standard_is_equal (other) implies Result\\n        end\\n\\n    frozen standard_is_equal (other: like Current): BOOLEAN\\n            -- Is `other' attached to an object of the same type\\n            -- as current object, and field-by-field identical to it?\\n        require\\n            other_not_void: other /= Void\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            same_type: Result implies same_type (other)\\n            symmetric: Result implies other.standard_is_equal (Current)\\n        end\\n\\n    frozen equal (a: detachable ANY; b: like a): BOOLEAN\\n            -- Are `a' and `b' either both void or attached\\n            -- to objects considered equal?\\n        do\\n            if a = Void then\\n                Result := b = Void\\n            else\\n                Result := b /= Void and then\\n                            a.is_equal (b)\\n            end\\n        ensure\\n            definition: Result = (a = Void and b = Void) or else\\n                        ((a /= Void and b /= Void) and then\\n                        a.is_equal (b))\\n        end\\n\\n    frozen standard_equal (a: detachable ANY; b: like a): BOOLEAN\\n            -- Are `a' and `b' either both void or attached to\\n            -- field-by-field identical objects of the same type?\\n            -- Always uses default object comparison criterion.\\n        do\\n            if a = Void then\\n                Result := b = Void\\n            else\\n                Result := b /= Void and then\\n                            a.standard_is_equal (b)\\n            end\\n        ensure\\n            definition: Result = (a = Void and b = Void) or else\\n                        ((a /= Void and b /= Void) and then\\n                        a.standard_is_equal (b))\\n        end\\n\\n    frozen is_deep_equal (other: like Current): BOOLEAN\\n            -- Are `Current' and `other' attached to isomorphic object structures?\\n        require\\n            other_not_void: other /= Void\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            shallow_implies_deep: standard_is_equal (other) implies Result\\n            same_type: Result implies same_type (other)\\n            symmetric: Result implies other.is_deep_equal (Current)\\n        end\\n\\n    frozen deep_equal (a: detachable ANY; b: like a): BOOLEAN\\n            -- Are `a' and `b' either both void\\n            -- or attached to isomorphic object structures?\\n        do\\n            if a = Void then\\n                Result := b = Void\\n            else\\n                Result := b /= Void and then a.is_deep_equal (b)\\n            end\\n        ensure\\n            shallow_implies_deep: standard_equal (a, b) implies Result\\n            both_or_none_void: (a = Void) implies (Result = (b = Void))\\n            same_type: (Result and (a /= Void)) implies (b /= Void and then a.same_type (b))\\n            symmetric: Result implies deep_equal (b, a)\\n        end\\n\\nfeature -- Duplication\\n\\n    frozen twin: like Current\\n            -- New object equal to `Current'\\n            -- `twin' calls `copy'; to change copying/twinning semantics, redefine `copy'.\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            twin_not_void: Result /= Void\\n            is_equal: Result ~ Current\\n        end\\n\\n    copy (other: like Current)\\n            -- Update current object using fields of object attached\\n            -- to `other', so as to yield equal objects.\\n        require\\n            other_not_void: other /= Void\\n            type_identity: same_type (other)\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            is_equal: Current ~ other\\n        end\\n\\n    frozen standard_copy (other: like Current)\\n            -- Copy every field of `other' onto corresponding field\\n            -- of current object.\\n        require\\n            other_not_void: other /= Void\\n            type_identity: same_type (other)\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            is_standard_equal: standard_is_equal (other)\\n        end\\n\\n    frozen clone (other: detachable ANY): like other\\n            -- Void if `other' is void; otherwise new object\\n            -- equal to `other'\\n            --\\n            -- For non-void `other', `clone' calls `copy';\\n            -- to change copying/cloning semantics, redefine `copy'.\\n        obsolete\\n            \\\"Use `twin' instead.\\\"\\n        do\\n            if other /= Void then\\n                Result := other.twin\\n            end\\n        ensure\\n            equal: Result ~ other\\n        end\\n\\n    frozen standard_clone (other: detachable ANY): like other\\n            -- Void if `other' is void; otherwise new object\\n            -- field-by-field identical to `other'.\\n            -- Always uses default copying semantics.\\n        obsolete\\n            \\\"Use `standard_twin' instead.\\\"\\n        do\\n            if other /= Void then\\n                Result := other.standard_twin\\n            end\\n        ensure\\n            equal: standard_equal (Result, other)\\n        end\\n\\n    frozen standard_twin: like Current\\n            -- New object field-by-field identical to `other'.\\n            -- Always uses default copying semantics.\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            standard_twin_not_void: Result /= Void\\n            equal: standard_equal (Result, Current)\\n        end\\n\\n    frozen deep_twin: like Current\\n            -- New object structure recursively duplicated from Current.\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            deep_twin_not_void: Result /= Void\\n            deep_equal: deep_equal (Current, Result)\\n        end\\n\\n    frozen deep_clone (other: detachable ANY): like other\\n            -- Void if `other' is void: otherwise, new object structure\\n            -- recursively duplicated from the one attached to `other'\\n        obsolete\\n            \\\"Use `deep_twin' instead.\\\"\\n        do\\n            if other /= Void then\\n                Result := other.deep_twin\\n            end\\n        ensure\\n            deep_equal: deep_equal (other, Result)\\n        end\\n\\n    frozen deep_copy (other: like Current)\\n            -- Effect equivalent to that of:\\n            --      `copy' (`other' . `deep_twin')\\n        require\\n            other_not_void: other /= Void\\n        do\\n            copy (other.deep_twin)\\n        ensure\\n            deep_equal: deep_equal (Current, other)\\n        end\\n\\nfeature {NONE} -- Retrieval\\n\\n    frozen internal_correct_mismatch\\n            -- Called from runtime to perform a proper dynamic dispatch on `correct_mismatch'\\n            -- from MISMATCH_CORRECTOR.\\n        local\\n            l_msg: STRING\\n            l_exc: EXCEPTIONS\\n        do\\n            if attached {MISMATCH_CORRECTOR} Current as l_corrector then\\n                l_corrector.correct_mismatch\\n            else\\n                create l_msg.make_from_string (\\\"Mismatch: \\\")\\n                create l_exc\\n                l_msg.append (generating_type.name)\\n                l_exc.raise_retrieval_exception (l_msg)\\n            end\\n        end\\n\\nfeature -- Output\\n\\n    io: STD_FILES\\n            -- Handle to standard file setup\\n        once\\n            create Result\\n            Result.set_output_default\\n        ensure\\n            io_not_void: Result /= Void\\n        end\\n\\n    out: STRING\\n            -- New string containing terse printable representation\\n            -- of current object\\n        do\\n            Result := tagged_out\\n        ensure\\n            out_not_void: Result /= Void\\n        end\\n\\n    frozen tagged_out: STRING\\n            -- New string containing terse printable representation\\n            -- of current object\\n        external\\n            \\\"built_in\\\"\\n        ensure\\n            tagged_out_not_void: Result /= Void\\n        end\\n\\n    print (o: detachable ANY)\\n            -- Write terse external representation of `o'\\n            -- on standard output.\\n        do\\n            if o /= Void then\\n                io.put_string (o.out)\\n            end\\n        end\\n\\nfeature -- Platform\\n\\n    Operating_environment: OPERATING_ENVIRONMENT\\n            -- Objects available from the operating system\\n        once\\n            create Result\\n        ensure\\n            operating_environment_not_void: Result /= Void\\n        end\\n\\nfeature {NONE} -- Initialization\\n\\n    default_create\\n            -- Process instances of classes with no creation clause.\\n            -- (Default: do nothing.)\\n        do\\n        end\\n\\nfeature -- Basic operations\\n\\n    default_rescue\\n            -- Process exception for routines with no Rescue clause.\\n            -- (Default: do nothing.)\\n        do\\n        end\\n\\n    frozen do_nothing\\n            -- Execute a null action.\\n        do\\n        end\\n\\n    frozen default: detachable like Current\\n            -- Default value of object's type\\n        do\\n        end\\n\\n    frozen default_pointer: POINTER\\n            -- Default value of type `POINTER'\\n            -- (Avoid the need to write `p'.`default' for\\n            -- some `p' of type `POINTER'.)\\n        do\\n        ensure\\n            -- Result = Result.default\\n        end\\n\\n    frozen as_attached: attached like Current\\n            -- Attached version of Current\\n            -- (Can be used during transitional period to convert\\n            -- non-void-safe classes to void-safe ones.)\\n        do\\n            Result := Current\\n        end\\n\\ninvariant\\n    reflexive_equality: standard_is_equal (Current)\\n    reflexive_conformance: conforms_to (Current)\\n\\nnote\\n    copyright: \\\"Copyright (c) 1984-2012, Eiffel Software and others\\\"\\n    license:   \\\"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\\\"\\n    source: \\\"[\\n            Eiffel Software\\n            5949 Hollister Ave., Goleta, CA 93117 USA\\n            Telephone 805-685-1006, Fax 805-685-6869\\n            Website http://www.eiffel.com\\n            Customer support http://support.eiffel.com\\n        ]\\\"\\n\\nend\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"import Color exposing (..)\\nimport Graphics.Collage exposing (..)\\nimport Graphics.Element exposing (..)\\nimport Time exposing (..)\\n\\nmain =\\n  Signal.map clock (every second)\\n\\nclock t =\\n  collage 400 400\\n    [ filled    lightGrey   (ngon 12 110)\\n    , outlined (solid grey) (ngon 12 110)\\n    , hand orange   100  t\\n    , hand charcoal 100 (t/60)\\n    , hand charcoal 60  (t/720)\\n    ]\\n\\nhand clr len time =\\n  let angle = degrees (90 - 6 * inSeconds time)\\n  in\\n      segment (0,0) (fromPolar (len,angle))\\n        |> traced (solid clr)\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"%% -*- mode: erlang; erlang-indent-level: 2 -*-\\n%%% Created :  7 May 2012 by mats cronqvist <masse@klarna.com>\\n\\n%% @doc\\n%% Demonstrates how to print a record.\\n%% @end\\n\\n-module('ex').\\n-author('mats cronqvist').\\n-export([demo/0,\\n         rec_info/1]).\\n\\n-record(demo,{a=\\\"One\\\",b=\\\"Two\\\",c=\\\"Three\\\",d=\\\"Four\\\"}).\\n\\nrec_info(demo) -> record_info(fields,demo).\\n\\ndemo() -> expand_recs(?MODULE,#demo{a=\\\"A\\\",b=\\\"BB\\\"}).\\n\\nexpand_recs(M,List) when is_list(List) ->\\n  [expand_recs(M,L)||L<-List];\\nexpand_recs(M,Tup) when is_tuple(Tup) ->\\n  case tuple_size(Tup) of\\n    L when L < 1 -> Tup;\\n    L ->\\n      try\\n        Fields = M:rec_info(element(1,Tup)),\\n        L = length(Fields)+1,\\n        lists:zip(Fields,expand_recs(M,tl(tuple_to_list(Tup))))\\n      catch\\n        _:_ -> list_to_tuple(expand_recs(M,tuple_to_list(Tup)))\\n      end\\n  end;\\nexpand_recs(_,Term) ->\\n  Term.\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"! Copyright (C) 2008 Slava Pestov.\\n! See http://factorcode.org/license.txt for BSD license.\\n\\n! A simple time server\\n\\nUSING: accessors calendar calendar.format io io.encodings.ascii\\nio.servers kernel threads ;\\nIN: time-server\\n\\n: handle-time-client ( -- )\\n    now timestamp>rfc822 print ;\\n\\n: <time-server> ( -- threaded-server )\\n    ascii <threaded-server>\\n        \\\"time-server\\\" >>name\\n        1234 >>insecure\\n        [ handle-time-client ] >>handler ;\\n\\n: start-time-server ( -- )\\n    <time-server> start-server drop ;\\n\\nMAIN: start-time-server\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"  FUNCTION_BLOCK Fuzzy_FB\\n      VAR_INPUT\\n          TimeDay : REAL; (* RANGE(0 .. 23) *)\\n          ApplicateHost: REAL;\\n          TimeConfiguration: REAL;\\n          TimeRequirements: REAL;\\n      END_VAR\\n\\n      VAR_OUTPUT\\n          ProbabilityDistribution: REAL;\\n          ProbabilityAccess: REAL;\\n      END_VAR\\n\\n      FUZZIFY TimeDay\\n          TERM inside := (0, 0) (8, 1) (22,0);\\n          TERM outside := (0, 1) (8, 0) (22, 1);\\n      END_FUZZIFY\\n\\n      FUZZIFY ApplicateHost\\n          TERM few := (0, 1) (100, 0) (200, 0);\\n          TERM many := (0, 0) (100, 0) (200, 1);\\n      END_FUZZIFY\\n\\n      FUZZIFY TimeConfiguration\\n          TERM recently := (0, 1) (30, 1) (120, 0);\\n          TERM long := (0, 0) (30, 0) (120, 1);\\n      END_FUZZIFY\\n\\n      FUZZIFY TimeRequirements\\n          TERM recently := (0, 1) (30, 1) (365, 0);\\n          TERM long := (0, 0) (30, 0) (365, 1);\\n      END_FUZZIFY\\n\\n      DEFUZZIFY ProbabilityAccess\\n          TERM hight := 1;\\n          TERM medium := 0.5;\\n          TERM low := 0;\\n          ACCU: MAX;\\n          METHOD: COGS;\\n          DEFAULT := 0;\\n      END_DEFUZZIFY\\n\\n      DEFUZZIFY ProbabilityDistribution\\n          TERM hight := 1;\\n          TERM medium := 0.5;\\n          TERM low := 0;\\n          ACCU: MAX;\\n          METHOD: COGS;\\n          DEFAULT := 0;\\n      END_DEFUZZIFY\\n\\n      RULEBLOCK No1\\n          AND : MIN;\\n          RULE 1 : IF TimeDay IS outside AND ApplicateHost IS few THEN ProbabilityAccess IS hight;\\n          RULE 2 : IF ApplicateHost IS many THEN ProbabilityAccess IS hight;\\n          RULE 3 : IF TimeDay IS inside AND ApplicateHost IS few THEN ProbabilityAccess IS low;\\n      END_RULEBLOCK\\n\\n      RULEBLOCK No2\\n          AND : MIN;\\n          RULE 1 : IF ApplicateHost IS many THEN ProbabilityDistribution IS hight;\\n      END_RULEBLOCK\\n\\n  END_FUNCTION_BLOCK\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"\\\\ Insertion sort\\n\\n: cell-  1 cells - ;\\n\\n: insert ( start end -- start )\\n  dup @ >r ( r: v )\\n  begin\\n    2dup <\\n  while\\n    r@ over cell- @ <\\n  while\\n    cell-\\n    dup @ over cell+ !\\n  repeat then\\n  r> swap ! ;\\n\\n: sort ( array len -- )\\n  1 ?do\\n    dup i cells + insert\\n  loop drop ;\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"! Example Fortran code\\n  program average\\n\\n  ! Read in some numbers and take the average\\n  ! As written, if there are no data points, an average of zero is returned\\n  ! While this may not be desired behavior, it keeps this example simple\\n\\n  implicit none\\n\\n  real, dimension(:), allocatable :: points\\n  integer                         :: number_of_points\\n  real                            :: average_points=0., positive_average=0., negative_average=0.\\n\\n  write (*,*) \\\"Input number of points to average:\\\"\\n  read  (*,*) number_of_points\\n\\n  allocate (points(number_of_points))\\n\\n  write (*,*) \\\"Enter the points to average:\\\"\\n  read  (*,*) points\\n\\n  ! Take the average by summing points and dividing by number_of_points\\n  if (number_of_points > 0) average_points = sum(points) / number_of_points\\n\\n  ! Now form average over positive and negative points only\\n  if (count(points > 0.) > 0) then\\n     positive_average = sum(points, points > 0.) / count(points > 0.)\\n  end if\\n\\n  if (count(points < 0.) > 0) then\\n     negative_average = sum(points, points < 0.) / count(points < 0.)\\n  end if\\n\\n  deallocate (points)\\n\\n  ! Print result to terminal\\n  write (*,'(a,g12.4)') 'Average = ', average_points\\n  write (*,'(a,g12.4)') 'Average of positive points = ', positive_average\\n  write (*,'(a,g12.4)') 'Average of negative points = ', negative_average\\n\\n  end program average\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \".syntax unified\\n.global main\\n\\n/* \\n *  A\\n *  multi-line\\n *  comment.\\n */\\n\\n@ A single line comment.\\n\\nmain:\\n        push    {sp, lr}\\n        ldr     r0, =message\\n        bl      puts\\n        mov     r0, #0\\n        pop     {sp, pc}\\n\\nmessage:\\n        .asciz \\\"Hello world!<br />\\\"\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"Feature: Using Google\\n  Background: \\n    Something something\\n    Something else\\n  Scenario: Has a homepage\\n    When I navigate to the google home page\\n    Then the home page should contain the menu and the search form\\n  Scenario: Searching for a term \\n    When I navigate to the google home page\\n    When I search for Tofu\\n    Then the search results page is displayed\\n    Then the search results page contains 10 individual search results\\n    Then the search results contain a link to the wikipedia tofu page\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// Prime Sieve in Go.\\n// Taken from the Go specification.\\n// Copyright \\xA9 The Go Authors.\\n\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\n// Send the sequence 2, 3, 4, ... to channel 'ch'.\\nfunc generate(ch chan<- int) {\\n  for i := 2; ; i++ {\\n    ch <- i  // Send 'i' to channel 'ch'\\n  }\\n}\\n\\n// Copy the values from channel 'src' to channel 'dst',\\n// removing those divisible by 'prime'.\\nfunc filter(src <-chan int, dst chan<- int, prime int) {\\n  for i := range src {    // Loop over values received from 'src'.\\n    if i%prime != 0 {\\n      dst <- i  // Send 'i' to channel 'dst'.\\n    }\\n  }\\n}\\n\\n// The prime sieve: Daisy-chain filter processes together.\\nfunc sieve() {\\n  ch := make(chan int)  // Create a new channel.\\n  go generate(ch)       // Start generate() as a subprocess.\\n  for {\\n    prime := <-ch\\n    fmt.Print(prime, \\\"\\\\n\\\")\\n    ch1 := make(chan int)\\n    go filter(ch, ch1, prime)\\n    ch = ch1\\n  }\\n}\\n\\nfunc main() {\\n  sieve()\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"//Pattern for groovy script\\ndef p = ~/.*\\\\.groovy/\\nnew File( 'd:\\\\scripts' ).eachFileMatch(p) {f ->\\n  // imports list\\n  def imports = []\\n  f.eachLine {\\n    // condition to detect an import instruction\\n    ln -> if ( ln =~ '^import .*' ) {\\n      imports << \\\"${ln - 'import '}\\\"\\n    }\\n  }\\n  // print thmen\\n  if ( ! imports.empty ) {\\n    println f\\n    imports.each{ println \\\"   $it\\\" }\\n  }\\n}\\n\\n/* Coin changer demo code from http://groovy.codehaus.org */\\n\\nenum UsCoin {\\n  quarter(25), dime(10), nickel(5), penny(1)\\n  UsCoin(v) { value = v }\\n  final value\\n}\\n\\nenum OzzieCoin {\\n  fifty(50), twenty(20), ten(10), five(5)\\n  OzzieCoin(v) { value = v }\\n  final value\\n}\\n\\ndef plural(word, count) {\\n  if (count == 1) return word\\n  word[-1] == 'y' ? word[0..-2] + \\\"ies\\\" : word + \\\"s\\\"\\n}\\n\\ndef change(currency, amount) {\\n  currency.values().inject([]){ list, coin ->\\n     int count = amount / coin.value\\n     amount = amount % coin.value\\n     list += \\\"$count ${plural(coin.toString(), count)}\\\"\\n  }\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"!!!\\n#content\\n.left.column(title=\\\"title\\\"){:href => \\\"/hello\\\", :test => \\\"#{hello}_#{world}\\\"}\\n    <!-- This is a comment -->\\n    %h2 Welcome to our site!\\n    %p= puts \\\"HAML MODE\\\"\\n  .right.column\\n    = render :partial => \\\"sidebar\\\"\\n\\n.container\\n  .row\\n    .span8\\n      %h1.title= @page_title\\n%p.title= @page_title\\n%p\\n  /\\n    The same as HTML comment\\n    Hello multiline comment\\n\\n  -# haml comment\\n      This wont be displayed\\n      nor will this\\n  Date/Time:\\n  - now = DateTime.now\\n  %strong= now\\n  - if now > DateTime.parse(\\\"December 31, 2006\\\")\\n    = \\\"Happy new \\\" + \\\"year!\\\"\\n\\n%title\\n  = @title\\n  \\\\= @title\\n  <h1>Title</h1>\\n  <h1 title=\\\"HELLO\\\">\\n    Title\\n  </h1>\\n    \\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"{{> breadcrumbs}}\\n{{!--\\n  You can use the t function to get\\n  content translated to the current locale, es:\\n  {{t 'article_list'}}\\n--}}\\n\\n<h1>{{t 'article_list'}}</h1>\\n\\n{{! one line comment }}\\n\\n{{#each articles}}\\n  {{~title}}\\n  <p>{{excerpt body size=120 ellipsis=true}}</p>\\n\\n  {{#with author}}\\n    written by {{first_name}} {{last_name}}\\n    from category: {{../category.title}}\\n    {{#if @../last}}foobar!{{/if}}\\n  {{/with~}}\\n\\n  {{#if promoted.latest}}Read this one! {{else}} This is ok! {{/if}}\\n\\n  {{#if @last}}<hr>{{/if}}\\n{{/each}}\\n\\n{{#form new_comment}}\\n  <input type=\\\"text\\\" name=\\\"body\\\">\\n{{/form}}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"module UniquePerms (\\n    uniquePerms\\n    )\\nwhere\\n\\n-- | Find all unique permutations of a list where there might be duplicates.\\nuniquePerms :: (Eq a) => [a] -> [[a]]\\nuniquePerms = permBag . makeBag\\n\\n-- | An unordered collection where duplicate values are allowed,\\n-- but represented with a single value and a count.\\ntype Bag a = [(a, Int)]\\n\\nmakeBag :: (Eq a) => [a] -> Bag a\\nmakeBag [] = []\\nmakeBag (a:as) = mix a $ makeBag as\\n  where\\n    mix a []                        = [(a,1)]\\n    mix a (bn@(b,n):bs) | a == b    = (b,n+1):bs\\n                        | otherwise = bn : mix a bs\\n\\npermBag :: Bag a -> [[a]]\\npermBag [] = [[]]\\npermBag bs = concatMap (\\\\(f,cs) -> map (f:) $ permBag cs) . oneOfEach $ bs\\n  where\\n    oneOfEach [] = []\\n    oneOfEach (an@(a,n):bs) =\\n        let bs' = if n == 1 then bs else (a,n-1):bs\\n        in (a,bs') : mapSnd (an:) (oneOfEach bs)\\n    \\n    apSnd f (a,b) = (a, f b)\\n    mapSnd = map . apSnd\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"module UniquePerms (\\n    uniquePerms\\n    )\\nwhere\\n\\n-- | Find all unique permutations of a list where there might be duplicates.\\nuniquePerms :: (Eq a) => [a] -> [[a]]\\nuniquePerms = permBag . makeBag\\n\\n-- | An unordered collection where duplicate values are allowed,\\n-- but represented with a single value and a count.\\ntype Bag a = [(a, Int)]\\n\\nmakeBag :: (Eq a) => [a] -> Bag a\\nmakeBag [] = []\\nmakeBag (a:as) = mix a $ makeBag as\\n  where\\n    mix a []                        = [(a,1)]\\n    mix a (bn@(b,n):bs) | a == b    = (b,n+1):bs\\n                        | otherwise = bn : mix a bs\\n\\npermBag :: Bag a -> [[a]]\\npermBag [] = [[]]\\npermBag bs = concatMap (\\\\(f,cs) -> map (f:) $ permBag cs) . oneOfEach $ bs\\n  where\\n    oneOfEach [] = []\\n    oneOfEach (an@(a,n):bs) =\\n        let bs' = if n == 1 then bs else (a,n-1):bs\\n        in (a,bs') : mapSnd (an:) (oneOfEach bs)\\n    \\n    apSnd f (a,b) = (a, f b)\\n    mapSnd = map . apSnd\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"import one.two.Three;\\n\\n@attr(\\\"test\\\")\\nclass Foo<T> extends Three\\n{\\n  public function new()\\n  {\\n    noFoo = 12;\\n  }\\n    \\n  public static inline function doFoo(obj:{k:Int, l:Float}):Int\\n  {\\n    for(i in 0...10)\\n    {\\n      obj.k++;\\n      trace(i);\\n      var var1 = new Array();\\n      if(var1.length > 1)\\n        throw \\\"Error\\\";\\n    }\\n    // The following line should not be colored, the variable is scoped out\\n    var1;\\n    /* Multi line\\n     * Comment test\\n     */\\n    return obj.k;\\n  }\\n  private function bar():Void\\n  {\\n    #if flash\\n    var t1:String = \\\"1.21\\\";\\n    #end\\n    try {\\n      doFoo({k:3, l:1.2});\\n    }\\n    catch (e : String) {\\n      trace(e);\\n    }\\n    var t2:Float = cast(3.2);\\n    var t3:haxe.Timer = new haxe.Timer();\\n    var t4 = {k:Std.int(t2), l:Std.parseFloat(t1)};\\n    var t5 = ~/123+.*$/i;\\n    doFoo(t4);\\n    untyped t1 = 4;\\n    bob = new Foo<Int>\\n  }\\n  public var okFoo(default, never):Float;\\n  var noFoo(getFoo, null):Int;\\n  function getFoo():Int {\\n    return noFoo;\\n  }\\n    \\n  public var three:Int;\\n}\\nenum Color\\n{\\n  red;\\n  green;\\n  blue;\\n  grey( v : Int );\\n  rgb (r:Int,g:Int,b:Int);\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<%\\nfunction hello(who) {\\n  return \\\"Hello \\\" + who;\\n}\\n%>\\nThis is an example of EJS (embedded javascript)\\n<p>The program says <%= hello(\\\"world\\\") %>.</p>\\n<script>\\n  alert(\\\"And here is some normal JS code\\\"); // also colored\\n</script>\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<html style=\\\"color: green\\\">\\n  <!-- this is a comment -->\\n  <head>\\n    <title>Mixed HTML Example</title>\\n    <style type=\\\"text/css\\\">\\n      h1 {font-family: comic sans; color: #f0f;}\\n      div {background: yellow !important;}\\n      body {\\n        max-width: 50em;\\n        margin: 1em 2em 1em 5em;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <h1>Mixed HTML Example</h1>\\n    <script>\\n      function jsFunc(arg1, arg2) {\\n        if (arg1 && arg2) document.body.innerHTML = \\\"achoo\\\";\\n      }\\n    </script>\\n  </body>\\n</html>\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"POST /somewhere HTTP/1.1\\nHost: example.com\\nIf-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT\\nContent-Type: application/x-www-form-urlencoded;\\n  charset=utf-8\\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.11 (KHTML, like Gecko) Ubuntu/12.04 Chromium/20.0.1132.47 Chrome/20.0.1132.47 Safari/536.11\\n\\nThis is the request body!\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \";; Example IDL code\\nFUNCTION mean_and_stddev,array\\n  ;; This program reads in an array of numbers\\n  ;; and returns a structure containing the\\n  ;; average and standard deviation\\n\\n  ave = 0.0\\n  count = 0.0\\n\\n  for i=0,N_ELEMENTS(array)-1 do begin\\n      ave = ave + array[i]\\n      count = count + 1\\n  endfor\\n  \\n  ave = ave/count\\n\\n  std = stddev(array)  \\n\\n  return, {average:ave,std:std}\\n\\nEND\\n\\n    \\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"; last modified 1 April 2001 by John Doe\\n[owner]\\nname=John Doe\\norganization=Acme Widgets Inc.\\n\\n[database]\\n; use IP address in case network name resolution is not working\\nserver=192.0.2.62     \\nport=143\\nfile=\\\"payroll.dat\\\"\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"import com.demo.util.MyType;\\nimport com.demo.util.MyInterface;\\n\\npublic enum Enum {\\n  VAL1, VAL2, VAL3\\n}\\n\\npublic class Class<T, V> implements MyInterface {\\n  public static final MyType<T, V> member;\\n  \\n  private class InnerClass {\\n    public int zero() {\\n      return 0;\\n    }\\n  }\\n\\n  @Override\\n  public MyType method() {\\n    return member;\\n  }\\n\\n  public void method2(MyType<T, V> value) {\\n    method();\\n    value.method3();\\n    member = value;\\n  }\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// Demo code (the actual new parser character stream implementation)\\n\\nfunction StringStream(string) {\\n  this.pos = 0;\\n  this.string = string;\\n}\\n\\nStringStream.prototype = {\\n  done: function() {return this.pos >= this.string.length;},\\n  peek: function() {return this.string.charAt(this.pos);},\\n  next: function() {\\n    if (this.pos < this.string.length)\\n      return this.string.charAt(this.pos++);\\n  },\\n  eat: function(match) {\\n    var ch = this.string.charAt(this.pos);\\n    if (typeof match == \\\"string\\\") var ok = ch == match;\\n    else var ok = ch && match.test ? match.test(ch) : match(ch);\\n    if (ok) {this.pos++; return ch;}\\n  },\\n  eatWhile: function(match) {\\n    var start = this.pos;\\n    while (this.eat(match));\\n    if (this.pos > start) return this.string.slice(start, this.pos);\\n  },\\n  backUp: function(n) {this.pos -= n;},\\n  column: function() {return this.pos;},\\n  eatSpace: function() {\\n    var start = this.pos;\\n    while (/\\\\s/.test(this.string.charAt(this.pos))) this.pos++;\\n    return this.pos - start;\\n  },\\n  match: function(pattern, consume, caseInsensitive) {\\n    if (typeof pattern == \\\"string\\\") {\\n      function cased(str) {return caseInsensitive ? str.toLowerCase() : str;}\\n      if (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) {\\n        if (consume !== false) this.pos += str.length;\\n        return true;\\n      }\\n    }\\n    else {\\n      var match = this.string.slice(this.pos).match(pattern);\\n      if (match && consume !== false) this.pos += match[0].length;\\n      return match;\\n    }\\n  }\\n};\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"{# this is a comment #}\\n{%- for item in li -%}\\n  <li>{{ item.label }}</li>\\n{% endfor -%}\\n{{ item.sand == true and item.keyword == false ? 1 : 0 }}\\n{{ app.get(55, 1.2, true) }}\\n{% if app.get('_route') == ('_home') %}home{% endif %}\\n{% if app.session.flashbag.has('message') %}\\n  {% for message in app.session.flashbag.get('message') %}\\n    {{ message.content }}\\n  {% endfor %}\\n{% endif %}\\n{{ path('_home', {'section': app.request.get('section')}) }}\\n{{ path('_home', {\\n    'section': app.request.get('section'),\\n    'boolean': true,\\n    'number': 55.33\\n  })\\n}}\\n{% include ('test.incl.html.twig') %}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"{\\n  \\\"name\\\": \\\"react-monacoeditor\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"Monaco Editor component for React.\\\",\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"release\\\": \\\"babel --plugins transform-runtime src --out-dir lib --copy-files\\\",\\n    \\\"start\\\": \\\"kkt start\\\",\\n    \\\"build\\\": \\\"kkt build\\\"\\n  },\\n  \\\"keywords\\\": [\\n    \\\"react-monacoeditor\\\",\\n    \\\"monacoeditor\\\",\\n    \\\"monaco-editor\\\",\\n    \\\"monaco\\\",\\n    \\\"editor\\\",\\n    \\\"react\\\",\\n    \\\"vscode\\\"\\n  ],\\n  \\\"author\\\": \\\"kenny wong <wowohoo@qq.com>\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"dependencies\\\": {\\n    \\\"monaco-editor\\\": \\\"^0.13.1\\\",\\n    \\\"prop-types\\\": \\\"^15.6.2\\\",\\n    \\\"react\\\": \\\"^16.4.0\\\",\\n    \\\"react-dom\\\": \\\"^16.4.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"classnames\\\": \\\"^2.2.6\\\",\\n    \\\"kkt\\\": \\\"1.9.x\\\",\\n    \\\"monaco-editor-webpack-plugin\\\": \\\"^1.4.0\\\",\\n    \\\"react-markdown\\\": \\\"^3.3.4\\\"\\n  }\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"import React from 'react';\\nimport styles from './index.less';\\n\\nconst Select = ({ value, options, onChange }) => {\\n  return (\\n    <select className={styles.select} value={value} onChange={onChange}>\\n      {options.map((item, key) => {\\n        const optionProps = { key };\\n        if (value === item) {\\n          optionProps.value = item;\\n        }\\n        return (\\n          <option {...optionProps}> {item} </option>\\n        );\\n      })}\\n    </select>\\n  );\\n};\\n\\nexport default Select;\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"#numbers\\n1234\\n1234im\\n.234\\n.234im\\n2.23im\\n2.3f3\\n23e2\\n0x234\\n\\n#strings\\n'a'\\n\\\"asdf\\\"\\nr\\\"regex\\\"\\nb\\\"bytestring\\\"\\n\\n\\\"\\\"\\\"\\nmultiline string\\n\\\"\\\"\\\"\\n\\n#identifiers\\na\\nas123\\nfunction_name!\\n\\n#unicode identifiers\\n# a = x\\\\ddot\\na\\u20D7 = x\\u0308\\n# a = v\\\\dot\\na\\u20D7 = v\\u0307\\n#F\\\\vec = m \\\\cdotp a\\\\vec\\nF\\u20D7 = m\\xB7a\\u20D7\\n\\n#literal identifier multiples\\n3x\\n4[1, 2, 3]\\n\\n#dicts and indexing\\nx=[1, 2, 3]\\nx[end-1]\\nx={\\\"julia\\\"=>\\\"language of technical computing\\\"}\\n\\n\\n#exception handling\\ntry\\n  f()\\ncatch\\n  @printf \\\"Error\\\"\\nfinally\\n  g()\\nend\\n\\n#types\\nimmutable Color{T<:Number}\\n  r::T\\n  g::T\\n  b::T\\nend\\n\\n#functions\\nfunction change!(x::Vector{Float64})\\n  for i = 1:length(x)\\n    x[i] *= 2\\n  end\\nend\\n\\n#function invocation\\nf('b', (2, 3)...)\\n\\n#operators\\n|=\\n&=\\n^=\\n\\\\-\\n%=\\n*=\\n+=\\n-=\\n<=\\n>=\\n!=\\n==\\n%\\n*\\n+\\n-\\n<\\n>\\n!\\n=\\n|\\n&\\n^\\n?\\n~\\n:\\n$\\n<:\\n.<\\n.>\\n<<\\n<<=\\n>>\\n>>>>\\n>>=\\n>>>=\\n<<=\\n<<<=\\n.<=\\n.>=\\n.==\\n->\\n//\\nin\\n...\\n//\\n:=\\n.//=\\n.*=\\n./=\\n.^=\\n.%=\\n.+=\\n.-=\\n\\\\=\\n\\\\\\\\=\\n||\\n===\\n&&\\n|=\\n.|=\\n<:\\n>:\\n|>\\n<|\\n::\\nx ? y : z\\n\\n#macros\\n@spawnat 2 1+1\\n@eval(:x)\\n\\n#keywords and operators\\nif else elseif while for\\n begin let end do\\ntry catch finally return break continue\\nglobal local const \\nexport import importall using\\nfunction macro module baremodule \\ntype immutable quote\\ntrue false enumerate\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"@base: #f938ab;\\n\\n@width: 10px;\\n@height: @width + 10px;\\n\\n#header {\\n  width: @width;\\n  height: @height;\\n}\\n\\n.box-shadow(@style, @c) when (iscolor(@c)) {\\n  -webkit-box-shadow: @style @c;\\n  box-shadow:         @style @c;\\n}\\n.box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)) {\\n  .box-shadow(@style, rgba(0, 0, 0, @alpha));\\n}\\n.box {\\n  color: saturate(@base, 5%);\\n  border-color: lighten(@base, 30%);\\n  div { .box-shadow(0 0 5px, 30%) }\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# LiveScript mode for CodeMirror\\n# The following script, prelude.ls, is used to\\n# demonstrate LiveScript mode for CodeMirror.\\n#   https://github.com/gkz/prelude-ls\\n\\nexport objToFunc = objToFunc = (obj) ->\\n  (key) -> obj[key]\\n\\nexport each = (f, xs) -->\\n  if typeof! xs is \\\\Object\\n    for , x of xs then f x\\n  else\\n    for x in xs then f x\\n  xs\\n\\nexport map = (f, xs) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  type = typeof! xs\\n  if type is \\\\Object\\n    {[key, f x] for key, x of xs}\\n  else\\n    result = [f x for x in xs]\\n    if type is \\\\String then result * '' else result\\n\\nexport filter = (f, xs) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  type = typeof! xs\\n  if type is \\\\Object\\n    {[key, x] for key, x of xs when f x}\\n  else\\n    result = [x for x in xs when f x]\\n    if type is \\\\String then result * '' else result\\n\\nexport reject = (f, xs) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  type = typeof! xs\\n  if type is \\\\Object\\n    {[key, x] for key, x of xs when not f x}\\n  else\\n    result = [x for x in xs when not f x]\\n    if type is \\\\String then result * '' else result\\n\\nexport partition = (f, xs) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  type = typeof! xs\\n  if type is \\\\Object\\n    passed = {}\\n    failed = {}\\n    for key, x of xs\\n      (if f x then passed else failed)[key] = x\\n  else\\n    passed = []\\n    failed = []\\n    for x in xs\\n      (if f x then passed else failed)push x\\n    if type is \\\\String\\n      passed *= ''\\n      failed *= ''\\n  [passed, failed]\\n\\nexport find = (f, xs) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  if typeof! xs is \\\\Object\\n    for , x of xs when f x then return x\\n  else\\n    for x in xs when f x then return x\\n  void\\n\\nexport head = export first = (xs) ->\\n  return void if not xs.length\\n  xs.0\\n\\nexport tail = (xs) ->\\n  return void if not xs.length\\n  xs.slice 1\\n\\nexport last = (xs) ->\\n  return void if not xs.length\\n  xs[*-1]\\n\\nexport initial = (xs) ->\\n  return void if not xs.length\\n  xs.slice 0 xs.length - 1\\n\\nexport empty = (xs) ->\\n  if typeof! xs is \\\\Object\\n    for x of xs then return false\\n    return yes\\n  not xs.length\\n\\nexport values = (obj) ->\\n  [x for , x of obj]\\n\\nexport keys = (obj) ->\\n  [x for x of obj]\\n\\nexport len = (xs) ->\\n  xs = values xs if typeof! xs is \\\\Object\\n  xs.length\\n\\nexport cons = (x, xs) -->\\n  if typeof! xs is \\\\String then x + xs else [x] ++ xs\\n\\nexport append = (xs, ys) -->\\n  if typeof! ys is \\\\String then xs + ys else xs ++ ys\\n\\nexport join = (sep, xs) -->\\n  xs = values xs if typeof! xs is \\\\Object\\n  xs.join sep\\n\\nexport reverse = (xs) ->\\n  if typeof! xs is \\\\String\\n  then (xs / '')reverse! * ''\\n  else xs.slice!reverse!\\n\\nexport fold = export foldl = (f, memo, xs) -->\\n  if typeof! xs is \\\\Object\\n    for , x of xs then memo = f memo, x\\n  else\\n    for x in xs then memo = f memo, x\\n  memo\\n\\nexport fold1 = export foldl1 = (f, xs) --> fold f, xs.0, xs.slice 1\\n\\nexport foldr = (f, memo, xs) --> fold f, memo, xs.slice!reverse!\\n\\nexport foldr1 = (f, xs) -->\\n  xs.=slice!reverse!\\n  fold f, xs.0, xs.slice 1\\n\\nexport unfoldr = export unfold = (f, b) -->\\n  if (f b)?\\n    [that.0] ++ unfoldr f, that.1\\n  else\\n    []\\n\\nexport andList = (xs) ->\\n  for x in xs when not x\\n    return false\\n  true\\n\\nexport orList = (xs) ->\\n  for x in xs when x\\n    return true\\n  false\\n\\nexport any = (f, xs) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  for x in xs when f x\\n    return yes\\n  no\\n\\nexport all = (f, xs) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  for x in xs when not f x\\n    return no\\n  yes\\n\\nexport unique = (xs) ->\\n  result = []\\n  if typeof! xs is \\\\Object\\n    for , x of xs when x not in result then result.push x\\n  else\\n    for x   in xs when x not in result then result.push x\\n  if typeof! xs is \\\\String then result * '' else result\\n\\nexport sort = (xs) ->\\n  xs.concat!sort (x, y) ->\\n    | x > y =>  1\\n    | x < y => -1\\n    | _     =>  0\\n\\nexport sortBy = (f, xs) -->\\n  return [] unless xs.length\\n  xs.concat!sort f\\n\\nexport compare = (f, x, y) -->\\n  | (f x) > (f y) =>  1\\n  | (f x) < (f y) => -1\\n  | otherwise     =>  0\\n\\nexport sum = (xs) ->\\n  result = 0\\n  if typeof! xs is \\\\Object\\n    for , x of xs then result += x\\n  else\\n    for x   in xs then result += x\\n  result\\n\\nexport product = (xs) ->\\n  result = 1\\n  if typeof! xs is \\\\Object\\n    for , x of xs then result *= x\\n  else\\n    for x   in xs then result *= x\\n  result\\n\\nexport mean = export average = (xs) -> (sum xs) / len xs\\n\\nexport concat = (xss) -> fold append, [], xss\\n\\nexport concatMap = (f, xs) --> fold ((memo, x) -> append memo, f x), [], xs\\n\\nexport listToObj = (xs) ->\\n  {[x.0, x.1] for x in xs}\\n\\nexport maximum = (xs) -> fold1 (>?), xs\\n\\nexport minimum = (xs) -> fold1 (<?), xs\\n\\nexport scan = export scanl = (f, memo, xs) -->\\n  last = memo\\n  if typeof! xs is \\\\Object\\n  then [memo] ++ [last = f last, x for , x of xs]\\n  else [memo] ++ [last = f last, x for x in xs]\\n\\nexport scan1 = export scanl1 = (f, xs) --> scan f, xs.0, xs.slice 1\\n\\nexport scanr = (f, memo, xs) -->\\n  xs.=slice!reverse!\\n  scan f, memo, xs .reverse!\\n\\nexport scanr1 = (f, xs) -->\\n  xs.=slice!reverse!\\n  scan f, xs.0, xs.slice 1 .reverse!\\n\\nexport replicate = (n, x) -->\\n  result = []\\n  i = 0\\n  while i < n, ++i then result.push x\\n  result\\n\\nexport take = (n, xs) -->\\n  | n <= 0\\n    if typeof! xs is \\\\String then '' else []\\n  | not xs.length => xs\\n  | otherwise     => xs.slice 0, n\\n\\nexport drop = (n, xs) -->\\n  | n <= 0        => xs\\n  | not xs.length => xs\\n  | otherwise     => xs.slice n\\n\\nexport splitAt = (n, xs) --> [(take n, xs), (drop n, xs)]\\n\\nexport takeWhile = (p, xs) -->\\n  return xs if not xs.length\\n  p = objToFunc p if typeof! p isnt \\\\Function\\n  result = []\\n  for x in xs\\n    break if not p x\\n    result.push x\\n  if typeof! xs is \\\\String then result * '' else result\\n\\nexport dropWhile = (p, xs) -->\\n  return xs if not xs.length\\n  p = objToFunc p if typeof! p isnt \\\\Function\\n  i = 0\\n  for x in xs\\n    break if not p x\\n    ++i\\n  drop i, xs\\n\\nexport span = (p, xs) --> [(takeWhile p, xs), (dropWhile p, xs)]\\n\\nexport breakIt = (p, xs) --> span (not) << p, xs\\n\\nexport zip = (xs, ys) -->\\n  result = []\\n  for zs, i in [xs, ys]\\n    for z, j in zs\\n      result.push [] if i is 0\\n      result[j]?push z\\n  result\\n\\nexport zipWith = (f,xs, ys) -->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  if not xs.length or not ys.length\\n    []\\n  else\\n    [f.apply this, zs for zs in zip.call this, xs, ys]\\n\\nexport zipAll = (...xss) ->\\n  result = []\\n  for xs, i in xss\\n    for x, j in xs\\n      result.push [] if i is 0\\n      result[j]?push x\\n  result\\n\\nexport zipAllWith = (f, ...xss) ->\\n  f = objToFunc f if typeof! f isnt \\\\Function\\n  if not xss.0.length or not xss.1.length\\n    []\\n  else\\n    [f.apply this, xs for xs in zipAll.apply this, xss]\\n\\nexport compose = (...funcs) ->\\n  ->\\n    args = arguments\\n    for f in funcs\\n      args = [f.apply this, args]\\n    args.0\\n\\nexport curry = (f) ->\\n  curry$ f # using util method curry$ from livescript\\n\\nexport id = (x) -> x\\n\\nexport flip = (f, x, y) --> f y, x\\n\\nexport fix = (f) ->\\n  ( (g, x) -> -> f(g g) ...arguments ) do\\n    (g, x) -> -> f(g g) ...arguments\\n\\nexport lines = (str) ->\\n  return [] if not str.length\\n  str / \\\\n\\n\\nexport unlines = (strs) -> strs * \\\\n\\n\\nexport words = (str) ->\\n  return [] if not str.length\\n  str / /[ ]+/\\n\\nexport unwords = (strs) -> strs * ' '\\n\\nexport max = (>?)\\n\\nexport min = (<?)\\n\\nexport negate = (x) -> -x\\n\\nexport abs = Math.abs\\n\\nexport signum = (x) ->\\n  | x < 0     => -1\\n  | x > 0     =>  1\\n  | otherwise =>  0\\n\\nexport quot = (x, y) --> ~~(x / y)\\n\\nexport rem = (%)\\n\\nexport div = (x, y) --> Math.floor x / y\\n\\nexport mod = (%%)\\n\\nexport recip = (1 /)\\n\\nexport pi = Math.PI\\n\\nexport tau = pi * 2\\n\\nexport exp = Math.exp\\n\\nexport sqrt = Math.sqrt\\n\\n# changed from log as log is a\\n# common function for logging things\\nexport ln = Math.log\\n\\nexport pow = (^)\\n\\nexport sin = Math.sin\\n\\nexport tan = Math.tan\\n\\nexport cos = Math.cos\\n\\nexport asin = Math.asin\\n\\nexport acos = Math.acos\\n\\nexport atan = Math.atan\\n\\nexport atan2 = (x, y) --> Math.atan2 x, y\\n\\n# sinh\\n# tanh\\n# cosh\\n# asinh\\n# atanh\\n# acosh\\n\\nexport truncate = (x) -> ~~x\\n\\nexport round = Math.round\\n\\nexport ceiling = Math.ceil\\n\\nexport floor = Math.floor\\n\\nexport isItNaN = (x) -> x isnt x\\n\\nexport even = (x) -> x % 2 == 0\\n\\nexport odd = (x) -> x % 2 != 0\\n\\nexport gcd = (x, y) -->\\n  x = Math.abs x\\n  y = Math.abs y\\n  until y is 0\\n    z = x % y\\n    x = y\\n    y = z\\n  x\\n\\nexport lcm = (x, y) -->\\n  Math.abs Math.floor (x / (gcd x, y) * y)\\n\\n# meta\\nexport installPrelude = !(target) ->\\n  unless target.prelude?isInstalled\\n    target <<< out$ # using out$ generated by livescript\\n    target <<< target.prelude.isInstalled = true\\n\\nexport prelude = out$\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"--[[\\nexample useless code to show lua syntax highlighting\\nthis is multiline comment\\n]]\\n\\nfunction blahblahblah(x)\\n\\n  local table = {\\n    \\\"asd\\\" = 123,\\n    \\\"x\\\" = 0.34,  \\n  }\\n  if x ~= 3 then\\n    print( x )\\n  elseif x == \\\"string\\\"\\n    my_custom_function( 0x34 )\\n  else\\n    unknown_function( \\\"some string\\\" )\\n  end\\n\\n  --single line comment\\n  \\nend\\n\\nfunction blablabla3()\\n\\n  for k,v in ipairs( table ) do\\n    --abcde..\\n    y=[=[\\n  x=[[\\n      x is a multi line string\\n   ]]\\n  but its definition is iside a highest level string!\\n  ]=]\\n    print(\\\" \\\\\\\"\\\\\\\" \\\")\\n\\n    s = math.sin( x )\\n  end\\n\\nend\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"Markdown: Basics\\n================\\n\\n<ul id=\\\"ProjectSubmenu\\\">\\n    <li><a href=\\\"/projects/markdown/\\\" title=\\\"Markdown Project Page\\\">Main</a></li>\\n    <li><a class=\\\"selected\\\" title=\\\"Markdown Basics\\\">Basics</a></li>\\n    <li><a href=\\\"/projects/markdown/syntax\\\" title=\\\"Markdown Syntax Documentation\\\">Syntax</a></li>\\n    <li><a href=\\\"/projects/markdown/license\\\" title=\\\"Pricing and License Information\\\">License</a></li>\\n    <li><a href=\\\"/projects/markdown/dingus\\\" title=\\\"Online Markdown Web Form\\\">Dingus</a></li>\\n</ul>\\n\\n\\nGetting the Gist of Markdown's Formatting Syntax\\n------------------------------------------------\\n\\nThis page offers a brief overview of what it's like to use Markdown.\\nThe [syntax page] [s] provides complete, detailed documentation for\\nevery feature, but Markdown should be very easy to pick up simply by\\nlooking at a few examples of it in action. The examples on this page\\nare written in a before/after style, showing example syntax and the\\nHTML output produced by Markdown.\\n\\nIt's also helpful to simply try Markdown out; the [Dingus] [d] is a\\nweb application that allows you type your own Markdown-formatted text\\nand translate it to XHTML.\\n\\n**Note:** This document is itself written using Markdown; you\\ncan [see the source for it by adding '.text' to the URL] [src].\\n\\n  [s]: /projects/markdown/syntax  \\\"Markdown Syntax\\\"\\n  [d]: /projects/markdown/dingus  \\\"Markdown Dingus\\\"\\n  [src]: /projects/markdown/basics.text\\n\\n\\n## Paragraphs, Headers, Blockquotes ##\\n\\nA paragraph is simply one or more consecutive lines of text, separated\\nby one or more blank lines. (A blank line is any line that looks like\\na blank line -- a line containing nothing but spaces or tabs is\\nconsidered blank.) Normal paragraphs should not be indented with\\nspaces or tabs.\\n\\nMarkdown offers two styles of headers: *Setext* and *atx*.\\nSetext-style headers for `<h1>` and `<h2>` are created by\\n\\\"underlining\\\" with equal signs (`= `) and hyphens (` - `), respectively.\\nTo create an atx-style header, you put 1-6 hash marks (`#`) at the\\nbeginning of the line -- the number of hashes equals the resulting\\nHTML header level.\\n\\nBlockquotes are indicated using email-style '`> `' angle brackets.\\n\\nMarkdown:\\n\\n    A First Level Header\\n    ====================\\n\\n    A Second Level Header\\n    ---------------------\\n\\n    Now is the time for all good men to come to\\n    the aid of their country. This is just a\\n    regular paragraph.\\n\\n    The quick brown fox jumped over the lazy\\n    dog's back.\\n\\n    ### Header 3\\n\\n    > This is a blockquote.\\n    >\\n    > This is the second paragraph in the blockquote.\\n    >\\n    > ## This is an H2 in a blockquote\\n\\n\\nOutput:\\n\\n    <h1>A First Level Header</h1>\\n\\n    <h2>A Second Level Header</h2>\\n\\n    <p>Now is the time for all good men to come to\\n    the aid of their country. This is just a\\n    regular paragraph.</p>\\n\\n    <p>The quick brown fox jumped over the lazy\\n    dog's back.</p>\\n\\n    <h3>Header 3</h3>\\n\\n    <blockquote>\\n        <p>This is a blockquote.</p>\\n\\n        <p>This is the second paragraph in the blockquote.</p>\\n\\n        <h2>This is an H2 in a blockquote</h2>\\n    </blockquote>\\n\\n\\n\\n### Phrase Emphasis ###\\n\\nMarkdown uses asterisks and underscores to indicate spans of emphasis.\\n\\nMarkdown:\\n\\n    Some of these words *are emphasized*.\\n    Some of these words _are emphasized also_.\\n\\n    Use two asterisks for **strong emphasis**.\\n    Or, if you prefer, __use two underscores instead__.\\n\\nOutput:\\n\\n    <p>Some of these words <em>are emphasized</em>.\\n    Some of these words <em>are emphasized also</em>.</p>\\n\\n    <p>Use two asterisks for <strong>strong emphasis</strong>.\\n    Or, if you prefer, <strong>use two underscores instead</strong>.</p>\\n\\n\\n\\n## Lists ##\\n\\nUnordered (bulleted) lists use asterisks, pluses, and hyphens (`* `,\\n`+ `, and ` - `) as list markers. These three markers are\\ninterchangable; this:\\n\\n    *   Candy.\\n    *   Gum.\\n    *   Booze.\\n\\nthis:\\n\\n    +   Candy.\\n    +   Gum.\\n    +   Booze.\\n\\nand this:\\n\\n    -   Candy.\\n    -   Gum.\\n    -   Booze.\\n\\nall produce the same output:\\n\\n    <ul>\\n    <li>Candy.</li>\\n    <li>Gum.</li>\\n    <li>Booze.</li>\\n    </ul>\\n\\nOrdered (numbered) lists use regular numbers, followed by periods, as\\nlist markers:\\n\\n    1.  Red\\n    2.  Green\\n    3.  Blue\\n\\nOutput:\\n\\n    <ol>\\n    <li>Red</li>\\n    <li>Green</li>\\n    <li>Blue</li>\\n    </ol>\\n\\nIf you put blank lines between items, you'll get `<p>` tags for the\\nlist item text. You can create multi-paragraph list items by indenting\\nthe paragraphs by 4 spaces or 1 tab:\\n\\n    *   A list item.\\n\\n        With multiple paragraphs.\\n\\n    *   Another item in the list.\\n\\nOutput:\\n\\n    <ul>\\n    <li><p>A list item.</p>\\n    <p>With multiple paragraphs.</p></li>\\n    <li><p>Another item in the list.</p></li>\\n    </ul>\\n\\n\\n\\n### Links ###\\n\\nMarkdown supports two styles for creating links: *inline* and\\n*reference*. With both styles, you use square brackets to delimit the\\ntext you want to turn into a link.\\n\\nInline-style links use parentheses immediately after the link text.\\nFor example:\\n\\n    This is an [example link](http://example.com/).\\n\\nOutput:\\n\\n    <p>This is an <a href=\\\"http://example.com/\\\">\\n    example link</a>.</p>\\n\\nOptionally, you may include a title attribute in the parentheses:\\n\\n    This is an [example link](http://example.com/ \\\"With a Title\\\").\\n\\nOutput:\\n\\n    <p>This is an <a href=\\\"http://example.com/\\\" title=\\\"With a Title\\\">\\n    example link</a>.</p>\\n\\nReference-style links allow you to refer to your links by names, which\\nyou define elsewhere in your document:\\n\\n    I get 10 times more traffic from [Google][1] than from\\n    [Yahoo][2] or [MSN][3].\\n\\n    [1]: http://google.com/        \\\"Google\\\"\\n    [2]: http://search.yahoo.com/  \\\"Yahoo Search\\\"\\n    [3]: http://search.msn.com/    \\\"MSN Search\\\"\\n\\nOutput:\\n\\n    <p>I get 10 times more traffic from <a href=\\\"http://google.com/\\\"\\n    title=\\\"Google\\\">Google</a> than from <a href=\\\"http://search.yahoo.com/\\\"\\n    title=\\\"Yahoo Search\\\">Yahoo</a> or <a href=\\\"http://search.msn.com/\\\"\\n    title=\\\"MSN Search\\\">MSN</a>.</p>\\n\\nThe title attribute is optional. Link names may contain letters,\\nnumbers and spaces, but are *not* case sensitive:\\n\\n    I start my morning with a cup of coffee and\\n    [The New York Times][NY Times].\\n\\n    [ny times]: http://www.nytimes.com/\\n\\nOutput:\\n\\n    <p>I start my morning with a cup of coffee and\\n    <a href=\\\"http://www.nytimes.com/\\\">The New York Times</a>.</p>\\n\\n\\n### Images ###\\n\\nImage syntax is very much like link syntax.\\n\\nInline (titles are optional):\\n\\n    ![alt text](/path/to/img.jpg \\\"Title\\\")\\n\\nReference-style:\\n\\n    ![alt text][id]\\n\\n    [id]: /path/to/img.jpg \\\"Title\\\"\\n\\nBoth of the above examples produce the same output:\\n\\n    <img src=\\\"/path/to/img.jpg\\\" alt=\\\"alt text\\\" title=\\\"Title\\\" />\\n\\n\\n\\n### Code ###\\n\\nIn a regular paragraph, you can create code span by wrapping text in\\nbacktick quotes. Any ampersands (`& `) and angle brackets (` < ` or\\n`> `) will automatically be translated into HTML entities. This makes\\nit easy to use Markdown to write about HTML example code:\\n\\n    I strongly recommend against using any `<blink>` tags.\\n\\n    I wish SmartyPants used named entities like `& mdash; `\\n    instead of decimal-encoded entites like `&#8212; `.\\n\\nOutput:\\n\\n    <p>I strongly recommend against using any\\n    <code>&lt;blink&gt;</code> tags.</p>\\n\\n    <p>I wish SmartyPants used named entities like\\n    <code>&amp;mdash;</code> instead of decimal-encoded\\n    entites like <code>&amp;#8212;</code>.</p>\\n\\n\\nTo specify an entire block of pre-formatted code, indent every line of\\nthe block by 4 spaces or 1 tab. Just like with code spans, `& `, ` < `,\\nand `> ` characters will be escaped automatically.\\n\\nMarkdown:\\n\\n    If you want your page to validate under XHTML 1.0 Strict,\\n    you've got to put paragraph tags in your blockquotes:\\n\\n        <blockquote>\\n            <p>For example.</p>\\n        </blockquote>\\n\\nOutput:\\n\\n    <p>If you want your page to validate under XHTML 1.0 Strict,\\n    you've got to put paragraph tags in your blockquotes:</p>\\n\\n    <pre><code>&lt;blockquote&gt;\\n        &lt;p&gt;For example.&lt;/p&gt;\\n    &lt;/blockquote&gt;\\n    </code></pre>\\n\\n## Fenced code blocks (and syntax highlighting)\\n\\n```javascript\\nfor (var i = 0; i < items.length; i++) {\\n  console.log(items[i], i); // log them\\n}\\n```\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"(* example Mathematica code *)\\n(* Dualisiert wird anhand einer Polarit\\xE4t an einer\\n   Quadrik $x^t Q x = 0$ mit regul\\xE4rer Matrix $Q$ (also\\n   mit $det(Q) \\neq 0$), z.B. die Identit\\xE4tsmatrix.\\n   $p$ ist eine Liste von Polynomen - ein Ideal. *)\\ndualize::\\\"singular\\\" = \\\"Q must be regular: found Det[Q]==0.\\\";\\ndualize[ Q_, p_ ] := Block[\\n    { m, n, xv, lv, uv, vars, polys, dual },\\n    If[Det[Q] == 0,\\n      Message[dualize::\\\"singular\\\"],\\n      m = Length[p];\\n      n = Length[Q] - 1;\\n      xv = Table[Subscript[x, i], {i, 0, n}];\\n      lv = Table[Subscript[l, i], {i, 1, m}];\\n      uv = Table[Subscript[u, i], {i, 0, n}];\\n      (* Konstruiere Ideal polys. *)\\n      If[m == 0,\\n        polys = Q.uv,\\n        polys = Join[p, Q.uv - Transpose[Outer[D, p, xv]].lv]\\n        ];\\n      (* Eliminiere die ersten n + 1 + m Variablen xv und lv\\n         aus dem Ideal polys. *)\\n      vars = Join[xv, lv];\\n      dual = GroebnerBasis[polys, uv, vars];\\n      (* Ersetze u mit x im Ergebnis. *)\\n      ReplaceAll[dual, Rule[u, x]]\\n      ]\\n    ]\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"From timothygu99@gmail.com Sun Apr 17 01:40:43 2016\\nFrom: Timothy Gu <timothygu99@gmail.com>\\nDate: Sat, 16 Apr 2016 18:40:43 -0700\\nSubject: mbox mode\\nMessage-ID: <Z8d+bTT50U/az94FZnyPkDjZmW0=@gmail.com>\\n\\nmbox mode is working!\\n\\nTimothy\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"Markdown: Basics\\n================\\n\\n<ul id=\\\"ProjectSubmenu\\\">\\n    <li><a href=\\\"/projects/markdown/\\\" title=\\\"Markdown Project Page\\\">Main</a></li>\\n    <li><a class=\\\"selected\\\" title=\\\"Markdown Basics\\\">Basics</a></li>\\n    <li><a href=\\\"/projects/markdown/syntax\\\" title=\\\"Markdown Syntax Documentation\\\">Syntax</a></li>\\n    <li><a href=\\\"/projects/markdown/license\\\" title=\\\"Pricing and License Information\\\">License</a></li>\\n    <li><a href=\\\"/projects/markdown/dingus\\\" title=\\\"Online Markdown Web Form\\\">Dingus</a></li>\\n</ul>\\n\\n\\nGetting the Gist of Markdown's Formatting Syntax\\n------------------------------------------------\\n\\nThis page offers a brief overview of what it's like to use Markdown.\\nThe [syntax page] [s] provides complete, detailed documentation for\\nevery feature, but Markdown should be very easy to pick up simply by\\nlooking at a few examples of it in action. The examples on this page\\nare written in a before/after style, showing example syntax and the\\nHTML output produced by Markdown.\\n\\nIt's also helpful to simply try Markdown out; the [Dingus] [d] is a\\nweb application that allows you type your own Markdown-formatted text\\nand translate it to XHTML.\\n\\n**Note:** This document is itself written using Markdown; you\\ncan [see the source for it by adding '.text' to the URL] [src].\\n\\n  [s]: /projects/markdown/syntax  \\\"Markdown Syntax\\\"\\n  [d]: /projects/markdown/dingus  \\\"Markdown Dingus\\\"\\n  [src]: /projects/markdown/basics.text\\n\\n\\n## Paragraphs, Headers, Blockquotes ##\\n\\nA paragraph is simply one or more consecutive lines of text, separated\\nby one or more blank lines. (A blank line is any line that looks like\\na blank line -- a line containing nothing but spaces or tabs is\\nconsidered blank.) Normal paragraphs should not be indented with\\nspaces or tabs.\\n\\nMarkdown offers two styles of headers: *Setext* and *atx*.\\nSetext-style headers for `<h1>` and `<h2>` are created by\\n\\\"underlining\\\" with equal signs (`= `) and hyphens (` - `), respectively.\\nTo create an atx-style header, you put 1-6 hash marks (`#`) at the\\nbeginning of the line -- the number of hashes equals the resulting\\nHTML header level.\\n\\nBlockquotes are indicated using email-style '`> `' angle brackets.\\n\\nMarkdown:\\n\\n    A First Level Header\\n    ====================\\n\\n    A Second Level Header\\n    ---------------------\\n\\n    Now is the time for all good men to come to\\n    the aid of their country. This is just a\\n    regular paragraph.\\n\\n    The quick brown fox jumped over the lazy\\n    dog's back.\\n\\n    ### Header 3\\n\\n    > This is a blockquote.\\n    >\\n    > This is the second paragraph in the blockquote.\\n    >\\n    > ## This is an H2 in a blockquote\\n\\n\\nOutput:\\n\\n    <h1>A First Level Header</h1>\\n\\n    <h2>A Second Level Header</h2>\\n\\n    <p>Now is the time for all good men to come to\\n    the aid of their country. This is just a\\n    regular paragraph.</p>\\n\\n    <p>The quick brown fox jumped over the lazy\\n    dog's back.</p>\\n\\n    <h3>Header 3</h3>\\n\\n    <blockquote>\\n        <p>This is a blockquote.</p>\\n\\n        <p>This is the second paragraph in the blockquote.</p>\\n\\n        <h2>This is an H2 in a blockquote</h2>\\n    </blockquote>\\n\\n\\n\\n### Phrase Emphasis ###\\n\\nMarkdown uses asterisks and underscores to indicate spans of emphasis.\\n\\nMarkdown:\\n\\n    Some of these words *are emphasized*.\\n    Some of these words _are emphasized also_.\\n\\n    Use two asterisks for **strong emphasis**.\\n    Or, if you prefer, __use two underscores instead__.\\n\\nOutput:\\n\\n    <p>Some of these words <em>are emphasized</em>.\\n    Some of these words <em>are emphasized also</em>.</p>\\n\\n    <p>Use two asterisks for <strong>strong emphasis</strong>.\\n    Or, if you prefer, <strong>use two underscores instead</strong>.</p>\\n\\n\\n\\n## Lists ##\\n\\nUnordered (bulleted) lists use asterisks, pluses, and hyphens (`* `,\\n`+ `, and ` - `) as list markers. These three markers are\\ninterchangable; this:\\n\\n    *   Candy.\\n    *   Gum.\\n    *   Booze.\\n\\nthis:\\n\\n    +   Candy.\\n    +   Gum.\\n    +   Booze.\\n\\nand this:\\n\\n    -   Candy.\\n    -   Gum.\\n    -   Booze.\\n\\nall produce the same output:\\n\\n    <ul>\\n    <li>Candy.</li>\\n    <li>Gum.</li>\\n    <li>Booze.</li>\\n    </ul>\\n\\nOrdered (numbered) lists use regular numbers, followed by periods, as\\nlist markers:\\n\\n    1.  Red\\n    2.  Green\\n    3.  Blue\\n\\nOutput:\\n\\n    <ol>\\n    <li>Red</li>\\n    <li>Green</li>\\n    <li>Blue</li>\\n    </ol>\\n\\nIf you put blank lines between items, you'll get `<p>` tags for the\\nlist item text. You can create multi-paragraph list items by indenting\\nthe paragraphs by 4 spaces or 1 tab:\\n\\n    *   A list item.\\n\\n        With multiple paragraphs.\\n\\n    *   Another item in the list.\\n\\nOutput:\\n\\n    <ul>\\n    <li><p>A list item.</p>\\n    <p>With multiple paragraphs.</p></li>\\n    <li><p>Another item in the list.</p></li>\\n    </ul>\\n\\n\\n\\n### Links ###\\n\\nMarkdown supports two styles for creating links: *inline* and\\n*reference*. With both styles, you use square brackets to delimit the\\ntext you want to turn into a link.\\n\\nInline-style links use parentheses immediately after the link text.\\nFor example:\\n\\n    This is an [example link](http://example.com/).\\n\\nOutput:\\n\\n    <p>This is an <a href=\\\"http://example.com/\\\">\\n    example link</a>.</p>\\n\\nOptionally, you may include a title attribute in the parentheses:\\n\\n    This is an [example link](http://example.com/ \\\"With a Title\\\").\\n\\nOutput:\\n\\n    <p>This is an <a href=\\\"http://example.com/\\\" title=\\\"With a Title\\\">\\n    example link</a>.</p>\\n\\nReference-style links allow you to refer to your links by names, which\\nyou define elsewhere in your document:\\n\\n    I get 10 times more traffic from [Google][1] than from\\n    [Yahoo][2] or [MSN][3].\\n\\n    [1]: http://google.com/        \\\"Google\\\"\\n    [2]: http://search.yahoo.com/  \\\"Yahoo Search\\\"\\n    [3]: http://search.msn.com/    \\\"MSN Search\\\"\\n\\nOutput:\\n\\n    <p>I get 10 times more traffic from <a href=\\\"http://google.com/\\\"\\n    title=\\\"Google\\\">Google</a> than from <a href=\\\"http://search.yahoo.com/\\\"\\n    title=\\\"Yahoo Search\\\">Yahoo</a> or <a href=\\\"http://search.msn.com/\\\"\\n    title=\\\"MSN Search\\\">MSN</a>.</p>\\n\\nThe title attribute is optional. Link names may contain letters,\\nnumbers and spaces, but are *not* case sensitive:\\n\\n    I start my morning with a cup of coffee and\\n    [The New York Times][NY Times].\\n\\n    [ny times]: http://www.nytimes.com/\\n\\nOutput:\\n\\n    <p>I start my morning with a cup of coffee and\\n    <a href=\\\"http://www.nytimes.com/\\\">The New York Times</a>.</p>\\n\\n\\n### Images ###\\n\\nImage syntax is very much like link syntax.\\n\\nInline (titles are optional):\\n\\n    ![alt text](/path/to/img.jpg \\\"Title\\\")\\n\\nReference-style:\\n\\n    ![alt text][id]\\n\\n    [id]: /path/to/img.jpg \\\"Title\\\"\\n\\nBoth of the above examples produce the same output:\\n\\n    <img src=\\\"/path/to/img.jpg\\\" alt=\\\"alt text\\\" title=\\\"Title\\\" />\\n\\n\\n\\n### Code ###\\n\\nIn a regular paragraph, you can create code span by wrapping text in\\nbacktick quotes. Any ampersands (`& `) and angle brackets (` < ` or\\n`> `) will automatically be translated into HTML entities. This makes\\nit easy to use Markdown to write about HTML example code:\\n\\n    I strongly recommend against using any `<blink>` tags.\\n\\n    I wish SmartyPants used named entities like `& mdash; `\\n    instead of decimal-encoded entites like `&#8212; `.\\n\\nOutput:\\n\\n    <p>I strongly recommend against using any\\n    <code>&lt;blink&gt;</code> tags.</p>\\n\\n    <p>I wish SmartyPants used named entities like\\n    <code>&amp;mdash;</code> instead of decimal-encoded\\n    entites like <code>&amp;#8212;</code>.</p>\\n\\n\\nTo specify an entire block of pre-formatted code, indent every line of\\nthe block by 4 spaces or 1 tab. Just like with code spans, `& `, ` < `,\\nand `> ` characters will be escaped automatically.\\n\\nMarkdown:\\n\\n    If you want your page to validate under XHTML 1.0 Strict,\\n    you've got to put paragraph tags in your blockquotes:\\n\\n        <blockquote>\\n            <p>For example.</p>\\n        </blockquote>\\n\\nOutput:\\n\\n    <p>If you want your page to validate under XHTML 1.0 Strict,\\n    you've got to put paragraph tags in your blockquotes:</p>\\n\\n    <pre><code>&lt;blockquote&gt;\\n        &lt;p&gt;For example.&lt;/p&gt;\\n    &lt;/blockquote&gt;\\n    </code></pre>\\n\\n## Fenced code blocks (and syntax highlighting)\\n\\n```javascript\\nfor (var i = 0; i < items.length; i++) {\\n  console.log(items[i], i); // log them\\n}\\n```\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \";AKA Nick Tracker by Ford_Lawnmower irc.GeekShed.net #Script-Help\\n;*****************************************************************************;\\n;**Start Setup\\n;Change JoinDisplay, below, for On Join AKA Display. On = 1 - Off = 0\\nalias -l JoinDisplay { return 1 }\\n;Change MaxNicks, below, to the number of nicknames you want to store for each hostmask. I wouldn't go over 400 with this ;/\\nalias -l MaxNicks { return 20 }\\n;Change AKALogo, below, To the text you want displayed before each AKA result.\\nalias -l AKALogo { return \\x0306\\x07 \\x0305A\\x0306K\\x0307A \\x0306\\x07 }\\n;**End Setup\\n;*****************************************************************************;\\nOn *:Join:#: {\\n  if ($nick == $me) { .timer 1 1 ialupdateCheck $chan }\\n  NickNamesAdd $nick $+($network,$wildsite)\\n  if ($JoinDisplay) { .timerNickNames $+ $nick 1 2 NickNames.display $nick $chan $network $wildsite }\\n}\\non *:Nick: { NickNamesAdd $newnick $+($network,$wildsite) $nick }\\nalias -l NickNames.display {\\n  if ($gettok($hget(NickNames,$+($3,$4)),0,126) > 1) {\\n    echo -g $2 $AKALogo $+(\\x0309,$1) $AKALogo \\x0307 $mid($replace($hget(NickNames,$+($3,$4)),$chr(126),$chr(44)),2,-1)\\n  }\\n}\\nalias -l NickNamesAdd {\\n  if ($hget(NickNames,$2)) {\\n    if (!$regex($hget(NickNames,$2),/~\\\\Q $+ $replacecs($1,\\\\E,\\\\E\\\\E\\\\Q) $+ \\\\E~/i)) {\\n      if ($gettok($hget(NickNames,$2),0,126) <= $MaxNicks) {\\n        hadd NickNames $2 $+($hget(NickNames,$2),$1,~)\\n      }\\n      else {\\n        hadd NickNames $2 $+($mid($hget(NickNames,$2),$pos($hget(NickNames,$2),~,2)),$1,~)\\n      }\\n    }\\n  }\\n  else {\\n    hadd -m NickNames $2 $+(~,$1,~,$iif($3,$+($3,~)))\\n  }\\n}\\nalias -l Fix.All.MindUser {\\n  var %Fix.Count = $hfind(NickNames,/[^~]+[0-9]{4}~/,0,r).data\\n  while (%Fix.Count) {\\n    if ($Fix.MindUser($hget(NickNames,$hfind(NickNames,/[^~]+[0-9]{4}~/,%Fix.Count,r).data))) {\\n      echo -ag Record %Fix.Count - $v1 - Was Cleaned\\n      hadd NickNames $hfind(NickNames,/[^~]+[0-9]{4}~/,%Fix.Count,r).data $v1\\n    }\\n    dec %Fix.Count\\n  }\\n}\\nalias -l Fix.MindUser { return $regsubex($1,/[^~]+[0-9]{4}~/g,$null) }\\nmenu nicklist,query {\\n  -\\n  .AKA\\n  ..Check $$1: {\\n    if ($gettok($hget(NickNames,$+($network,$address($1,2))),0,126) > 1) {\\n      NickNames.display $1 $active $network $address($1,2)\\n    }\\n    else { echo -ag $AKALogo $+(\\x0309,$1) \\x0307has not been known by any other nicknames while I have been watching. }\\n  }\\n  ..Cleanup $$1:hadd NickNames $+($network,$address($1,2)) $fix.minduser($hget(NickNames,$+($network,$address($1,2))))\\n  ..Clear $$1:hadd NickNames $+($network,$address($1,2)) $+(~,$1,~)\\n  ..AKA Search Dialog:dialog $iif($dialog(AKA_Search),-v,-m) AKA_Search AKA_Search\\n  -\\n}\\nmenu status,channel {\\n  -\\n  .AKA\\n  ..AKA Search Dialog:dialog $iif($dialog(AKA_Search),-v,-m) AKA_Search AKA_Search\\n  ..Clean All Records:Fix.All.Minduser\\n  -\\n}\\ndialog AKA_Search {\\n  title \\\"AKA Search Engine\\\"\\n  size -1 -1 206 221\\n  option dbu\\n  edit \\\"\\\", 1, 8 5 149 10, autohs\\n  button \\\"Search\\\", 2, 163 4 32 12\\n  radio \\\"Search HostMask\\\", 4, 61 22 55 10\\n  radio \\\"Search Nicknames\\\", 5, 123 22 56 10\\n  list 6, 8 38 190 169, sort extsel vsbar\\n  button \\\"Check Selected\\\", 7, 67 206 40 12\\n  button \\\"Close\\\", 8, 160 206 38 12, cancel\\n  box \\\"Search Type\\\", 3, 11 17 183 18\\n  button \\\"Copy to Clipboard\\\", 9, 111 206 46 12\\n}\\nOn *:Dialog:Aka_Search:init:*: { did -c $dname 5 }\\nOn *:Dialog:Aka_Search:Sclick:2,7,9: {\\n  if ($did == 2) && ($did($dname,1)) {\\n    did -r $dname 6\\n    var %search $+(*,$v1,*), %type $iif($did($dname,5).state,data,item), %matches = $hfind(NickNames,%search,0,w). [ $+ [ %type ] ]\\n    while (%matches) {\\n      did -a $dname 6 $hfind(NickNames,%search,%matches,w). [ $+ [ %type ] ]\\n      dec %matches\\n    }\\n    did -c $dname 6 1\\n  }\\n  elseif ($did == 7) && ($did($dname,6).seltext) { echo -ga $AKALogo \\x0307 $mid($replace($hget(NickNames,$v1),$chr(126),$chr(44)),2,-1) }\\n  elseif ($did == 9) && ($did($dname,6).seltext) { clipboard $mid($v1,$pos($v1,*,1)) }\\n}\\nOn *:Start:{\\n  if (!$hget(NickNames)) { hmake NickNames 10 }\\n  if ($isfile(NickNames.hsh)) { hload  NickNames NickNames.hsh }\\n}\\nOn *:Exit: { if ($hget(NickNames)) { hsave NickNames NickNames.hsh } }\\nOn *:Disconnect: { if ($hget(NickNames)) { hsave NickNames NickNames.hsh } }\\nOn *:Unload: { hfree NickNames }\\nalias -l ialupdateCheck {\\n  inc -z $+(%,ialupdateCheck,$network) $calc($nick($1,0) / 4)\\n  ;If your ial is already being updated on join .who $1 out.\\n  ;If you are using /names to update ial you will still need this line.\\n  .who $1\\n}\\nRaw 352:*: {\\n  if ($($+(%,ialupdateCheck,$network),2)) haltdef\\n  NickNamesAdd $6 $+($network,$address($6,2))\\n}\\nRaw 315:*: {\\n  if ($($+(%,ialupdateCheck,$network),2)) haltdef\\n}\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"model BouncingBall\\n  parameter Real e = 0.7;\\n  parameter Real g = 9.81;\\n  Real h(start=1);\\n  Real v;\\n  Boolean flying(start=true);\\n  Boolean impact;\\n  Real v_new;\\nequation\\n  impact = h <= 0.0;\\n  der(v) = if flying then -g else 0;\\n  der(h) = v;\\n  when {h <= 0.0 and v <= 0.0, impact} then\\n    v_new = if edge(impact) then -e*pre(v) else 0;\\n    flying = v_new > 0;\\n    reinit(v, v_new);\\n  end when;\\n  annotation (uses(Modelica(version=\\\"3.2\\\")));\\nend BouncingBall;\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# Sample mscgen program\\n# See http://www.mcternan.me.uk/mscgen or\\n# https://sverweij.github.io/mscgen_js for more samples\\nmsc {\\n  # options\\n  hscale=\\\"1.2\\\";\\n\\n  # entities/ lifelines\\n  a [label=\\\"Entity A\\\"],\\n  b [label=\\\"Entity B\\\", linecolor=\\\"red\\\", arclinecolor=\\\"red\\\", textbgcolor=\\\"pink\\\"],\\n  c [label=\\\"Entity C\\\"];\\n\\n  # arcs/ messages\\n  a => c [label=\\\"doSomething(args)\\\"];\\n  b => c [label=\\\"doSomething(args)\\\"];\\n  c >> * [label=\\\"everyone asked me\\\", arcskip=\\\"1\\\"];\\n  c =>> c [label=\\\"doing something\\\"];\\n  c -x * [label=\\\"report back\\\", arcskip=\\\"1\\\"];\\n  |||;\\n  --- [label=\\\"shows's over, however ...\\\"];\\n  b => a [label=\\\"did you see c doing something?\\\"];\\n  a -> b [label=\\\"nope\\\"];\\n  b :> a [label=\\\"shall we ask again?\\\"];\\n  a => b [label=\\\"naah\\\"];\\n  ...;\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \" ; Lloyd Milligan\\n ; 03-30-2015\\n ;\\n ; MUMPS support for Code Mirror - Excerpts below from routine ^XUS\\n ;\\nCHECKAV(X1) ;Check A/V code return DUZ or Zero. (Called from XUSRB)\\n N %,%1,X,Y,IEN,DA,DIK\\n S IEN=0\\n ;Start CCOW\\n I $E(X1,1,7)=\\\"~~TOK~~\\\" D  Q:IEN>0 IEN\\n . I $E(X1,8,9)=\\\"~1\\\" S IEN=$$CHKASH^XUSRB4($E(X1,8,255))\\n . I $E(X1,8,9)=\\\"~2\\\" S IEN=$$CHKCCOW^XUSRB4($E(X1,8,255))\\n . Q\\n ;End CCOW\\n S X1=$$UP(X1) S:X1[\\\":\\\" XUTT=1,X1=$TR(X1,\\\":\\\")\\n S X=$P(X1,\\\";\\\") Q:X=\\\"^\\\" -1 S:XUF %1=\\\"Access: \\\"_X\\n Q:X'?1.20ANP 0\\n S X=$$EN^XUSHSH(X) I '$D(^VA(200,\\\"A\\\",X)) D LBAV Q 0\\n S %1=\\\"\\\",IEN=$O(^VA(200,\\\"A\\\",X,0)),XUF(.3)=IEN D USER(IEN)\\n S X=$P(X1,\\\";\\\",2) S:XUF %1=\\\"Verify: \\\"_X S X=$$EN^XUSHSH(X)\\n I $P(XUSER(1),\\\"^\\\",2)'=X D LBAV Q 0\\n I $G(XUFAC(1)) S DIK=\\\"^XUSEC(4,\\\",DA=XUFAC(1) D ^DIK\\n Q IEN\\n ;\\n ; Spell out commands\\n ;\\nSET2() ;EF. Return error code (also called from XUSRB)\\n NEW %,X\\n SET XUNOW=$$HTFM^XLFDT($H),DT=$P(XUNOW,\\\".\\\")\\n KILL DUZ,XUSER\\n SET (DUZ,DUZ(2))=0,(DUZ(0),DUZ(\\\"AG\\\"),XUSER(0),XUSER(1),XUTT,%UCI)=\\\"\\\"\\n SET %=$$INHIBIT^XUSRB() IF %>0 QUIT %\\n SET X=$G(^%ZIS(1,XUDEV,\\\"XUS\\\")),XU1=$G(^(1))\\n IF $L(X) FOR I=1:1:15 IF $L($P(X,U,I)) SET $P(XOPT,U,I)=$P(X,U,I)\\n SET DTIME=600\\n IF '$P(XOPT,U,11),$D(^%ZIS(1,XUDEV,90)),^(90)>2800000,^(90)'>DT QUIT 8\\n QUIT 0\\n ;\\n ; Spell out commands and functions\\n ;\\n IF $PIECE(XUSER(0),U,11),$PIECE(XUSER(0),U,11)'>DT QUIT 11 ;Terminated\\n IF $DATA(DUZ(\\\"ASH\\\")) QUIT 0 ;If auto handle, Allow to sign-on p434\\n IF $PIECE(XUSER(0),U,7) QUIT 5 ;Disuser flag set\\n IF '$LENGTH($PIECE(XUSER(1),U,2)) QUIT 21 ;p419, p434\\n Q 0\\n ;\\n  \\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"server {\\n  listen 173.255.219.235:80;\\n  server_name website.com.au;\\n  rewrite / $scheme://www.$host$request_uri permanent; ## Forcibly prepend a www\\n}\\n\\nserver {\\n  listen 173.255.219.235:443;\\n  server_name website.com.au;\\n  rewrite / $scheme://www.$host$request_uri permanent; ## Forcibly prepend a www\\n}\\n\\nserver {\\n\\n  listen      173.255.219.235:80;\\n  server_name www.website.com.au;\\n\\n\\n\\n  root        /data/www;\\n  index       index.html index.php;\\n\\n  location / {\\n    index index.html index.php;     ## Allow a static html file to be shown first\\n    try_files $uri $uri/ @handler;  ## If missing pass the URI to Magento's front handler\\n    expires 30d;                    ## Assume all files are cachable\\n  }\\n\\n  ## These locations would be hidden by .htaccess normally\\n  location /app/                { deny all; }\\n  location /includes/           { deny all; }\\n  location /lib/                { deny all; }\\n  location /media/downloadable/ { deny all; }\\n  location /pkginfo/            { deny all; }\\n  location /report/config.xml   { deny all; }\\n  location /var/                { deny all; }\\n\\n  location /var/export/ { ## Allow admins only to view export folder\\n    auth_basic           \\\"Restricted\\\"; ## Message shown in login window\\n    auth_basic_user_file /rs/passwords/testfile; ## See /etc/nginx/htpassword\\n    autoindex            on;\\n  }\\n\\n  location  /. { ## Disable .htaccess and other hidden files\\n    return 404;\\n  }\\n\\n  location @handler { ## Magento uses a common front handler\\n    rewrite / /index.php;\\n  }\\n\\n  location ~ .php/ { ## Forward paths like /js/index.php/x.js to relevant handler\\n    rewrite ^/(.*.php)/ /$1 last;\\n  }\\n\\n  location ~ \\\\.php$ {\\n    if (!-e $request_filename) { rewrite / /index.php last; } ## Catch 404s that try_files miss\\n\\n    fastcgi_pass   127.0.0.1:9000;\\n    fastcgi_index  index.php;\\n    fastcgi_param PATH_INFO $fastcgi_script_name;\\n    fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\\n    include        /rs/confs/nginx/fastcgi_params;\\n  }\\n\\n}\\n\\n\\nserver {\\n\\n  listen              173.255.219.235:443;\\n  server_name         website.com.au www.website.com.au;\\n\\n  root   /data/www;\\n  index index.html index.php;\\n\\n  ssl                 on;\\n  ssl_certificate     /rs/ssl/ssl.crt;\\n  ssl_certificate_key /rs/ssl/ssl.key;\\n\\n  ssl_session_timeout  5m;\\n\\n  ssl_protocols  SSLv2 SSLv3 TLSv1;\\n  ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\\n  ssl_prefer_server_ciphers   on;\\n\\n\\n\\n  location / {\\n    index index.html index.php; ## Allow a static html file to be shown first\\n    try_files $uri $uri/ @handler; ## If missing pass the URI to Magento's front handler\\n    expires 30d; ## Assume all files are cachable\\n  }\\n\\n  ## These locations would be hidden by .htaccess normally\\n  location /app/                { deny all; }\\n  location /includes/           { deny all; }\\n  location /lib/                { deny all; }\\n  location /media/downloadable/ { deny all; }\\n  location /pkginfo/            { deny all; }\\n  location /report/config.xml   { deny all; }\\n  location /var/                { deny all; }\\n\\n  location /var/export/ { ## Allow admins only to view export folder\\n    auth_basic           \\\"Restricted\\\"; ## Message shown in login window\\n    auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword\\n    autoindex            on;\\n  }\\n\\n  location  /. { ## Disable .htaccess and other hidden files\\n    return 404;\\n  }\\n\\n  location @handler { ## Magento uses a common front handler\\n    rewrite / /index.php;\\n  }\\n\\n  location ~ .php/ { ## Forward paths like /js/index.php/x.js to relevant handler\\n    rewrite ^/(.*.php)/ /$1 last;\\n  }\\n\\n  location ~ .php$ { ## Execute PHP scripts\\n    if (!-e $request_filename) { rewrite  /index.php last; } ## Catch 404s that try_files miss\\n\\n    fastcgi_pass 127.0.0.1:9000;\\n    fastcgi_index  index.php;\\n    fastcgi_param PATH_INFO $fastcgi_script_name;\\n    fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\\n    include        /rs/confs/nginx/fastcgi_params;\\n\\n    fastcgi_param HTTPS on;\\n  }\\n\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"; This is a comment\\n!ifdef ERROR\\n    !error \\\"Something went wrong\\\"\\n!endif\\n\\nOutFile \\\"demo.exe\\\"\\nRequestExecutionLevel user\\nSetDetailsPrint listonly\\n\\n!include \\\"LogicLib.nsh\\\"\\n!include \\\"WinVer.nsh\\\"\\n\\nSection -mandatory\\n\\n    Call logWinVer\\n\\n    ${If} 1 > 0\\n      MessageBox MB_OK \\\"Hello world\\\"\\n    ${EndIf}\\n\\nSectionEnd\\n\\nFunction logWinVer\\n\\n    ${If} ${IsWin10}\\n        DetailPrint \\\"Windows 10!\\\"\\n    ${ElseIf} ${AtLeastWinVista}\\n        DetailPrint \\\"We're post-XP\\\"\\n    ${Else}\\n        DetailPrint \\\"Legacy system\\\"\\n    ${EndIf}\\n\\nFunctionEnd\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"    \\n<http://Sub1>     <http://pred1>     <http://obj> .\\n<http://Sub2>     <http://pred2#an2> \\\"literal 1\\\" .\\n<http://Sub3#an3> <http://pred3>     _:bnode3 .\\n_:bnode4          <http://pred4>     \\\"literal 2\\\"@lang .\\n_:bnode5          <http://pred5>     \\\"literal 3\\\"^^<http://type> .\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"%numbers\\n[1234 1234i 1234j]\\n[.234 .234j 2.23i]\\n[23e2 12E1j 123D-4 0x234]\\n\\n%strings\\n'asda''a'\\n\\\"asda\\\"\\\"a\\\"\\n\\n%identifiers\\na + as123 - __asd__\\n\\n%operators\\n-\\n+\\n=\\n==\\n>\\n<\\n>=\\n<=\\n&\\n~\\n...\\nbreak zeros default margin round ones rand\\nceil floor size clear zeros eye mean std cov\\nerror eval function\\nabs acos atan asin cos cosh exp log prod sum\\nlog10 max min sign sin sinh sqrt tan reshape\\nreturn\\ncase switch\\nelse elseif end if otherwise\\ndo for while\\ntry catch\\nclassdef properties events methods\\nglobal persistent\\n\\n%one line comment\\n%{ multi \\nline comment %}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"declare\\nfun {Ints N Max}\\n  if N == Max then nil\\n  else\\n    {Delay 1000}\\n    N|{Ints N+1 Max}\\n  end\\nend\\n\\nfun {Sum S Stream}\\n  case Stream of nil then S\\n  [] H|T then S|{Sum H+S T} end\\nend\\n\\nlocal X Y in\\n  thread X = {Ints 0 1000} end\\n  thread Y = {Sum 0 X} end\\n  {Browse Y}\\nend\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"(* Example Pascal code *)\\n\\nwhile a <> b do writeln('Waiting');\\n \\nif a > b then \\n  writeln('Condition met')\\nelse \\n  writeln('Condition not met');\\n \\nfor i := 1 to 10 do \\n  writeln('Iteration: ', i:1);\\n \\nrepeat\\n  a := a + 1\\nuntil a = 10;\\n \\ncase i of\\n  0: write('zero');\\n  1: write('one');\\n  2: write('two')\\nend;\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/*\\n * Classic example grammar, which recognizes simple arithmetic expressions like\\n * \\\"2*(3+4)\\\". The parser generated from this grammar then computes their value.\\n */\\n\\nstart\\n  = additive\\n\\nadditive\\n  = left:multiplicative \\\"+\\\" right:additive { return left + right; }\\n  / multiplicative\\n\\nmultiplicative\\n  = left:primary \\\"*\\\" right:multiplicative { return left * right; }\\n  / primary\\n\\nprimary\\n  = integer\\n  / \\\"(\\\" additive:additive \\\")\\\" { return additive; }\\n\\ninteger \\\"integer\\\"\\n  = digits:[0-9]+ { return parseInt(digits.join(\\\"\\\"), 10); }\\n\\nletter = [a-z]+\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"#!/usr/bin/perl\\n\\nuse Something qw(func1 func2);\\n\\n# strings\\nmy $s1 = qq'single line';\\nour $s2 = q(multi-\\n              line);\\n\\n=item Something\\n  Example.\\n=cut\\n\\nmy $html=<<'HTML'\\n<html>\\n<title>hi!</title>\\n</html>\\nHTML\\n\\nprint \\\"first,\\\".join(',', 'second', qq~third~);\\n\\nif($s1 =~ m[(?<!\\\\s)(l.ne)\\\\z]o) {\\n  $h->{$1}=$$.' predefined variables';\\n  $s2 =~ s/\\\\-line//ox;\\n  $s1 =~ s[\\n      line ]\\n    [\\n      block\\n    ]ox;\\n}\\n\\n1; # numbers and comments\\n\\n__END__\\nsomething...\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<?php\\n$a = array('a' => 1, 'b' => 2, 3 => 'c');\\n\\necho \\\"$a[a] ${a[3] /* } comment */} {$a[b]} \\\\$a[a]\\\";\\n\\nfunction hello($who) {\\n  return \\\"Hello $who!\\\";\\n}\\n?>\\n<p>The program says <?= hello(\\\"World\\\") ?>.</p>\\n<script>\\n  alert(\\\"And here is some JS code\\\"); // also colored\\n</script>\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"-----BEGIN PGP MESSAGE-----\\nVersion: OpenPrivacy 0.99\\n\\nyDgBO22WxBHv7O8X7O/jygAEzol56iUKiXmV+XmpCtmpqQUKiQrFqclFqUDBovzS\\nvBSFjNSiVHsuAA==\\n=njUN\\n-----END PGP MESSAGE-----\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# Number Literals\\n0 12345\\n12kb 12mb 12gB 12Tb 12PB 12L 12D 12lkb 12dtb\\n1.234 1.234e56 1. 1.e2 .2 .2e34\\n1.2MB 1.kb .1dTb 1.e1gb\\n0x1 0xabcdef 0x3tb 0xelmb\\n\\n# String Literals\\n'Literal escaping'''\\n'Literal $variable'\\n\\\"Escaping 1`\\\"\\\"\\n\\\"Escaping 2\\\"\\\"\\\"\\n\\\"Escaped `$variable\\\"\\n\\\"Text, $variable and more text\\\"\\n\\\"Text, ${variable with spaces} and more text.\\\"\\n\\\"Text, $($expression + 3) and more text.\\\"\\n\\\"Text, $(\\\"interpolation \\\\$(\\\"inception\\\")\\\") and more text.\\\"\\n\\n@\\\"\\nMultiline\\nstring\\n\\\"@\\n# --\\n@\\\"\\nMultiline\\nstring with quotes \\\"'\\n\\\"@\\n# --\\n@'\\nMultiline literal\\nstring with quotes \\\"'\\n'@\\n\\n# Array and Hash literals\\n@('a', 'b', 'c')\\n@{ 'key': 'value' }\\n\\n# Variables\\n$Variable = 5\\n$global: variable = 5\\n${ Variable with spaces} = 5\\n\\n# Operators\\n  = += -= *= /= %=\\n++ -- .. - f * / % + -\\n  - not! - bnot\\n  - split - isplit - csplit\\n  - join\\n  - is - isnot - as\\n  - eq - ieq - ceq - ne - ine - cne\\n  - gt - igt - cgt - ge - ige - cge\\n  - lt - ilt - clt - le - ile - cle\\n  - like - ilike - clike - notlike - inotlike - cnotlike\\n  - match - imatch - cmatch - notmatch - inotmatch - cnotmatch\\n  - contains - icontains - ccontains - notcontains - inotcontains - cnotcontains\\n  - replace - ireplace - creplace\\n  - band - bor - bxor\\n  - and - or - xor\\n\\n# Punctuation\\n  ()[] { } , : ` = ; .\\n\\n# Keywords\\nelseif begin function for foreach return else trap while do data dynamicparam\\nuntil end break if throw param continue finally in switch exit filter from try\\nprocess catch\\n\\n# Built-in variables\\n$$ $? $^ $_\\n$args $ConfirmPreference $ConsoleFileName $DebugPreference $Error\\n$ErrorActionPreference $ErrorView $ExecutionContext $false $FormatEnumerationLimit\\n$HOME $Host $input $MaximumAliasCount $MaximumDriveCount $MaximumErrorCount\\n$MaximumFunctionCount $MaximumHistoryCount $MaximumVariableCount $MyInvocation\\n$NestedPromptLevel $null $OutputEncoding $PID $PROFILE $ProgressPreference\\n$PSBoundParameters $PSCommandPath $PSCulture $PSDefaultParameterValues\\n$PSEmailServer $PSHOME $PSScriptRoot $PSSessionApplicationName\\n$PSSessionConfigurationName $PSSessionOption $PSUICulture $PSVersionTable $PWD\\n$ShellId $StackTrace $true $VerbosePreference $WarningPreference $WhatIfPreference\\n$true $false $null\\n\\n# Built-in functions\\nA:\\nAdd-Computer Add-Content Add-History Add-Member Add-PSSnapin Add-Type\\nB:\\nC:\\nCheckpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item\\nClear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession\\nConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData\\nConvert-Path ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString\\nConvertTo-Xml Copy-Item Copy-ItemProperty\\nD:\\nDebug-Process Disable-ComputerRestore Disable-PSBreakpoint Disable-PSRemoting\\nDisable-PSSessionConfiguration Disconnect-PSSession\\nE:\\nEnable-ComputerRestore Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration\\nEnter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter\\nExport-Csv Export-FormatData Export-ModuleMember Export-PSSession\\nF:\\nForEach-Object Format-Custom Format-List Format-Table Format-Wide\\nG:\\nGet-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint\\nGet-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date\\nGet-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Help\\nGet-History Get-Host Get-HotFix Get-Item Get-ItemProperty Get-Job Get-Location Get-Member\\nGet-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive\\nGet-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-Service\\nGet-TraceSource Get-Transaction Get-TypeData Get-UICulture  Get-Unique Get-Variable Get-Verb\\nGet-WinEvent Get-WmiObject Group-Object\\nH:\\nhelp\\nI:\\nImport-Alias Import-Clixml Import-Counter Import-Csv Import-LocalizedData Import-Module\\nImport-PSSession ImportSystemModules Invoke-Command Invoke-Expression Invoke-History\\nInvoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod\\nJ:\\nJoin-Path\\nK:\\nL:\\nLimit-EventLog\\nM:\\nMeasure-Command Measure-Object mkdir more Move-Item Move-ItemProperty\\nN:\\nNew-Alias New-Event New-EventLog New-Item New-ItemProperty New-Module New-ModuleManifest\\nNew-Object New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption\\nNew-PSTransportOption New-Service New-TimeSpan New-Variable New-WebServiceProxy\\nNew-WinEvent\\nO:\\noss Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String\\nP:\\nPause Pop-Location prompt Push-Location\\nQ:\\nR:\\nRead-Host Receive-Job Receive-PSSession Register-EngineEvent Register-ObjectEvent\\nRegister-PSSessionConfiguration Register-WmiEvent Remove-Computer Remove-Event\\nRemove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-Module\\nRemove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData\\nRemove-Variable Remove-WmiObject Rename-Computer Rename-Item Rename-ItemProperty\\nReset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service\\nRestore-Computer Resume-Job Resume-Service\\nS:\\nSave-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias\\nSet-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item\\nSet-ItemProperty Set-Location Set-PSBreakpoint Set-PSDebug\\nSet-PSSessionConfiguration Set-Service Set-StrictMode Set-TraceSource Set-Variable\\nSet-WmiInstance Show-Command Show-ControlPanelItem Show-EventLog Sort-Object\\nSplit-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction\\nStart-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript\\nSuspend-Job Suspend-Service\\nT:\\nTabExpansion2 Tee-Object Test-ComputerSecureChannel Test-Connection\\nTest-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command\\nU:\\nUnblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration\\nUpdate-FormatData Update-Help Update-List Update-TypeData Use-Transaction\\nV:\\nW:\\nWait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog\\nWrite-Host Write-Output Write-Progress Write-Verbose Write-Warning\\nX:\\nY:\\nZ:\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# This is a properties file\\na.key = A value\\nanother.key = http://example.com\\n! Exclamation mark as comment\\nbut.not=Within ! A value # indeed\\n   # Spaces at the beginning of a line\\n   spaces.before.key=value\\nbackslash=Used for multi          line entries,          that's convenient.\\n# Unicode sequences\\nunicode.key=This is   Unicode\\nno.multiline=here\\n# Colons\\ncolons : can be used too\\n# Spaces\\nspaces\\\\ in\\\\ keys=Not very common...\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"package addressbook;\\n\\nmessage Address {\\n   required string street = 1;\\n   required string postCode = 2;\\n}\\n\\nmessage PhoneNumber {\\n   required string number = 1;\\n}\\n\\nmessage Person {\\n   optional int32 id = 1;\\n   required string name = 2;\\n   required string surname = 3;\\n   optional Address address = 4;\\n   repeated PhoneNumber phoneNumbers = 5;\\n   optional uint32 age = 6;\\n   repeated uint32 favouriteNumbers = 7;\\n   optional string license = 8;\\n   enum Gender {\\n      MALE = 0;\\n      FEMALE = 1;\\n   }\\n   optional Gender gender = 9;\\n   optional fixed64 lastUpdate = 10;\\n   required bool deleted = 11 [default = false];\\n}\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"doctype html\\n  html\\n    head\\n      title= \\\"Pug Templating CodeMirror Mode Example\\\"\\n      link(rel='stylesheet', href='/css/bootstrap.min.css')\\n      link(rel='stylesheet', href='/css/index.css')\\n      script(type='text/javascript', src='/js/jquery-1.9.1.min.js')\\n      script(type='text/javascript', src='/js/bootstrap.min.js')\\n    body\\n      div.header\\n        h1 Welcome to this Example\\n      div.spots\\n        if locals.spots\\n          each spot in spots\\n            div.spot.well\\n         div\\n           if spot.logo\\n             img.img-rounded.logo(src=spot.logo)\\n           else\\n             img.img-rounded.logo(src=\\\"img/placeholder.png\\\")\\n         h3\\n           a(href=spot.hash) ##{spot.hash}\\n           if spot.title\\n             span.title #{spot.title}\\n           if spot.desc\\n             div #{spot.desc}\\n        else\\n          h3 There are no spots currently available.\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# == Class: automysqlbackup\\n#\\n# Puppet module to install AutoMySQLBackup for periodic MySQL backups.\\n#\\n# class { 'automysqlbackup':\\n#   backup_dir => '/mnt/backups',\\n# }\\n#\\n\\nclass automysqlbackup (\\n  $bin_dir = $automysqlbackup::params::bin_dir,\\n  $etc_dir = $automysqlbackup::params::etc_dir,\\n  $backup_dir = $automysqlbackup::params::backup_dir,\\n  $install_multicore = undef,\\n  $config = {},\\n  $config_defaults = {},\\n) inherits automysqlbackup::params {\\n\\n# Ensure valid paths are assigned\\n  validate_absolute_path($bin_dir)\\n  validate_absolute_path($etc_dir)\\n  validate_absolute_path($backup_dir)\\n\\n# Create a subdirectory in /etc for config files\\n  file { $etc_dir:\\n    ensure => directory,\\n    owner => 'root',\\n    group => 'root',\\n    mode => '0750',\\n  }\\n\\n# Create an example backup file, useful for reference\\n  file { \\\"${etc_dir}/automysqlbackup.conf.example\\\":\\n    ensure => file,\\n    owner => 'root',\\n    group => 'root',\\n    mode => '0660',\\n    source => 'puppet:///modules/automysqlbackup/automysqlbackup.conf',\\n  }\\n\\n# Add files from the developer\\n  file { \\\"${etc_dir}/AMB_README\\\":\\n    ensure => file,\\n    source => 'puppet:///modules/automysqlbackup/AMB_README',\\n  }\\n  file { \\\"${etc_dir}/AMB_LICENSE\\\":\\n    ensure => file,\\n    source => 'puppet:///modules/automysqlbackup/AMB_LICENSE',\\n  }\\n\\n# Install the actual binary file\\n  file { \\\"${bin_dir}/automysqlbackup\\\":\\n    ensure => file,\\n    owner => 'root',\\n    group => 'root',\\n    mode => '0755',\\n    source => 'puppet:///modules/automysqlbackup/automysqlbackup',\\n  }\\n\\n# Create the base backup directory\\n  file { $backup_dir:\\n    ensure => directory,\\n    owner => 'root',\\n    group => 'root',\\n    mode => '0755',\\n  }\\n\\n# If you'd like to keep your config in hiera and pass it to this class\\n  if !empty($config) {\\n    create_resources('automysqlbackup::backup', $config, $config_defaults)\\n  }\\n\\n# If using RedHat family, must have the RPMforge repo's enabled\\n  if $install_multicore {\\n    package { ['pigz', 'pbzip2']: ensure => installed }\\n  }\\n\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# Literals\\n1234\\n0.0e101\\n.123\\n0b01010011100\\n0o01234567\\n0x0987654321abcdef\\n7\\n2147483647\\n3L\\n79228162514264337593543950336L\\n0x100000000L\\n79228162514264337593543950336\\n0xdeadbeef\\n3.14j\\n10.j\\n10j\\n.001j\\n1e100j\\n3.14e-10j\\n\\n\\n# String Literals\\n'For\\\\''\\n\\\"God\\\\\\\"\\\"\\n\\\"\\\"\\\"so loved\\nthe world\\\"\\\"\\\"\\n'''that he gave\\nhis only begotten\\\\' '''\\n'that whosoever believeth in him'\\n''\\n\\n# Identifiers\\n__a__\\na.b\\na.b.c\\n\\n#Unicode identifiers on Python3\\n# a = x\\\\ddot\\na\\u20D7 = x\\u0308\\n# a = v\\\\dot\\na\\u20D7 = v\\u0307\\n\\n#F\\\\vec = m \\\\cdot a\\\\vec\\nF\\u20D7 = m\\u2022a\\u20D7 \\n\\n# Operators\\n+ - * / % & | ^ ~ < >\\n== != <= >= <> << >> // **\\nand or not in is\\n\\n#infix matrix multiplication operator (PEP 465)\\nA @ B\\n\\n# Delimiters\\n() [] {} , : ` = ; @ .  # Note that @ and . require the proper context on Python 2.\\n+= -= *= /= %= &= |= ^=\\n//= >>= <<= **=\\n\\n# Keywords\\nas assert break class continue def del elif else except\\nfinally for from global if import lambda pass raise\\nreturn try while with yield\\n\\n# Python 2 Keywords (otherwise Identifiers)\\nexec print\\n\\n# Python 3 Keywords (otherwise Identifiers)\\nnonlocal\\n\\n# Types\\nbool classmethod complex dict enumerate float frozenset int list object\\nproperty reversed set slice staticmethod str super tuple type\\n\\n# Python 2 Types (otherwise Identifiers)\\nbasestring buffer file long unicode xrange\\n\\n# Python 3 Types (otherwise Identifiers)\\nbytearray bytes filter map memoryview open range zip\\n\\n# Some Example code\\nimport os\\nfrom package import ParentClass\\n\\n@nonsenseDecorator\\ndef doesNothing():\\n    pass\\n\\nclass ExampleClass(ParentClass):\\n    @staticmethod\\n    def example(inputStr):\\n        a = list(inputStr)\\n        a.reverse()\\n        return ''.join(a)\\n\\n    def __init__(self, mixin = 'Hello'):\\n        self.mixin = mixin\\n\\n# Python 3.6 f-strings (https://www.python.org/dev/peps/pep-0498/)\\nf'My name is {name}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.'\\nf'He said his name is {name!r}.'\\nf\\\"\\\"\\\"He said his name is {name!r}.\\\"\\\"\\\"\\nf'{\\\"quoted string\\\"}'\\nf'{{ {4*10} }}'\\nf'This is an error }'\\nf'This is ok }}'\\nfr'x={4*10}\\n'\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/ utilities to quickly load a csv file - for more exhaustive analysis of the csv contents see csvguess.q\\n/ 2009.09.20 - updated to match latest csvguess.q \\n\\n/ .csv.colhdrs[file] - return a list of colhdrs from file\\n/ info:.csv.info[file] - return a table of information about the file\\n/ columns are: \\n/ c - column name; ci - column index; t - load type; mw - max width; \\n/ dchar - distinct characters in values; rule - rule that caught the type\\n/ maybe - needs checking, _could_ be say a date, but perhaps just a float?\\n/ .csv.info0[file;onlycols] - like .csv.info except that it only analyses <onlycols>\\n/ example:\\n/ info:.csv.info0[file;(.csv.colhdrs file)like\\\"*price\\\"]\\n/ info:.csv.infolike[file;\\\"*price\\\"]\\n/ show delete from info where t=\\\" \\\"\\n/ .csv.data[file;info] - use the info from .csv.info to read the data\\n/ .csv.data10[file;info] - like .csv.data but only returns the first 10 rows\\n/ bulkload[file;info] - bulk loads file into table DATA (which must be already defined :: DATA:() )\\n/ .csv.read[file]/read10[file] - for when you don't care about checking/tweaking the <info> before reading \\n\\n\\\\d .csv\\nDELIM:\\\",\\\"\\nZAPHDRS:0b / lowercase and remove _ from colhdrs (junk characters are always removed)\\nWIDTHHDR:25000 / number of characters read to get the header\\nREADLINES:222 / number of lines read and used to guess the types\\nSYMMAXWIDTH:11 / character columns narrower than this are stored as symbols\\nSYMMAXGR:10 / max symbol granularity% before we give up and keep as a * string\\nFORCECHARWIDTH:30 / every field (of any type) with values this wide or more is forced to character \\\"*\\\"\\nDISCARDEMPTY:0b / completely ignore empty columns if true else set them to \\\"C\\\"\\nCHUNKSIZE:50000000 / used in fs2 (modified .Q.fs)\\n\\nk)nameltrim:{$[~@x;.z.s'x;~(*x)in aA:.Q.a,.Q.A;(+/&\\\\~x in aA)_x;x]}\\nk)fs2:{[f;s]((-7!s)>){[f;s;x]i:1+last@&0xa=r:1:(s;x;CHUNKSIZE);f@`\\\\:i#r;x+i}[f;s]/0j}\\ncleanhdrs:{{$[ZAPHDRS;lower x except\\\"_\\\";x]}x where x in DELIM,.Q.an}\\ncancast:{nw:x$\\\"\\\";if[not x in\\\"BXCS\\\";nw:(min 0#;max 0#;::)@\\\\:nw];$[not any nw in x$(11&count y)#y;$[11<count y;not any nw in x$y;1b];0b]}\\n\\nread:{[file]data[file;info[file]]}  \\nread10:{[file]data10[file;info[file]]}  \\n\\ncolhdrs:{[file]\\n  `$nameltrim DELIM vs cleanhdrs first read0(file;0;1+first where 0xa=read1(file;0;WIDTHHDR))}\\ndata:{[file;info]\\n  (exec c from info where not t=\\\" \\\")xcol(exec t from info;enlist DELIM)0:file}\\ndata10:{[file;info]\\n  data[;info](file;0;1+last 11#where 0xa=read1(file;0;15*WIDTHHDR))}\\ninfo0:{[file;onlycols]\\n  colhdrs:`$nameltrim DELIM vs cleanhdrs first head:read0(file;0;1+last where 0xa=read1(file;0;WIDTHHDR));\\n  loadfmts:(count colhdrs)#\\\"S\\\";if[count onlycols;loadfmts[where not colhdrs in onlycols]:\\\"C\\\"];\\n  breaks:where 0xa=read1(file;0;floor(10+READLINES)*WIDTHHDR%count head);\\n  nas:count as:colhdrs xcol(loadfmts;enlist DELIM)0:(file;0;1+last((1+READLINES)&count breaks)#breaks);\\n  info:([]c:key flip as;v:value flip as);as:();\\n  reserved:key`.q;reserved,:.Q.res;reserved,:`i;\\n  info:update res:c in reserved from info;\\n  info:update ci:i,t:\\\"?\\\",ipa:0b,mdot:0,mw:0,rule:0,gr:0,ndv:0,maybe:0b,empty:0b,j10:0b,j12:0b from info;\\n  info:update ci:`s#ci from info;\\n  if[count onlycols;info:update t:\\\" \\\",rule:10 from info where not c in onlycols];\\n  info:update sdv:{string(distinct x)except`}peach v from info; \\n  info:update ndv:count each sdv from info;\\n  info:update gr:floor 0.5+100*ndv%nas,mw:{max count each x}peach sdv from info where 0<ndv;\\n  info:update t:\\\"*\\\",rule:20 from info where mw>.csv.FORCECHARWIDTH; / long values\\n  info:update t:\\\"C \\\"[.csv.DISCARDEMPTY],rule:30,empty:1b from info where t=\\\"?\\\",mw=0; / empty columns\\n  info:update dchar:{asc distinct raze x}peach sdv from info where t=\\\"?\\\";\\n  info:update mdot:{max sum each\\\".\\\"=x}peach sdv from info where t=\\\"?\\\",{\\\".\\\"in x}each dchar;\\n  info:update t:\\\"n\\\",rule:40 from info where t=\\\"?\\\",{any x in\\\"0123456789\\\"}each dchar; / vaguely numeric..\\n  info:update t:\\\"I\\\",rule:50,ipa:1b from info where t=\\\"n\\\",mw within 7 15,mdot=3,{all x in\\\".0123456789\\\"}each dchar,.csv.cancast[\\\"I\\\"]peach sdv; / ip-address\\n  info:update t:\\\"J\\\",rule:60 from info where t=\\\"n\\\",mdot=0,{all x in\\\"+-0123456789\\\"}each dchar,.csv.cancast[\\\"J\\\"]peach sdv;\\n  info:update t:\\\"I\\\",rule:70 from info where t=\\\"J\\\",mw<12,.csv.cancast[\\\"I\\\"]peach sdv;\\n  info:update t:\\\"H\\\",rule:80 from info where t=\\\"I\\\",mw<7,.csv.cancast[\\\"H\\\"]peach sdv;\\n  info:update t:\\\"F\\\",rule:90 from info where t=\\\"n\\\",mdot<2,mw>1,.csv.cancast[\\\"F\\\"]peach sdv;\\n  info:update t:\\\"E\\\",rule:100,maybe:1b from info where t=\\\"F\\\",mw<9;\\n  info:update t:\\\"M\\\",rule:110,maybe:1b from info where t in\\\"nIHEF\\\",mdot<2,mw within 4 7,.csv.cancast[\\\"M\\\"]peach sdv; \\n  info:update t:\\\"D\\\",rule:120,maybe:1b from info where t in\\\"nI\\\",mdot in 0 2,mw within 6 11,.csv.cancast[\\\"D\\\"]peach sdv; \\n  info:update t:\\\"V\\\",rule:130,maybe:1b from info where t=\\\"I\\\",mw in 5 6,7<count each dchar,{all x like\\\"*[0-9][0-5][0-9][0-5][0-9]\\\"}peach sdv,.csv.cancast[\\\"V\\\"]peach sdv; / 235959 12345        \\n  info:update t:\\\"U\\\",rule:140,maybe:1b from info where t=\\\"H\\\",mw in 3 4,7<count each dchar,{all x like\\\"*[0-9][0-5][0-9]\\\"}peach sdv,.csv.cancast[\\\"U\\\"]peach sdv; /2359\\n  info:update t:\\\"U\\\",rule:150,maybe:0b from info where t=\\\"n\\\",mw in 4 5,mdot=0,{all x like\\\"*[0-9]:[0-5][0-9]\\\"}peach sdv,.csv.cancast[\\\"U\\\"]peach sdv;\\n  info:update t:\\\"T\\\",rule:160,maybe:0b from info where t=\\\"n\\\",mw within 7 12,mdot<2,{all x like\\\"*[0-9]:[0-5][0-9]:[0-5][0-9]*\\\"}peach sdv,.csv.cancast[\\\"T\\\"]peach sdv;\\n  info:update t:\\\"V\\\",rule:170,maybe:0b from info where t=\\\"T\\\",mw in 7 8,mdot=0,.csv.cancast[\\\"V\\\"]peach sdv;\\n  info:update t:\\\"T\\\",rule:180,maybe:1b from info where t in\\\"EF\\\",mw within 7 10,mdot=1,{all x like\\\"*[0-9][0-5][0-9][0-5][0-9].*\\\"}peach sdv,.csv.cancast[\\\"T\\\"]peach sdv;\\n  info:update t:\\\"Z\\\",rule:190,maybe:0b from info where t=\\\"n\\\",mw within 11 24,mdot<4,.csv.cancast[\\\"Z\\\"]peach sdv;\\n  info:update t:\\\"P\\\",rule:200,maybe:1b from info where t=\\\"n\\\",mw within 12 29,mdot<4,{all x like\\\"[12]*\\\"}peach sdv,.csv.cancast[\\\"P\\\"]peach sdv;\\n  info:update t:\\\"N\\\",rule:210,maybe:1b from info where t=\\\"n\\\",mw within 3 28,mdot=1,.csv.cancast[\\\"N\\\"]peach sdv;\\n  info:update t:\\\"?\\\",rule:220,maybe:0b from info where t=\\\"n\\\"; / reset remaining maybe numeric\\n  info:update t:\\\"C\\\",rule:230,maybe:0b from info where t=\\\"?\\\",mw=1; / char\\n  info:update t:\\\"B\\\",rule:240,maybe:0b from info where t in\\\"HC\\\",mw=1,mdot=0,{$[all x in\\\"01tTfFyYnN\\\";(any\\\"0fFnN\\\"in x)and any\\\"1tTyY\\\"in x;0b]}each dchar; / boolean\\n  info:update t:\\\"B\\\",rule:250,maybe:1b from info where t in\\\"HC\\\",mw=1,mdot=0,{all x in\\\"01tTfFyYnN\\\"}each dchar; / boolean\\n  info:update t:\\\"X\\\",rule:260,maybe:0b from info where t=\\\"?\\\",mw=2,{$[all x in\\\"0123456789abcdefABCDEF\\\";(any .Q.n in x)and any\\\"abcdefABCDEF\\\"in x;0b]}each dchar; /hex\\n  info:update t:\\\"S\\\",rule:270,maybe:1b from info where t=\\\"?\\\",mw<.csv.SYMMAXWIDTH,mw>1,gr<.csv.SYMMAXGR; / symbols (max width permitting)\\n  info:update t:\\\"*\\\",rule:280,maybe:0b from info where t=\\\"?\\\"; / the rest as strings\\n  / flag those S/* columns which could be encoded to integers (.Q.j10/x10/j12/x12) to avoid symbols\\n  info:update j12:1b from info where t in\\\"S*\\\",mw<13,{all x in .Q.nA}each dchar;\\n  info:update j10:1b from info where t in\\\"S*\\\",mw<11,{all x in .Q.b6}each dchar; \\n  select c,ci,t,maybe,empty,res,j10,j12,ipa,mw,mdot,rule,gr,ndv,dchar from info}\\ninfo:info0[;()] / by default don't restrict columns\\ninfolike:{[file;pattern] info0[file;{x where x like y}[lower colhdrs[file];pattern]]} / .csv.infolike[file;\\\"*time\\\"]\\n\\n\\\\d .\\n/ DATA:()\\nbulkload:{[file;info]\\n  if[not`DATA in system\\\"v\\\";'`DATA.not.defined];\\n  if[count DATA;'`DATA.not.empty];\\n  loadhdrs:exec c from info where not t=\\\" \\\";loadfmts:exec t from info;\\n  .csv.fs2[{[file;loadhdrs;loadfmts] `DATA insert $[count DATA;flip loadhdrs!(loadfmts;.csv.DELIM)0:file;loadhdrs xcol(loadfmts;enlist .csv.DELIM)0:file]}[file;loadhdrs;loadfmts]];\\n  count DATA}\\n@[.:;\\\"\\\\l csvutil.custom.q\\\";::]; / save your custom settings in csvutil.custom.q to override those set at the beginning of the file \\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"X <- list(height = 5.4, weight = 54)\\ncat(\\\"Printing objects: \\\"); print(X)\\nprint(\\\"Accessing individual elements:\\\")\\ncat(sprintf(\\\"Your height is %s and your weight is %s\\n\\\", X$height, X$weight))\\n\\n# Functions:\\nsquare <- function(x) {\\n  return(x * x)\\n}\\ncat(sprintf(\\\"The square of 3 is %s\\n\\\", square(3)))\\n\\n# In R, the last expression in a function is, by default, what is\\n# returned. The idiomatic way to write the function is:\\nsquare <- function(x) {\\n  x * x\\n}\\n# or, for functions with short content:\\nsquare <- function(x) x * x\\n\\n# Function arguments with default values:\\ncube <- function(x = 5) x * x * x\\ncat(sprintf(\\\"Calling cube with 2 : %s\\n\\\", cube(2))  # will give 2^3\\ncat(sprintf(\\\"Calling cube        : %s\\n\\\", cube())   # will default to 5^3.\\n\\npowers <- function(x) list(x2 = x*x, x3 = x*x*x, x4 = x*x*x*x)\\n\\ncat(\\\"Powers of 3: \\\"); print(powers(3))\\n\\n# Data frames\\ndf <- data.frame(letters = letters[1:5], '#letter' = 1:5)\\nprint(df$letters)\\nprint(df$`#letter`)\\n\\n# Operators:\\nm1 <- matrix(1:6, 2, 3)\\nm2 <- m1 %*% t(m1)\\ncat(\\\"Matrix product: \\\"); print(m2)\\n\\n# Assignments:\\na <- 1\\nb <<- 2\\nc = 3\\n4 -> d\\n5 ->> e\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"-------------------------------------------------------------------\\nTue Oct 18 13:58:40 UTC 2011 - misterx@example.com\\n\\n- Update to r60.3\\n- Fixes bug in the reflect package\\n  * disallow Interface method on Value obtained via unexported name\\n\\n-------------------------------------------------------------------\\nThu Oct  6 08:14:24 UTC 2011 - misterx@example.com\\n\\n- Update to r60.2\\n- Fixes memory leak in certain map types\\n\\n-------------------------------------------------------------------\\nWed Oct  5 14:34:10 UTC 2011 - misterx@example.com\\n\\n- Tweaks for gdb debugging\\n- go.spec changes:\\n  - move %go_arch definition to %prep section\\n  - pass correct location of go specific gdb pretty printer and\\n    functions to cpp as HOST_EXTRA_CFLAGS macro\\n  - install go gdb functions & printer\\n- gdb-printer.patch\\n  - patch linker (src/cmd/ld/dwarf.c) to emit correct location of go\\n    gdb functions and pretty printer\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \".. This is an excerpt from Sphinx documentation: http://sphinx.pocoo.org/_sources/rest.txt\\n\\n.. highlightlang:: rest\\n\\n.. _rst-primer:\\n\\nreStructuredText Primer\\n=======================\\n\\nThis section is a brief introduction to reStructuredText (reST) concepts and\\nsyntax, intended to provide authors with enough information to author documents\\nproductively.  Since reST was designed to be a simple, unobtrusive markup\\nlanguage, this will not take too long.\\n\\n.. seealso::\\n\\n   The authoritative `reStructuredText User Documentation\\n   <http://docutils.sourceforge.net/rst.html>`_.  The \\\"ref\\\" links in this\\n   document link to the description of the individual constructs in the reST\\n   reference.\\n\\n\\nParagraphs\\n----------\\n\\nThe paragraph (:duref:`ref <paragraphs>`) is the most basic block in a reST\\ndocument.  Paragraphs are simply chunks of text separated by one or more blank\\nlines.  As in Python, indentation is significant in reST, so all lines of the\\nsame paragraph must be left-aligned to the same level of indentation.\\n\\n\\n.. _inlinemarkup:\\n\\nInline markup\\n-------------\\n\\nThe standard reST inline markup is quite simple: use\\n\\n* one asterisk: ``*text*`` for emphasis (italics),\\n* two asterisks: ``**text**`` for strong emphasis (boldface), and\\n* backquotes: ````text```` for code samples.\\n\\nIf asterisks or backquotes appear in running text and could be confused with\\ninline markup delimiters, they have to be escaped with a backslash.\\n\\nBe aware of some restrictions of this markup:\\n\\n* it may not be nested,\\n* content may not start or end with whitespace: ``* text*`` is wrong,\\n* it must be separated from surrounding text by non-word characters.  Use a\\n  backslash escaped space to work around that: ``thisis *one* word``.\\n\\nThese restrictions may be lifted in future versions of the docutils.\\n\\nreST also allows for custom \\\"interpreted text roles\\\"', which signify that the\\nenclosed text should be interpreted in a specific way.  Sphinx uses this to\\nprovide semantic markup and cross-referencing of identifiers, as described in\\nthe appropriate section.  The general syntax is ``:rolename:`content```.\\n\\nStandard reST provides the following roles:\\n\\n* :durole:`emphasis` -- alternate spelling for ``*emphasis*``\\n* :durole:`strong` -- alternate spelling for ``**strong**``\\n* :durole:`literal` -- alternate spelling for ````literal````\\n* :durole:`subscript` -- subscript text\\n* :durole:`superscript` -- superscript text\\n* :durole:`title-reference` -- for titles of books, periodicals, and other\\n  materials\\n\\nSee :ref:`inline-markup` for roles added by Sphinx.\\n\\n\\nLists and Quote-like blocks\\n---------------------------\\n\\nList markup (:duref:`ref <bullet-lists>`) is natural: just place an asterisk at\\nthe start of a paragraph and indent properly.  The same goes for numbered lists;\\nthey can also be autonumbered using a ``#`` sign::\\n\\n   * This is a bulleted list.\\n   * It has two items, the second\\n     item uses two lines.\\n\\n   1. This is a numbered list.\\n   2. It has two items too.\\n\\n   #. This is a numbered list.\\n   #. It has two items too.\\n\\n\\nNested lists are possible, but be aware that they must be separated from the\\nparent list items by blank lines::\\n\\n   * this is\\n   * a list\\n\\n     * with a nested list\\n     * and some subitems\\n\\n   * and here the parent list continues\\n\\nDefinition lists (:duref:`ref <definition-lists>`) are created as follows::\\n\\n   term (up to a line of text)\\n      Definition of the term, which must be indented\\n\\n      and can even consist of multiple paragraphs\\n\\n   next term\\n      Description.\\n\\nNote that the term cannot have more than one line of text.\\n\\nQuoted paragraphs (:duref:`ref <block-quotes>`) are created by just indenting\\nthem more than the surrounding paragraphs.\\n\\nLine blocks (:duref:`ref <line-blocks>`) are a way of preserving line breaks::\\n\\n   | These lines are\\n   | broken exactly like in\\n   | the source file.\\n\\nThere are also several more special blocks available:\\n\\n* field lists (:duref:`ref <field-lists>`)\\n* option lists (:duref:`ref <option-lists>`)\\n* quoted literal blocks (:duref:`ref <quoted-literal-blocks>`)\\n* doctest blocks (:duref:`ref <doctest-blocks>`)\\n\\n\\nSource Code\\n-----------\\n\\nLiteral code blocks (:duref:`ref <literal-blocks>`) are introduced by ending a\\nparagraph with the special marker ``::``.  The literal block must be indented\\n(and, like all paragraphs, separated from the surrounding ones by blank lines)::\\n\\n   This is a normal text paragraph. The next paragraph is a code sample::\\n\\n      It is not processed in any way, except\\n      that the indentation is removed.\\n\\n      It can span multiple lines.\\n\\n   This is a normal text paragraph again.\\n\\nThe handling of the ``::`` marker is smart:\\n\\n* If it occurs as a paragraph of its own, that paragraph is completely left\\n  out of the document.\\n* If it is preceded by whitespace, the marker is removed.\\n* If it is preceded by non-whitespace, the marker is replaced by a single\\n  colon.\\n\\nThat way, the second sentence in the above example's first paragraph would be\\nrendered as \\\"The next paragraph is a code sample:\\\".\\n\\n\\n.. _rst-tables:\\n\\nTables\\n------\\n\\nTwo forms of tables are supported.  For *grid tables* (:duref:`ref\\n<grid-tables>`), you have to \\\"paint\\\" the cell grid yourself.  They look like\\nthis::\\n\\n   +------------------------+------------+----------+----------+\\n   | Header row, column 1   | Header 2   | Header 3 | Header 4 |\\n   | (header rows optional) |            |          |          |\\n   +========================+============+==========+==========+\\n   | body row 1, column 1   | column 2   | column 3 | column 4 |\\n   +------------------------+------------+----------+----------+\\n   | body row 2             | ...        | ...      |          |\\n   +------------------------+------------+----------+----------+\\n\\n*Simple tables* (:duref:`ref <simple-tables>`) are easier to write, but\\nlimited: they must contain more than one row, and the first column cannot\\ncontain multiple lines.  They look like this::\\n\\n   =====  =====  =======\\n   A      B      A and B\\n   =====  =====  =======\\n   False  False  False\\n   True   False  False\\n   False  True   False\\n   True   True   True\\n   =====  =====  =======\\n\\n\\nHyperlinks\\n----------\\n\\nExternal links\\n^^^^^^^^^^^^^^\\n\\nUse ```Link text <http://example.com/>`_`` for inline web links.  If the link\\ntext should be the web address, you don't need special markup at all, the parser\\nfinds links and mail addresses in ordinary text.\\n\\nYou can also separate the link and the target definition (:duref:`ref\\n<hyperlink-targets>`), like this::\\n\\n   This is a paragraph that contains `a link`_.\\n\\n   .. _a link: http://example.com/\\n\\n\\nInternal links\\n^^^^^^^^^^^^^^\\n\\nInternal linking is done via a special reST role provided by Sphinx, see the\\nsection on specific markup, :ref:`ref-role`.\\n\\n\\nSections\\n--------\\n\\nSection headers (:duref:`ref <sections>`) are created by underlining (and\\noptionally overlining) the section title with a punctuation character, at least\\nas long as the text::\\n\\n   =================\\n   This is a heading\\n   =================\\n\\nNormally, there are no heading levels assigned to certain characters as the\\nstructure is determined from the succession of headings.  However, for the\\nPython documentation, this convention is used which you may follow:\\n\\n* ``#`` with overline, for parts\\n* ``*`` with overline, for chapters\\n* ``=``, for sections\\n* ``-``, for subsections\\n* ``^``, for subsubsections\\n* ``\\\"``, for paragraphs\\n\\nOf course, you are free to use your own marker characters (see the reST\\ndocumentation), and use a deeper nesting level, but keep in mind that most\\ntarget formats (HTML, LaTeX) have a limited supported nesting depth.\\n\\n\\nExplicit Markup\\n---------------\\n\\n\\\"Explicit markup\\\" (:duref:`ref <explicit-markup-blocks>`) is used in reST for\\nmost constructs that need special handling, such as footnotes,\\nspecially-highlighted paragraphs, comments, and generic directives.\\n\\nAn explicit markup block begins with a line starting with ``..`` followed by\\nwhitespace and is terminated by the next paragraph at the same level of\\nindentation.  (There needs to be a blank line between explicit markup and normal\\nparagraphs.  This may all sound a bit complicated, but it is intuitive enough\\nwhen you write it.)\\n\\n\\n.. _directives:\\n\\nDirectives\\n----------\\n\\nA directive (:duref:`ref <directives>`) is a generic block of explicit markup.\\nBesides roles, it is one of the extension mechanisms of reST, and Sphinx makes\\nheavy use of it.\\n\\nDocutils supports the following directives:\\n\\n* Admonitions: :dudir:`attention`, :dudir:`caution`, :dudir:`danger`,\\n  :dudir:`error`, :dudir:`hint`, :dudir:`important`, :dudir:`note`,\\n  :dudir:`tip`, :dudir:`warning` and the generic :dudir:`admonition`.\\n  (Most themes style only \\\"note\\\" and \\\"warning\\\" specially.)\\n\\n* Images:\\n\\n  - :dudir:`image` (see also Images_ below)\\n  - :dudir:`figure` (an image with caption and optional legend)\\n\\n* Additional body elements:\\n\\n  - :dudir:`contents` (a local, i.e. for the current file only, table of\\n    contents)\\n  - :dudir:`container` (a container with a custom class, useful to generate an\\n    outer ``<div>`` in HTML)\\n  - :dudir:`rubric` (a heading without relation to the document sectioning)\\n  - :dudir:`topic`, :dudir:`sidebar` (special highlighted body elements)\\n  - :dudir:`parsed-literal` (literal block that supports inline markup)\\n  - :dudir:`epigraph` (a block quote with optional attribution line)\\n  - :dudir:`highlights`, :dudir:`pull-quote` (block quotes with their own\\n    class attribute)\\n  - :dudir:`compound` (a compound paragraph)\\n\\n* Special tables:\\n\\n  - :dudir:`table` (a table with title)\\n  - :dudir:`csv-table` (a table generated from comma-separated values)\\n  - :dudir:`list-table` (a table generated from a list of lists)\\n\\n* Special directives:\\n\\n  - :dudir:`raw` (include raw target-format markup)\\n  - :dudir:`include` (include reStructuredText from another file)\\n    -- in Sphinx, when given an absolute include file path, this directive takes\\n    it as relative to the source directory\\n  - :dudir:`class` (assign a class attribute to the next element) [1]_\\n\\n* HTML specifics:\\n\\n  - :dudir:`meta` (generation of HTML ``<meta>`` tags)\\n  - :dudir:`title` (override document title)\\n\\n* Influencing markup:\\n\\n  - :dudir:`default-role` (set a new default role)\\n  - :dudir:`role` (create a new role)\\n\\n  Since these are only per-file, better use Sphinx' facilities for setting the\\n  :confval:`default_role`.\\n\\nDo *not* use the directives :dudir:`sectnum`, :dudir:`header` and\\n:dudir:`footer`.\\n\\nDirectives added by Sphinx are described in :ref:`sphinxmarkup`.\\n\\nBasically, a directive consists of a name, arguments, options and content. (Keep\\nthis terminology in mind, it is used in the next chapter describing custom\\ndirectives.)  Looking at this example, ::\\n\\n   .. function:: foo(x)\\n                 foo(y, z)\\n      :module: some.module.name\\n\\n      Return a line of text input from the user.\\n\\n``function`` is the directive name.  It is given two arguments here, the\\nremainder of the first line and the second line, as well as one option\\n``module`` (as you can see, options are given in the lines immediately following\\nthe arguments and indicated by the colons).  Options must be indented to the\\nsame level as the directive content.\\n\\nThe directive content follows after a blank line and is indented relative to the\\ndirective start.\\n\\n\\nImages\\n------\\n\\nreST supports an image directive (:dudir:`ref <image>`), used like so::\\n\\n   .. image:: gnu.png\\n      (options)\\n\\nWhen used within Sphinx, the file name given (here ``gnu.png``) must either be\\nrelative to the source file, or absolute which means that they are relative to\\nthe top source directory.  For example, the file ``sketch/spam.rst`` could refer\\nto the image ``images/spam.png`` as ``../images/spam.png`` or\\n``/images/spam.png``.\\n\\nSphinx will automatically copy image files over to a subdirectory of the output\\ndirectory on building (e.g. the ``_static`` directory for HTML output.)\\n\\nInterpretation of image size options (``width`` and ``height``) is as follows:\\nif the size has no unit or the unit is pixels, the given size will only be\\nrespected for output channels that support pixels (i.e. not in LaTeX output).\\nOther units (like ``pt`` for points) will be used for HTML and LaTeX output.\\n\\nSphinx extends the standard docutils behavior by allowing an asterisk for the\\nextension::\\n\\n   .. image:: gnu.*\\n\\nSphinx then searches for all images matching the provided pattern and determines\\ntheir type.  Each builder then chooses the best image out of these candidates.\\nFor instance, if the file name ``gnu.*`` was given and two files :file:`gnu.pdf`\\nand :file:`gnu.png` existed in the source tree, the LaTeX builder would choose\\nthe former, while the HTML builder would prefer the latter.\\n\\n.. versionchanged:: 0.4\\n   Added the support for file names ending in an asterisk.\\n\\n.. versionchanged:: 0.6\\n   Image paths can now be absolute.\\n\\n\\nFootnotes\\n---------\\n\\nFor footnotes (:duref:`ref <footnotes>`), use ``[#name]_`` to mark the footnote\\nlocation, and add the footnote body at the bottom of the document after a\\n\\\"Footnotes\\\" rubric heading, like so::\\n\\n   Lorem ipsum [#f1]_ dolor sit amet ... [#f2]_\\n\\n   .. rubric:: Footnotes\\n\\n   .. [#f1] Text of the first footnote.\\n   .. [#f2] Text of the second footnote.\\n\\nYou can also explicitly number the footnotes (``[1]_``) or use auto-numbered\\nfootnotes without names (``[#]_``).\\n\\n\\nCitations\\n---------\\n\\nStandard reST citations (:duref:`ref <citations>`) are supported, with the\\nadditional feature that they are \\\"global\\\", i.e. all citations can be referenced\\nfrom all files.  Use them like so::\\n\\n   Lorem ipsum [Ref]_ dolor sit amet.\\n\\n   .. [Ref] Book or article reference, URL or whatever.\\n\\nCitation usage is similar to footnote usage, but with a label that is not\\nnumeric or begins with ``#``.\\n\\n\\nSubstitutions\\n-------------\\n\\nreST supports \\\"substitutions\\\" (:duref:`ref <substitution-definitions>`), which\\nare pieces of text and/or markup referred to in the text by ``|name|``.  They\\nare defined like footnotes with explicit markup blocks, like this::\\n\\n   .. |name| replace:: replacement *text*\\n\\nor this::\\n\\n   .. |caution| image:: warning.png\\n                :alt: Warning!\\n\\nSee the :duref:`reST reference for substitutions <substitution-definitions>`\\nfor details.\\n\\nIf you want to use some substitutions for all documents, put them into\\n:confval:`rst_prolog` or put them into a separate file and include it into all\\ndocuments you want to use them in, using the :rst:dir:`include` directive.  (Be\\nsure to give the include file a file name extension differing from that of other\\nsource files, to avoid Sphinx finding it as a standalone document.)\\n\\nSphinx defines some default substitutions, see :ref:`default-substitutions`.\\n\\n\\nComments\\n--------\\n\\nEvery explicit markup block which isn't a valid markup construct (like the\\nfootnotes above) is regarded as a comment (:duref:`ref <comments>`).  For\\nexample::\\n\\n   .. This is a comment.\\n\\nYou can indent text after a comment start to form multiline comments::\\n\\n   ..\\n      This whole indented block\\n      is a comment.\\n\\n      Still in the comment.\\n\\n\\nSource encoding\\n---------------\\n\\nSince the easiest way to include special characters like em dashes or copyright\\nsigns in reST is to directly write them as Unicode characters, one has to\\nspecify an encoding.  Sphinx assumes source files to be encoded in UTF-8 by\\ndefault; you can change this with the :confval:`source_encoding` config value.\\n\\n\\nGotchas\\n-------\\n\\nThere are some problems one commonly runs into while authoring reST documents:\\n\\n* **Separation of inline markup:** As said above, inline markup spans must be\\n  separated from the surrounding text by non-word characters, you have to use a\\n  backslash-escaped space to get around that.  See `the reference\\n  <http://docutils.sf.net/docs/ref/rst/restructuredtext.html#inline-markup>`_\\n  for the details.\\n\\n* **No nested inline markup:** Something like ``*see :func:`foo`*`` is not\\n  possible.\\n\\n.. rubric:: Footnotes\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# Code from http://sandbox.mc.edu/~bennet/ruby/code/poly_rb.html\\n#\\n# This program evaluates polynomials.  It first asks for the coefficients\\n# of a polynomial, which must be entered on one line, highest-order first.\\n# It then requests values of x and will compute the value of the poly for\\n# each x.  It will repeatly ask for x values, unless you the user enters\\n# a blank line.  It that case, it will ask for another polynomial.  If the\\n# user types quit for either input, the program immediately exits.\\n#\\n\\n#\\n# Function to evaluate a polynomial at x.  The polynomial is given\\n# as a list of coefficients, from the greatest to the least.\\ndef polyval(x, coef)\\n    sum = 0\\n    coef = coef.clone           # Don't want to destroy the original\\n    while true\\n        sum += coef.shift       # Add and remove the next coef\\n        break if coef.empty?    # If no more, done entirely.\\n        sum *= x                # This happens the right number of times.\\n    end\\n    return sum\\nend\\n\\n#\\n# Function to read a line containing a list of integers and return\\n# them as an array of integers.  If the string conversion fails, it\\n# throws TypeError.  If the input line is the word 'quit', then it\\n# converts it to an end-of-file exception\\ndef readints(prompt)\\n    # Read a line\\n    print prompt\\n    line = readline.chomp\\n    raise EOFError.new if line == 'quit' # You can also use a real EOF.\\n            \\n    # Go through each item on the line, converting each one and adding it\\n    # to retval.\\n    retval = [ ]\\n    for str in line.split(/\\\\s+/)\\n        if str =~ /^\\\\-?\\\\d+$/\\n            retval.push(str.to_i)\\n        else\\n            raise TypeError.new\\n        end\\n    end\\n\\n    return retval\\nend\\n\\n#\\n# Take a coeff and an exponent and return the string representation, ignoring\\n# the sign of the coefficient.\\ndef term_to_str(coef, exp)\\n    ret = \\\"\\\"\\n\\n    # Show coeff, unless it's 1 or at the right\\n    coef = coef.abs\\n    ret = coef.to_s     unless coef == 1 && exp > 0\\n    ret += \\\"x\\\" if exp > 0                               # x if exponent not 0\\n    ret += \\\"^\\\" + exp.to_s if exp > 1                    # ^exponent, if > 1.\\n\\n    return ret\\nend\\n\\n#\\n# Create a string of the polynomial in sort-of-readable form.\\ndef polystr(p)\\n    # Get the exponent of first coefficient, plus 1.\\n    exp = p.length\\n\\n    # Assign exponents to each term, making pairs of coeff and exponent,\\n    # Then get rid of the zero terms.\\n    p = (p.map { |c| exp -= 1; [ c, exp ] }).select { |p| p[0] != 0 }\\n\\n    # If there's nothing left, it's a zero\\n    return \\\"0\\\" if p.empty?\\n\\n    # *** Now p is a non-empty list of [ coef, exponent ] pairs. ***\\n\\n    # Convert the first term, preceded by a \\\"-\\\" if it's negative.\\n    result = (if p[0][0] < 0 then \\\"-\\\" else \\\"\\\" end) + term_to_str(*p[0])\\n\\n    # Convert the rest of the terms, in each case adding the appropriate\\n    # + or - separating them.  \\n    for term in p[1...p.length]\\n        # Add the separator then the rep. of the term.\\n        result += (if term[0] < 0 then \\\" - \\\" else \\\" + \\\" end) + \\n                term_to_str(*term)\\n    end\\n\\n    return result\\nend\\n        \\n#\\n# Run until some kind of endfile.\\nbegin\\n    # Repeat until an exception or quit gets us out.\\n    while true\\n        # Read a poly until it works.  An EOF will except out of the\\n        # program.\\n        print \\\"\\n\\\"\\n        begin\\n            poly = readints(\\\"Enter a polynomial coefficients: \\\")\\n        rescue TypeError\\n            print \\\"Try again.\\n\\\"\\n            retry\\n        end\\n        break if poly.empty?\\n\\n        # Read and evaluate x values until the user types a blank line.\\n        # Again, an EOF will except out of the pgm.\\n        while true\\n            # Request an integer.\\n            print \\\"Enter x value or blank line: \\\"\\n            x = readline.chomp\\n            break if x == ''\\n            raise EOFError.new if x == 'quit'\\n\\n            # If it looks bad, let's try again.\\n            if x !~ /^\\\\-?\\\\d+$/\\n                print \\\"That doesn't look like an integer.  Please try again.\\n\\\"\\n                next\\n            end\\n\\n            # Convert to an integer and print the result.\\n            x = x.to_i\\n            print \\\"p(x) = \\\", polystr(poly), \\\"\\n\\\"\\n            print \\\"p(\\\", x, \\\") = \\\", polyval(x, poly), \\\"\\n\\\"\\n        end\\n    end\\nrescue EOFError\\n    print \\\"\\n=== EOF ===\\n\\\"\\nrescue Interrupt, SignalException\\n    print \\\"\\n=== Interrupted ===\\n\\\"\\nelse\\n    print \\\"--- Bye ---\\n\\\"\\nend\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// Demo code.\\n\\ntype foo<T> = int;\\nenum bar {\\n    some(int, foo<float>),\\n    none\\n}\\n\\nfn check_crate(x: int) {\\n    let v = 10;\\n    match foo {\\n        1 ... 3 {\\n            print_foo();\\n            if x {\\n                blah().to_string();\\n            }\\n        }\\n        (x, y) { \\\"bye\\\" }\\n        _ { \\\"hi\\\" }\\n    }\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"libname foo \\\"/tmp/foobar\\\";\\n%let count=1;\\n\\n/* Multi line\\nComment\\n*/\\ndata _null_;\\n    x=ranuni();\\n    * single comment;\\n    x2=x**2;\\n    sx=sqrt(x);\\n    if x=x2 then put \\\"x must be 1\\\";\\n    else do;\\n        put x=;\\n    end;\\nrun;\\n\\n/* embedded comment\\n* comment;\\n*/\\n\\nproc glm data=sashelp.class;\\n    class sex;\\n    model weight = height sex;\\nrun;\\n\\nproc sql;\\n    select count(*)\\n    from sashelp.class;\\n\\n    create table foo as\\n    select * from sashelp.class;\\n\\n    select *\\n    from foo;\\nquit;\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// Variable Definitions\\n\\n$page-width:    800px\\n$sidebar-width: 200px\\n$primary-color: #eeeeee\\n\\n// Global Attributes\\n\\nbody\\n  font:\\n    family: sans-serif\\n    size: 30em\\n    weight: bold\\n\\n// Scoped Styles\\n\\n#contents\\n  width: $page-width\\n  #sidebar\\n    float: right\\n    width: $sidebar-width\\n  #main\\n    width: $page-width - $sidebar-width\\n    background: $primary-color\\n    h2\\n      color: blue\\n\\n#footer\\n  height: 200px\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"; See if the input starts with a given symbol.\\n(define (match-symbol input pattern)\\n  (cond ((null? (remain input)) #f)\\n  ((eqv? (car (remain input)) pattern) (r-cdr input))\\n  (else #f)))\\n\\n; Allow the input to start with one of a list of patterns.\\n(define (match-or input pattern)\\n  (cond ((null? pattern) #f)\\n  ((match-pattern input (car pattern)))\\n  (else (match-or input (cdr pattern)))))\\n\\n; Allow a sequence of patterns.\\n(define (match-seq input pattern)\\n  (if (null? pattern)\\n      input\\n      (let ((match (match-pattern input (car pattern))))\\n  (if match (match-seq match (cdr pattern)) #f))))\\n\\n; Match with the pattern but no problem if it does not match.\\n(define (match-opt input pattern)\\n  (let ((match (match-pattern input (car pattern))))\\n    (if match match input)))\\n\\n; Match anything (other than '()), until pattern is found. The rather\\n; clumsy form of requiring an ending pattern is needed to decide where\\n; the end of the match is. If none is given, this will match the rest\\n; of the sentence.\\n(define (match-any input pattern)\\n  (cond ((null? (remain input)) #f)\\n  ((null? pattern) (f-cons (remain input) (clear-remain input)))\\n  (else\\n   (let ((accum-any (collector)))\\n     (define (match-pattern-any input pattern)\\n       (cond ((null? (remain input)) #f)\\n       (else (accum-any (car (remain input)))\\n       (cond ((match-pattern (r-cdr input) pattern))\\n             (else (match-pattern-any (r-cdr input) pattern))))))\\n     (let ((retval (match-pattern-any input (car pattern))))\\n       (if retval\\n     (f-cons (accum-any) retval)\\n     #f))))))\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"#!/bin/bash\\n\\n# clone the repository\\ngit clone http://github.com/garden/tree\\n\\n# generate HTTPS credentials\\ncd tree\\nopenssl genrsa -aes256 -out https.key 1024\\nopenssl req -new -nodes -key https.key -out https.csr\\nopenssl x509 -req -days 365 -in https.csr -signkey https.key -out https.crt\\ncp https.key{,.orig}\\nopenssl rsa -in https.key.orig -out https.key\\n\\n# start the server in HTTPS mode\\ncd web\\nsudo node ../server.js 443 'yes' >> ../node.log &\\n\\n# here is how to stop the server\\nfor pid in `ps aux | grep 'node ../server.js' | awk '{print $2}'` ; do\\n  sudo kill -9 $pid 2> /dev/null\\ndone\\n\\nexit 0\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"#\\n# Example Sieve Filter\\n# Declare any optional features or extension used by the script\\n#\\n\\nrequire [\\\"fileinto\\\", \\\"reject\\\"];\\n\\n#\\n# Reject any large messages (note that the four leading dots get\\n# \\\"stuffed\\\" to three)\\n#\\nif size :over 1M\\n{\\n  reject text:\\nPlease do not send me large attachments.\\nPut your file on a server and send me the URL.\\nThank you.\\n.... Fred\\n.\\n;\\n  stop;\\n}\\n\\n#\\n# Handle messages from known mailing lists\\n# Move messages from IETF filter discussion list to filter folder\\n#\\nif header :is \\\"Sender\\\" \\\"owner-ietf-mta-filters@imc.org\\\"\\n{\\n  fileinto \\\"filter\\\";  # move to \\\"filter\\\" folder\\n}\\n#\\n# Keep all messages to or from people in my company\\n#\\nelsif address :domain :is [\\\"From\\\", \\\"To\\\"] \\\"example.com\\\"\\n{\\n  keep;               # keep in \\\"In\\\" folder\\n}\\n\\n#\\n# Try and catch unsolicited email.  If a message is not to me,\\n# or it contains a subject known to be spam, file it away.\\n#\\nelsif anyof (not address :all :contains\\n               [\\\"To\\\", \\\"Cc\\\", \\\"Bcc\\\"] \\\"me@example.com\\\",\\n             header :matches \\\"subject\\\"\\n               [\\\"*make*money*fast*\\\", \\\"*university*dipl*mas*\\\"])\\n{\\n  # If message header does not contain my address,\\n  # it's from a list.\\n  fileinto \\\"spam\\\";   # move to \\\"spam\\\" folder\\n}\\nelse\\n{\\n  # Move all other (non-company) mail to \\\"personal\\\"\\n  # folder.\\n  fileinto \\\"personal\\\";\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"body\\n  table\\n    - for user in users\\n      td id=\\\"user_#{user.id}\\\" class=user.role\\n        a href=user_action(user, :edit) Edit #{user.name}\\n        a href=(path_to_user user) = user.name\\nbody\\n  h1(id=\\\"logo\\\") = page_logo\\n  h2[id=\\\"tagline\\\" class=\\\"small tagline\\\"] = page_tagline\\n\\nh2[id=\\\"tagline\\\"\\n   class=\\\"small tagline\\\"] = page_tagline\\n\\nh1 id = \\\"logo\\\" = page_logo\\nh2 [ id = \\\"tagline\\\" ] = page_tagline\\n\\n/ comment\\n  second line\\n/! html comment\\n   second line\\n<!-- html comment -->\\n<a href=\\\"#{'hello' if set}\\\">link</a>\\na.slim href=\\\"work\\\" disabled=false running==:atom Text <b>bold</b>\\n.clazz data-id=\\\"test\\\" == 'hello' unless quark\\n | Text mode #{12}\\n   Second line\\n= x ||= :ruby_atom\\n#menu.left\\n  - @env.each do |x|\\n    li: a = x\\n*@dyntag attr=\\\"val\\\"\\n.first *{:class => [:second, :third]} Text\\n.second class=[\\\"text\\\",\\\"more\\\"]\\n.third class=:text,:symbol\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"\\\" \\n    This is a test of the Smalltalk code\\n\\\"\\nSeaside.WAComponent subclass: #MyCounter [\\n    | count |\\n    MyCounter class >> canBeRoot [ ^true ]\\n\\n    initialize [\\n        super initialize.\\n        count := 0.\\n    ]\\n    states [ ^{ self } ]\\n    renderContentOn: html [\\n        html heading: count.\\n        html anchor callback: [ count := count + 1 ]; with: '++'.\\n        html space.\\n        html anchor callback: [ count := count - 1 ]; with: '--'.\\n    ]\\n]\\n\\nMyCounter registerAsApplication: 'mycounter'\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"{extends file=\\\"parent.tpl\\\"}\\n{include file=\\\"template.tpl\\\"}\\n\\n{* some example Smarty content *}\\n{if isset($name) && $name == 'Blog'}\\n  This is a {$var}.\\n  {$integer = 451}, {$array[] = \\\"a\\\"}, {$stringvar = \\\"string\\\"}\\n  {assign var='bob' value=$var.prop}\\n{elseif $name == $foo}\\n  {function name=menu level=0}\\n    {foreach $data as $entry}\\n      {if is_array($entry)}\\n        - {$entry@key}\\n        {menu data=$entry level=$level+1}\\n      {else}\\n        {$entry}\\n      {/if}\\n    {/foreach}\\n  {/function}\\n{/if}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"author:Camus\\n\\ntitle:\\\"The Rebel\\\" and author:Camus\\n\\nphilosophy:Existentialism -author:Kierkegaard\\n\\nhardToSpell:Dostoevsky~\\n\\npublished:[194* TO 1960] and author:(Sartre or \\\"Simone de Beauvoir\\\")\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"{namespace example}\\n\\n/**\\n * Says hello to the world.\\n */\\n{template .helloWorld}\\n  {@param name: string}\\n  {@param? score: number}\\n  Hello <b>{$name}</b>!\\n  <div>\\n    {if $score}\\n      <em>{$score} points</em>\\n    {else}\\n      no score\\n    {/if}\\n  </div>\\n{/template}\\n\\n{template .alertHelloWorld kind=\\\"js\\\"}\\n  alert('Hello World');\\n{/template}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"PREFIX a: <http://www.w3.org/2000/10/annotation-ns#>\\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\n\\n# Comment!\\n\\nSELECT ?given ?family\\nWHERE {\\n  {\\n    ?annot a:annotates <http://www.w3.org/TR/rdf-sparql-query/> .\\n    ?annot dc:creator ?c .\\n    OPTIONAL {?c foaf:givenName ?given ;\\n                 foaf:familyName ?family }\\n  } UNION {\\n    ?c !foaf:knows/foaf:knows? ?thing.\\n    ?thing rdfs\\n  } MINUS {\\n    ?thing rdfs:label \\\"\\u525B\\u67D4\\u6D41\\\"@jp\\n  }\\n  FILTER isBlank(?c)\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"=IF(A1:B2, TRUE, FALSE) / 100\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"-- SQL Mode for CodeMirror\\nSELECT SQL_NO_CACHE DISTINCT\\n    @var1 AS `val1`, @'val2', @global.'sql_mode',\\n    1.1 AS `float_val`, .14 AS `another_float`, 0.09e3 AS `int_with_esp`,\\n    0xFA5 AS `hex`, x'fa5' AS `hex2`, 0b101 AS `bin`, b'101' AS `bin2`,\\n    DATE '1994-01-01' AS `sql_date`, { T \\\"1994-01-01\\\" } AS `odbc_date`,\\n    'my string', _utf8'your string', N'her string',\\n        TRUE, FALSE, UNKNOWN\\n  FROM DUAL\\n  -- space needed after '--'\\n  # 1 line comment\\n  /* multiline\\n  comment! */\\n  LIMIT 1 OFFSET 0;\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"\\\\begin{module}[id=bbt-size]\\n\\\\importmodule[balanced-binary-trees]{balanced-binary-trees}\\n\\\\importmodule[\\\\KWARCslides{dmath/en/cardinality}]{cardinality}\\n\\n\\\\begin{frame}\\n  \\\\frametitle{Size Lemma for Balanced Trees}\\n  \\\\begin{itemize}\\n  \\\\item\\n    \\\\begin{assertion}[id=size-lemma,type=lemma] \\n    Let $G=\\\\tup{V,E}$ be a \\\\termref[cd=binary-trees]{balanced binary tree} \\n    of \\\\termref[cd=graph-depth,name=vertex-depth]{depth}$n>i$, then the set\\n     $\\\\defeq{\\\\livar{V}i}{\\\\setst{\\\\inset{v}{V}}{\\\\gdepth{v} = i}}$ of\\n    \\\\termref[cd=graphs-intro,name=node]{nodes} at \\n    \\\\termref[cd=graph-depth,name=vertex-depth]{depth} $i$ has\\n    \\\\termref[cd=cardinality,name=cardinality]{cardinality} $\\\\power2i$.\\n   \\\\end{assertion}\\n  \\\\item\\n    \\\\begin{sproof}[id=size-lemma-pf,proofend=,for=size-lemma]{via induction over the depth $i$.}\\n      \\\\begin{spfcases}{We have to consider two cases}\\n        \\\\begin{spfcase}{$i=0$}\\n          \\\\begin{spfstep}[display=flow]\\n            then $\\\\livar{V}i=\\\\set{\\\\livar{v}r}$, where $\\\\livar{v}r$ is the root, so\\n            $\\\\eq{\\\\card{\\\\livar{V}0},\\\\card{\\\\set{\\\\livar{v}r}},1,\\\\power20}$.\\n          \\\\end{spfstep}\\n        \\\\end{spfcase}\\n        \\\\begin{spfcase}{$i>0$}\\n          \\\\begin{spfstep}[display=flow]\\n           then $\\\\livar{V}{i-1}$ contains $\\\\power2{i-1}$ vertexes \\n           \\\\begin{justification}[method=byIH](IH)\\\\end{justification}\\n          \\\\end{spfstep}\\n          \\\\begin{spfstep}\\n           By the \\\\begin{justification}[method=byDef]definition of a binary\\n              tree\\\\end{justification}, each $\\\\inset{v}{\\\\livar{V}{i-1}}$ is a leaf or has\\n            two children that are at depth $i$.\\n          \\\\end{spfstep}\\n          \\\\begin{spfstep}\\n           As $G$ is \\\\termref[cd=balanced-binary-trees,name=balanced-binary-tree]{balanced} and $\\\\gdepth{G}=n>i$, $\\\\livar{V}{i-1}$ cannot contain\\n            leaves.\\n          \\\\end{spfstep}\\n          \\\\begin{spfstep}[type=conclusion]\\n           Thus $\\\\eq{\\\\card{\\\\livar{V}i},{\\\\atimes[cdot]{2,\\\\card{\\\\livar{V}{i-1}}}},{\\\\atimes[cdot]{2,\\\\power2{i-1}}},\\\\power2i}$.\\n          \\\\end{spfstep}\\n        \\\\end{spfcase}\\n      \\\\end{spfcases}\\n    \\\\end{sproof}\\n  \\\\item \\n    \\\\begin{assertion}[id=fbbt,type=corollary]\\n      A fully balanced tree of depth $d$ has $\\\\power2{d+1}-1$ nodes.\\n    \\\\end{assertion}\\n  \\\\item\\n      \\\\begin{sproof}[for=fbbt,id=fbbt-pf]{}\\n        \\\\begin{spfstep}\\n          Let $\\\\defeq{G}{\\\\tup{V,E}}$ be a fully balanced tree\\n        \\\\end{spfstep}\\n        \\\\begin{spfstep}\\n          Then $\\\\card{V}=\\\\Sumfromto{i}1d{\\\\power2i}= \\\\power2{d+1}-1$.\\n        \\\\end{spfstep}\\n      \\\\end{sproof}\\n    \\\\end{itemize}\\n  \\\\end{frame}\\n\\\\begin{note}\\n  \\\\begin{omtext}[type=conclusion,for=binary-tree]\\n    This shows that balanced binary trees grow in breadth very quickly, a consequence of\\n    this is that they are very shallow (and this compute very fast), which is the essence of\\n    the next result.\\n  \\\\end{omtext}\\n\\\\end{note}\\n\\\\end{module}\\n\\n%%% Local Variables: \\n%%% mode: LaTeX\\n%%% TeX-master: \\\"all\\\"\\n%%% End: \\\\end{document}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"/* Stylus mode */\\n\\n#id,\\n.class,\\narticle\\n  font-family Arial, sans-serif\\n\\n#id,\\n.class,\\narticle {\\n  font-family: Arial, sans-serif;\\n}\\n\\n// Variables\\nfont-size-base = 16px\\nline-height-base = 1.5\\nfont-family-base = \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif\\ntext-color = lighten(#000, 20%)\\n\\nbody\\n  font font-size-base/line-height-base font-family-base\\n  color text-color\\n\\nbody {\\n  font: 400 16px/1.5 \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n  color: #333;\\n}\\n\\n// Variables\\nlink-color = darken(#428bca, 6.5%)\\nlink-hover-color = darken(link-color, 15%)\\nlink-decoration = none\\nlink-hover-decoration = false\\n\\n// Mixin\\ntab-focus()\\n  outline thin dotted\\n  outline 5px auto -webkit-focus-ring-color\\n  outline-offset -2px\\n\\na\\n  color link-color\\n  if link-decoration\\n    text-decoration link-decoration\\n  &:hover\\n  &:focus\\n    color link-hover-color\\n    if link-hover-decoration\\n      text-decoration link-hover-decoration\\n  &:focus\\n    tab-focus()\\n\\na {\\n  color: #3782c4;\\n  text-decoration: none;\\n}\\na:hover,\\na:focus {\\n  color: #2f6ea7;\\n}\\na:focus {\\n  outline: thin dotted;\\n  outline: 5px auto -webkit-focus-ring-color;\\n  outline-offset: -2px;\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"//\\n//  TipCalculatorModel.swift\\n//  TipCalculator\\n//\\n//  Created by Main Account on 12/18/14.\\n//  Copyright (c) 2014 Razeware LLC. All rights reserved.\\n//\\n\\nimport Foundation\\n\\nclass TipCalculatorModel {\\n\\n  var total: Double\\n  var taxPct: Double\\n  var subtotal: Double {\\n    get {\\n      return total / (taxPct + 1)\\n    }\\n  }\\n\\n  init(total: Double, taxPct: Double) {\\n    self.total = total\\n    self.taxPct = taxPct\\n  }\\n\\n  func calcTipWithTipPct(tipPct: Double) -> Double {\\n    return subtotal * tipPct\\n  }\\n\\n  func returnPossibleTips() -> [Int: Double] {\\n\\n    let possibleTipsInferred = [0.15, 0.18, 0.20]\\n    let possibleTipsExplicit:[Double] = [0.15, 0.18, 0.20]\\n\\n    var retval = [Int: Double]()\\n    for possibleTip in possibleTipsInferred {\\n      let intPct = Int(possibleTip*100)\\n      retval[intPct] = calcTipWithTipPct(possibleTip)\\n    }\\n    return retval\\n\\n  }\\n\\n}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"##############################################################################################\\n##  ##     whois.tcl for eggdrop by Ford_Lawnmower irc.geekshed.net #Script-Help        ##  ##\\n##############################################################################################\\n## To use this script you must set channel flag +whois (ie .chanset #chan +whois)           ##\\n##############################################################################################\\n##      ____                __                 ###########################################  ##\\n##     / __/___ _ ___ _ ___/ /____ ___   ___   ###########################################  ##\\n##    / _/ / _ `// _ `// _  // __// _ \\\\ / _ \\\\  ###########################################  ##\\n##   /___/ \\\\_, / \\\\_, / \\\\_,_//_/   \\\\___// .__/  ###########################################  ##\\n##        /___/ /___/                 /_/      ###########################################  ##\\n##                                             ###########################################  ##\\n##############################################################################################\\n##  ##                             Start Setup.                                         ##  ##\\n##############################################################################################\\nnamespace eval whois {\\n## change cmdchar to the trigger you want to use                                        ##  ##\\n  variable cmdchar \\\"!\\\"\\n## change command to the word trigger you would like to use.                            ##  ##\\n## Keep in mind, This will also change the .chanset +/-command                          ##  ##\\n  variable command \\\"whois\\\"\\n## change textf to the colors you want for the text.                                    ##  ##\\n  variable textf \\\"\\\\017\\\\00304\\\"\\n## change tagf to the colors you want for tags:                                         ##  ##\\n  variable tagf \\\"\\\\017\\\\002\\\"\\n## Change logo to the logo you want at the start of the line.                           ##  ##\\n  variable logo \\\"\\\\017\\\\00304\\\\002\\\\[\\\\00306W\\\\003hois\\\\00304\\\\]\\\\017\\\"\\n## Change lineout to the results you want. Valid results are channel users modes topic  ##  ##\\n  variable lineout \\\"channel users modes topic\\\"\\n##############################################################################################\\n##  ##                           End Setup.                                              ## ##\\n##############################################################################################\\n  variable channel \\\"\\\"\\n  setudef flag $whois::command\\n  bind pub -|- [string trimleft $whois::cmdchar]${whois::command} whois::list\\n  bind raw -|- \\\"311\\\" whois::311\\n  bind raw -|- \\\"312\\\" whois::312\\n  bind raw -|- \\\"319\\\" whois::319\\n  bind raw -|- \\\"317\\\" whois::317\\n  bind raw -|- \\\"313\\\" whois::multi\\n  bind raw -|- \\\"310\\\" whois::multi\\n  bind raw -|- \\\"335\\\" whois::multi\\n  bind raw -|- \\\"301\\\" whois::301\\n  bind raw -|- \\\"671\\\" whois::multi\\n  bind raw -|- \\\"320\\\" whois::multi\\n  bind raw -|- \\\"401\\\" whois::multi\\n  bind raw -|- \\\"318\\\" whois::318\\n  bind raw -|- \\\"307\\\" whois::307\\n}\\nproc whois::311 {from key text} {\\n  if {[regexp -- {^[^\\\\s]+\\\\s(.+?)\\\\s(.+?)\\\\s(.+?)\\\\s\\\\*\\\\s\\\\:(.+)$} $text wholematch nick ident host realname]} {\\n    putserv \\\"PRIVMSG $whois::channel :${whois::logo} ${whois::tagf}Host:${whois::textf}         $nick \\\\(${ident}@${host}\\\\) ${whois::tagf}Realname:${whois::textf} $realname\\\"\\n  }\\n}\\nproc whois::multi {from key text} {\\n  if {[regexp {\\\\:(.*)$} $text match $key]} {\\n    putserv \\\"PRIVMSG $whois::channel :${whois::logo} ${whois::tagf}Note:${whois::textf} [subst $$key]\\\"\\n        return 1\\n  }\\n}\\nproc whois::312 {from key text} {\\n  regexp {([^\\\\s]+)\\\\s\\\\:} $text match server\\n  putserv \\\"PRIVMSG $whois::channel :${whois::logo} ${whois::tagf}Server:${whois::textf} $server\\\"\\n}\\nproc whois::319 {from key text} {\\n  if {[regexp {.+\\\\:(.+)$} $text match channels]} {\\n    putserv \\\"PRIVMSG $whois::channel :${whois::logo} ${whois::tagf}Channels:${whois::textf} $channels\\\"\\n  }\\n}\\nproc whois::317 {from key text} {\\n  if {[regexp -- {.*\\\\s(\\\\d+)\\\\s(\\\\d+)\\\\s\\\\:} $text wholematch idle signon]} {\\n    putserv \\\"PRIVMSG $whois::channel :${whois::logo} ${whois::tagf}Connected:${whois::textf}         [ctime $signon] ${whois::tagf}Idle:${whois::textf} [duration $idle]\\\"\\n  }\\n}\\nproc whois::301 {from key text} {\\n  if {[regexp {^.+\\\\s[^\\\\s]+\\\\s\\\\:(.*)$} $text match awaymsg]} {\\n    putserv \\\"PRIVMSG $whois::channel :${whois::logo} ${whois::tagf}Away:${whois::textf} $awaymsg\\\"\\n  }\\n}\\nproc whois::318 {from key text} {\\n  namespace eval whois {\\n        variable channel \\\"\\\"\\n  }\\n  variable whois::channel \\\"\\\"\\n}\\nproc whois::307 {from key text} {\\n  putserv \\\"PRIVMSG $whois::channel :${whois::logo} ${whois::tagf}Services:${whois::textf} Registered Nick\\\"\\n}\\nproc whois::list {nick host hand chan text} {\\n  if {[lsearch -exact [channel info $chan] \\\"+${whois::command}\\\"] != -1} {\\n    namespace eval whois {\\n          variable channel \\\"\\\"\\n        }\\n    variable whois::channel $chan\\n    putserv \\\"WHOIS $text\\\"\\n  }\\n}\\nputlog \\\"\\\\002*Loaded* \\\\017\\\\00304\\\\002\\\\[\\\\00306W\\\\003hois\\\\00304\\\\]\\\\017 \\\\002by Ford_Lawnmower irc.GeekShed.net #Script-Help\\\"\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"h1. Textile Mode\\n\\nA paragraph without formatting.\\n\\np. A simple Paragraph.\\n\\n\\nh2. Phrase Modifiers\\n\\nHere are some simple phrase modifiers: *strong*, _emphasis_, **bold**, and __italic__.\\n\\nA ??citation??, -deleted text-, +inserted text+, some ^superscript^, and some ~subscript~.\\n\\nA %span element% and @code element@\\n\\nA \\\"link\\\":http://example.com, a \\\"link with (alt text)\\\":urlAlias\\n\\n[urlAlias]http://example.com/\\n\\nAn image: !http://example.com/image.png! and an image with a link: !http://example.com/image.png!:http://example.com\\n\\nA sentence with a footnote.[123]\\n\\nfn123. The footnote is defined here.\\n\\nRegistered(r), Trademark(tm), and Copyright(c)\\n\\n\\nh2. Headers\\n\\nh1. Top level\\nh2. Second level\\nh3. Third level\\nh4. Fourth level\\nh5. Fifth level\\nh6. Lowest level\\n\\n\\nh2.  Lists\\n\\n* An unordered list\\n** foo bar\\n*** foo bar\\n**** foo bar\\n** foo bar\\n\\n# An ordered list\\n## foo bar\\n### foo bar\\n#### foo bar\\n## foo bar\\n\\n- definition list := description\\n- another item    := foo bar\\n- spanning ines   :=\\n                     foo bar\\n\\n                     foo bar =:\\n\\n\\nh2. Attributes\\n\\nLayouts and phrase modifiers can be modified with various kinds of attributes: alignment, CSS ID, CSS class names, language, padding, and CSS styles.\\n\\nh3. Alignment\\n\\ndiv<. left align\\ndiv>. right align\\n\\nh3. CSS ID and class name\\n\\nYou are a %(my-id#my-classname) rad% person.\\n\\nh3. Language\\n\\np[en_CA]. Strange weather, eh?\\n\\nh3. Horizontal Padding\\n\\np(())). 2em left padding, 3em right padding\\n\\nh3. CSS styling\\n\\np{background: red}. Fire!\\n\\n\\nh2. Table\\n\\n|_.              Header 1               |_.      Header 2        |\\n|{background:#ddd}. Cell with background|         Normal         |\\n|\\\\2.         Cell spanning 2 columns                             |\\n|/2.         Cell spanning 2 rows       |(cell-class). one       |\\n|                                                two             |\\n|>.                  Right aligned cell |<. Left aligned cell    |\\n\\n\\nh3. A table with attributes:\\n\\ntable(#prices).\\n|Adults|$5|\\n|Children|$2|\\n\\n\\nh2. Code blocks\\n\\nbc.\\nfunction factorial(n) {\\n    if (n === 0) {\\n        return 1;\\n    }\\n    return n * factorial(n - 1);\\n}\\n\\npre..\\n                ,,,,,,\\n            o#'9MMHb':'-,o,\\n         .oH\\\":HH$' \\\"' ' -*R&o,\\n        dMMM*\\\"\\\"'`'      .oM\\\"HM?.\\n       ,MMM'          \\\"HLbd< ?&H      .:MH .\\\"\\\\          ` MM  MM&b\\n     . \\\"*H    -        &MMMMMMMMMH:\\n     .    dboo        MMMMMMMMMMMM.\\n     .   dMMMMMMb      *MMMMMMMMMP.\\n     .    MMMMMMMP        *MMMMMP .\\n          `#MMMMM           MM6P ,\\n       '    `MMMP\\\"           HM*`,\\n        '    :MM             .- ,\\n         '.   `#?..  .       ..'\\n            -.   .         .-\\n              ''-.oo,oo.-''\\n\\n\\\\. _(9>\\n \\\\==_)\\n  -'=\\n\\nh2. Temporarily disabling textile markup\\n\\nnotextile. Don't __touch this!__\\n\\nSurround text with double-equals to disable textile inline. Example: Use ==*asterisks*== for *strong* text.\\n\\n\\nh2. HTML\\n\\nSome block layouts are simply textile versions of HTML tags with the same name, like @div@, @pre@, and @p@. HTML tags can also exist on their own line:\\n\\n<section>\\n  <h1>Title</h1>\\n  <p>Hello!</p>\\n</section>\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"!TiddlyWiki Formatting\\n* Rendered versions can be found at: http://www.tiddlywiki.com/#Reference\\n\\n|!Option            | !Syntax            |\\n|bold font          | ''bold''           |\\n|italic type        | //italic//         |\\n|underlined text    | __underlined__     |\\n|strikethrough text | --strikethrough--  |\\n|superscript text   | super^^script^^    |\\n|subscript text     | sub~~script~~      |\\n|highlighted text   | @@highlighted@@    |\\n|preformatted text  | {{{preformatted}}} |\\n\\n!Block Elements\\n<<<\\n!Heading 1\\n\\n!!Heading 2\\n\\n!!!Heading 3\\n\\n!!!!Heading 4\\n\\n!!!!!Heading 5\\n<<<\\n\\n!!Lists\\n<<<\\n* unordered list, level 1\\n** unordered list, level 2\\n*** unordered list, level 3\\n\\n# ordered list, level 1\\n## ordered list, level 2\\n### unordered list, level 3\\n\\n; definition list, term\\n: definition list, description\\n<<<\\n\\n!!Blockquotes\\n<<<\\n> blockquote, level 1\\n>> blockquote, level 2\\n>>> blockquote, level 3\\n\\n> blockquote\\n<<<\\n\\n!!Preformatted Text\\n<<<\\n{{{\\npreformatted (e.g. code)\\n}}}\\n<<<\\n\\n!!Code Sections\\n<<<\\n{{{\\nText style code\\n}}}\\n\\n//{{{\\nJS styled code. TiddlyWiki mixed mode should support highlighter switching in the future.\\n//}}}\\n\\n<!--{{{-->\\nXML styled code. TiddlyWiki mixed mode should support highlighter switching in the future.\\n<!--}}}-->\\n<<<\\n\\n!!Tables\\n<<<\\n|CssClass|k\\n|!heading column 1|!heading column 2|\\n|row 1, column 1|row 1, column 2|\\n|row 2, column 1|row 2, column 2|\\n|>|COLSPAN|\\n|ROWSPAN| ... |\\n|~| ... |\\n|CssProperty:value;...| ... |\\n|caption|c\\n\\n''Annotation:''\\n* The {{{>}}} marker creates a \\\"colspan\\\", causing the current cell to merge with the one to the right.\\n* The {{{~}}} marker creates a \\\"rowspan\\\", causing the current cell to merge with the one above.\\n<<<\\n!!Images /% TODO %/\\ncf. [[TiddlyWiki.com|http://www.tiddlywiki.com/#EmbeddedImages]]\\n\\n!Hyperlinks\\n* [[WikiWords|WikiWord]] are automatically transformed to hyperlinks to the respective tiddler\\n** the automatic transformation can be suppressed by preceding the respective WikiWord with a tilde ({{{~}}}): {{{~WikiWord}}}\\n* [[PrettyLinks]] are enclosed in square brackets and contain the desired tiddler name: {{{[[tiddler name]]}}}\\n** optionally, a custom title or description can be added, separated by a pipe character ({{{|}}}): {{{[[title|target]]}}}<br>'''N.B.:''' In this case, the target can also be any website (i.e. URL).\\n\\n!Custom Styling\\n* {{{@@CssProperty:value;CssProperty:value;...@@}}}<br>''N.B.:'' CSS color definitions should use lowercase letters to prevent the inadvertent creation of WikiWords.\\n* <html><code>{{customCssClass{...}}}</code></html>\\n* raw HTML can be inserted by enclosing the respective code in HTML tags: {{{<html> ... </html>}}}\\n\\n!Special Markers\\n* {{{<br>}}} forces a manual line break\\n* {{{----}}} creates a horizontal ruler\\n* [[HTML entities|http://www.tiddlywiki.com/#HtmlEntities]]\\n* [[HTML entities local|HtmlEntities]]\\n* {{{<<macroName>>}}} calls the respective [[macro|Macros]]\\n* To hide text within a tiddler so that it is not displayed, it can be wrapped in {{{/%}}} and {{{%/}}}.<br/>This can be a useful trick for hiding drafts or annotating complex markup.\\n* To prevent wiki markup from taking effect for a particular section, that section can be enclosed in three double quotes: e.g. {{{\\\"\\\"\\\"WikiWord\\\"\\\"\\\"}}}.\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"Headings\\n!Header 1\\n!!Header 2\\n!!!Header 3\\n!!!!Header 4\\n!!!!!Header 5\\n!!!!!!Header 6\\n\\nStyling\\n-=titlebar=-\\n^^ Box on multi\\nlines\\nof content^^\\n__bold__\\n''italic''\\n===underline===\\n::center::\\n--Line Through--\\n\\nOperators\\n~np~No parse~/np~\\n\\nLink\\n[link|desc|nocache]\\n\\nWiki\\n((Wiki))\\n((Wiki|desc))\\n((Wiki|desc|timeout))\\n\\nTable\\n||row1 col1|row1 col2|row1 col3\\nrow2 col1|row2 col2|row2 col3\\nrow3 col1|row3 col2|row3 col3||\\n\\nLists:\\n*bla\\n**bla-1\\n++continue-bla-1\\n***bla-2\\n++continue-bla-1\\n*bla\\n+continue-bla\\n#bla\\n** tra-la-la\\n+continue-bla\\n#bla\\n\\nPlugin (standard):\\n{PLUGIN(attr=\\\"my attr\\\")}\\nPlugin Body\\n{PLUGIN}\\n\\nPlugin (inline):\\n{plugin attr=\\\"my attr\\\"}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"# This is a TOML document. Boom.\\n\\ntitle = \\\"TOML Example\\\"\\n\\n[owner]\\nname = \\\"Tom Preston-Werner\\\"\\norganization = \\\"GitHub\\\"\\nbio = \\\"GitHub Cofounder & CEO\\nLikes tater tots and beer.\\\"\\ndob = 1979-05-27T07:32:00Z # First class dates? Why not?\\n\\n[database]\\nserver = \\\"192.168.1.1\\\"\\nports = [ 8001, 8001, 8002 ]\\nconnection_max = 5000\\nenabled = true\\n\\n[servers]\\n\\n  # You can indent as you please. Tabs or spaces. TOML don't care.\\n  [servers.alpha]\\n  ip = \\\"10.0.0.1\\\"\\n  dc = \\\"eqdc10\\\"\\n  \\n  [servers.beta]\\n  ip = \\\"10.0.0.2\\\"\\n  dc = \\\"eqdc10\\\"\\n  \\n[clients]\\ndata = [ [\\\"gamma\\\", \\\"delta\\\"], [1, 2] ]\\n\\n# Line breaks are OK when inside arrays\\nhosts = [\\n  \\\"alpha\\\",\\n  \\\"omega\\\"\\n]\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<!doctype html>\\n<html>\\n  <head>\\n    <title>My Tornado web application</title>\\n  </head>\\n  <body>\\n    <h1>\\n      {{ title }}\\n    </h1>\\n    <ul class=\\\"my-list\\\">\\n      {% for item in items %}\\n        <li>{% item.name %}</li>\\n      {% empty %}\\n        <li>You have no items in your list.</li>\\n      {% end %}\\n    </ul>\\n  </body>\\n</html>\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"'\\\\\\\" t\\n.\\\\\\\"     Title: mkvextract\\n.TH \\\"MKVEXTRACT\\\" \\\"1\\\" \\\"2015\\\\-02\\\\-28\\\" \\\"MKVToolNix 7\\\\&.7\\\\&.0\\\" \\\"User Commands\\\"\\n.\\\\\\\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n.ie \\\\n(.g .ds Aq \\\\(aq\\n.el       .ds Aq '\\n.\\\\\\\" -----------------------------------------------------------------\\n.nh\\n.\\\\\\\" disable justification (adjust text to left margin only)\\n.ad l\\n.\\\\\\\" -----------------------------------------------------------------\\n.SH \\\"NAME\\\"\\nmkvextract \\\\- extract tracks from Matroska(TM) files into other files\\n.SH \\\"SYNOPSIS\\\"\\n.HP \\\\w'\\\\fBmkvextract\\\\fR\\\\ 'u\\n\\\\fBmkvextract\\\\fR {mode} {source\\\\-filename} [options] [extraction\\\\-spec]\\n.SH \\\"DESCRIPTION\\\"\\n.PP\\n.B mkvextract\\nextracts specific parts from a\\n.I Matroska(TM)\\nfile to other useful formats\\\\&. The first argument,\\n\\\\fBmode\\\\fR, tells\\n\\\\fBmkvextract\\\\fR(1)\\nwhat to extract\\\\&. Currently supported is the extraction of\\ntracks,\\ntags,\\nattachments,\\nchapters,\\nCUE sheets,\\ntimecodes\\nand\\ncues\\\\&. The second argument is the name of the source file\\\\&. It must be a\\nMatroska(TM)\\nfile\\\\&. All following arguments are options and extraction specifications; both of which depend on the selected mode\\\\&.\\n.SS \\\"Common options\\\"\\n.PP\\nThe following options are available in all modes and only described once in this section\\\\&.\\n.PP\\n\\\\fB\\\\-f\\\\fR, \\\\fB\\\\-\\\\-parse\\\\-fully\\\\fR\\n.RS 4\\nSets the parse mode to \\\\*(Aqfull\\\\*(Aq\\\\&. The default mode does not parse the whole file but uses the meta seek elements for locating the required elements of a source file\\\\&. In 99% of all cases this is enough\\\\&. But for files that do not contain meta seek elements or which are damaged the user might have to use this mode\\\\&. A full scan of a file can take a couple of minutes while a fast scan only takes seconds\\\\&.\\n.RE\\n.PP\\n\\\\fB\\\\-\\\\-command\\\\-line\\\\-charset\\\\fR \\\\fIcharacter\\\\-set\\\\fR\\n.RS 4\\nSets the character set to convert strings given on the command line from\\\\&. It defaults to the character set given by system\\\\*(Aqs current locale\\\\&.\\n.RE\\n.PP\\n\\\\fB\\\\-\\\\-output\\\\-charset\\\\fR \\\\fIcharacter\\\\-set\\\\fR\\n.RS 4\\nSets the character set to which strings are converted that are to be output\\\\&. It defaults to the character set given by system\\\\*(Aqs current locale\\\\&.\\n.RE\\n.PP\\n\\\\fB\\\\-r\\\\fR, \\\\fB\\\\-\\\\-redirect\\\\-output\\\\fR \\\\fIfile\\\\-name\\\\fR\\n.RS 4\\nWrites all messages to the file\\n\\\\fIfile\\\\-name\\\\fR\\ninstead of to the console\\\\&. While this can be done easily with output redirection there are cases in which this option is needed: when the terminal reinterprets the output before writing it to a file\\\\&. The character set set with\\n\\\\fB\\\\-\\\\-output\\\\-charset\\\\fR\\nis honored\\\\&.\\n.RE\\n.PP\\n\\\\fB\\\\-\\\\-ui\\\\-language\\\\fR \\\\fIcode\\\\fR\\n.RS 4\\nForces the translations for the language\\n\\\\fIcode\\\\fR\\nto be used (e\\\\&.g\\\\&. \\\\*(Aqde_DE\\\\*(Aq for the German translations)\\\\&. It is preferable to use the environment variables\\n\\\\fILANG\\\\fR,\\n\\\\fILC_MESSAGES\\\\fR\\nand\\n\\\\fILC_ALL\\\\fR\\nthough\\\\&. Entering \\\\*(Aqlist\\\\*(Aq as the\\n\\\\fIcode\\\\fR\\nwill cause\\n\\\\fBmkvextract\\\\fR(1)\\nto output a list of available translations\\\\&.\\n\\n.\\\\\\\" [...]\\n\\n.SH \\\"SEE ALSO\\\"\\n.PP\\n\\fBmkvmerge\\fR(1),\\n\\fBmkvinfo\\fR(1),\\n\\fBmkvpropedit\\fR(1),\\n\\fBmmg\\fR(1)\\n.SH \\\"WWW\\\"\\n.PP\\nThe latest version can always be found at\\n\\\\m[blue]\\\\fBthe MKVToolNix homepage\\\\fR\\\\m[]\\\\&\\\\s-2\\\\u[1]\\\\d\\\\s+2\\\\&.\\n.SH \\\"AUTHOR\\\"\\n.PP\\n\\\\(co \\\\fBMoritz Bunkus\\\\fR <\\\\&moritz@bunkus\\\\&.org\\\\&>\\n.RS 4\\nDeveloper\\n.RE\\n.SH \\\"NOTES\\\"\\n.IP \\\" 1.\\\" 4\\nthe MKVToolNix homepage\\n.RS 4\\n\\\\%https://www.bunkus.org/videotools/mkvtoolnix/\\n.RE\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"[MODULE_PARAMETERS]\\n# This section shall contain the values of all parameters that are defined in your TTCN-3 modules.\\n\\n[LOGGING]\\n# In this section you can specify the name of the log file and the classes of events\\n# you want to log into the file or display on console (standard error).\\n\\nLogFile := \\\"logs/%e.%h-%r.%s\\\"\\nFileMask := LOG_ALL | DEBUG | MATCHING\\nConsoleMask := ERROR | WARNING | TESTCASE | STATISTICS | PORTEVENT\\n\\nLogSourceInfo := Yes\\nAppendFile := No\\nTimeStampFormat := DateTime\\nLogEventTypes := Yes\\nSourceInfoFormat := Single\\nLogEntityName := Yes\\n\\n[TESTPORT_PARAMETERS]\\n# In this section you can specify parameters that are passed to Test Ports.\\n\\n[DEFINE]\\n# In this section you can create macro definitions,\\n# that can be used in other configuration file sections except [INCLUDE].\\n\\n[INCLUDE]\\n# To use configuration settings given in other configuration files,\\n# the configuration files just need to be listed in this section, with their full or relative pathnames.\\n\\n[EXTERNAL_COMMANDS]\\n# This section can define external commands (shell scripts) to be executed by the ETS\\n# whenever a control part or test case is started or terminated.\\n\\nBeginTestCase := \\\"\\\"\\nEndTestCase := \\\"\\\"\\nBeginControlPart := \\\"\\\"\\nEndControlPart := \\\"\\\"\\n\\n[EXECUTE]\\n# In this section you can specify what parts of your test suite you want to execute.\\n\\n[GROUPS]\\n# In this section you can specify groups of hosts. These groups can be used inside the\\n# [COMPONENTS] section to restrict the creation of certain PTCs to a given set of hosts.\\n\\n[COMPONENTS]\\n# This section consists of rules restricting the location of created PTCs.\\n\\n[MAIN_CONTROLLER]\\n# The options herein control the behavior of MC.\\n\\nTCPPort := 0\\nKillTimer := 10.0\\nNumHCs := 0\\nLocalAddress :=\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"module Templates {\\n  /* import types from ASN.1 */\\n  import from Types language \\\"ASN.1:1997\\\" all;\\n\\n  /* During the conversion phase from ASN.1 to TTCN-3 */\\n  /* - the minus sign (Message-Type) within the identifiers will be replaced by underscore (Message_Type)*/\\n  /* - the ASN.1 identifiers matching a TTCN-3 keyword (objid) will be postfixed with an underscore (objid_)*/\\n\\n  // simple types\\n\\n  template SenderID localObjid := objid {itu_t(0) identified_organization(4) etsi(0)};\\n\\n  // complex types\\n\\n  /* ASN.1 Message-Type mapped to TTCN-3 Message_Type */\\n  template Message receiveMsg(template (present) Message_Type p_messageType) := {\\n    header := p_messageType,\\n    body := ?\\n  }\\n\\n  /* ASN.1 objid mapped to TTCN-3 objid_ */\\n  template Message sendInviteMsg := {\\n      header := inviteType,\\n      body := {\\n        /* optional fields may be assigned by omit or may be ignored/skipped */\\n        description := \\\"Invite Message\\\",\\n        data := 'FF'O,\\n        objid_ := localObjid\\n      }\\n  }\\n\\n  template Message sendAcceptMsg modifies sendInviteMsg := {\\n      header := acceptType,\\n      body := {\\n        description := \\\"Accept Message\\\"\\n      }\\n    };\\n\\n  template Message sendErrorMsg modifies sendInviteMsg := {\\n      header := errorType,\\n      body := {\\n        description := \\\"Error Message\\\"\\n      }\\n    };\\n\\n  template Message expectedErrorMsg := {\\n      header := errorType,\\n      body := ?\\n    };\\n\\n  template Message expectedInviteMsg modifies expectedErrorMsg := {\\n      header := inviteType\\n    };\\n\\n  template Message expectedAcceptMsg modifies expectedErrorMsg := {\\n      header := acceptType\\n    };\\n\\n} with { encode \\\"BER:1997\\\" }\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"@prefix foaf: <http://xmlns.com/foaf/0.1/> .\\n@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n\\n<http://purl.org/net/bsletten> \\n    a foaf:Person;\\n    foaf:interest <http://www.w3.org/2000/01/sw/>;\\n    foaf:based_near [\\n        geo:lat \\\"34.0736111\\\" ;\\n        geo:lon \\\"-118.3994444\\\"\\n   ]\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"{% extends \\\"layout.twig\\\" %}\\n{% block title %}CodeMirror: Twig mode{% endblock %}\\n{# this is a comment #}\\n{% block content %}\\n  {% for foo in bar if foo.baz is divisible by(3) %}\\n    Hello {{ foo.world }}\\n  {% else %}\\n    {% set msg = \\\"Result not found\\\" %}\\n    {% include \\\"empty.twig\\\" with { message: msg } %}\\n  {% endfor %}\\n{% endblock %}\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\\n// Project: [~THE PROJECT NAME~]\\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\\n\\n/*~ This is the module template file for function modules.\\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\\n *~ For example, if you were writing a file for \\\"super-greeter\\\", this\\n *~ file should be 'super-greeter/index.d.ts'\\n */\\n\\n/*~ Note that ES6 modules cannot directly export callable functions.\\n *~ This file should be imported using the CommonJS-style:\\n *~   import x = require('someLibrary');\\n *~\\n *~ Refer to the documentation to understand common\\n *~ workarounds for this limitation of ES6 modules.\\n */\\n\\n/*~ If this module is a UMD module that exposes a global variable 'myFuncLib' when\\n *~ loaded outside a module loader environment, declare that global here.\\n *~ Otherwise, delete this declaration.\\n */\\nexport as namespace myFuncLib;\\n\\n/*~ This declaration specifies that the function\\n *~ is the exported object from the file\\n */\\nexport = MyFunction;\\n\\n/*~ This example shows how to have multiple overloads for your function */\\ndeclare function MyFunction(name: string): MyFunction.NamedReturnType;\\ndeclare function MyFunction(length: number): MyFunction.LengthReturnType;\\n\\n/*~ If you want to expose types from your module as well, you can\\n *~ place them in this block. Often you will want to describe the\\n *~ shape of the return type of the function; that type should\\n *~ be declared in here, as this example shows.\\n */\\ndeclare namespace MyFunction {\\n    export interface LengthReturnType {\\n        width: number;\\n        height: number;\\n    }\\n    export interface NamedReturnType {\\n        firstName: string;\\n        lastName: string;\\n    }\\n\\n    /*~ If the module also has properties, declare them here. For example,\\n     *~ this declaration says that this code is legal:\\n     *~   import f = require('myFuncLibrary');\\n     *~   console.log(f.defaultName);\\n     */\\n    export const defaultName: string;\\n    export let defaultLength: number;\\n}\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"Class rocket\\n  Private quality as Double\\n  Public Sub launch() as String\\n    If quality > 0.8\\n      launch = \\\"Successful\\\"\\n    Else\\n      launch = \\\"Failed\\\"\\n    End If\\n  End sub\\nEnd class\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"' Pete Guhl\\n' 03-04-2012\\n'\\n' Basic VBScript support for codemirror2\\n\\nConst ForReading = 1, ForWriting = 2, ForAppending = 8\\n\\nCall Sub020_PostBroadcastToUrbanAirship(strUserName, strPassword, intTransmitID, strResponse)\\n\\nIf Not IsNull(strResponse) AND Len(strResponse) = 0 Then\\n  boolTransmitOkYN = False\\nElse\\n  ' WScript.Echo \\\"Oh Happy Day! Oh Happy DAY!\\\"\\n  boolTransmitOkYN = True\\nEnd If\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"## Velocity Code Demo\\n#*\\n   based on PL/SQL mode by Peter Raganitsch, adapted to Velocity by Steve O'Hara ( http://www.pivotal-solutions.co.uk )\\n   August 2011\\n*#\\n\\n#*\\n   This is a multiline comment.\\n   This is the second line\\n*#\\n\\n#[[ hello steve\\n   This has invalid syntax that would normally need \\\"poor man's escaping\\\" like:\\n\\n   #define()\\n\\n   ${blah\\n]]#\\n\\n#include( \\\"disclaimer.txt\\\" \\\"opinion.txt\\\" )\\n#include( $foo $bar )\\n\\n#parse( \\\"lecorbusier.vm\\\" )\\n#parse( $foo )\\n\\n#evaluate( 'string with VTL #if(true)will be displayed#end' )\\n\\n#define( $hello ) Hello $who #end #set( $who = \\\"World!\\\") $hello ## displays Hello World!\\n\\n#foreach( $customer in $customerList )\\n\\n    $foreach.count $customer.Name\\n\\n    #if( $foo == ${bar})\\n        it's true!\\n        #break\\n    #{else}\\n        it's not!\\n        #stop\\n    #end\\n\\n    #if ($foreach.parent.hasNext)\\n        $velocityCount\\n    #end\\n#end\\n\\n$someObject.getValues(\\\"this is a string split\\n        across lines\\\")\\n\\n$someObject(\\\"This plus $something in the middle\\\").method(7567).property\\n\\n#set($something = \\\"Parseable string with '$quotes'!\\\")\\n\\n#macro( tablerows $color $somelist )\\n    #foreach( $something in $somelist )\\n        <tr><td bgcolor=$color>$something</td></tr>\\n        <tr><td bgcolor=$color>$bodyContent</td></tr>\\n    #end\\n#end\\n\\n#tablerows(\\\"red\\\" [\\\"dadsdf\\\",\\\"dsa\\\"])\\n#@tablerows(\\\"red\\\" [\\\"dadsdf\\\",\\\"dsa\\\"]) some body content #end\\n\\n   Variable reference: #set( $monkey = $bill )\\n   String literal: #set( $monkey.Friend = 'monica' )\\n   Property reference: #set( $monkey.Blame = $whitehouse.Leak )\\n   Method reference: #set( $monkey.Plan = $spindoctor.weave($web) )\\n   Number literal: #set( $monkey.Number = 123 )\\n   Range operator: #set( $monkey.Numbers = [1..3] )\\n   Object list: #set( $monkey.Say = [\\\"Not\\\", $my, \\\"fault\\\"] )\\n   Object map: #set( $monkey.Map = {\\\"banana\\\" : \\\"good\\\", \\\"roast beef\\\" : \\\"bad\\\"})\\n\\nThe RHS can also be a simple arithmetic expression, such as:\\nAddition: #set( $value = $foo + 1 )\\n   Subtraction: #set( $value = $bar - 1 )\\n   Multiplication: #set( $value = $foo * $bar )\\n   Division: #set( $value = $foo / $bar )\\n   Remainder: #set( $value = $foo % $bar )\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// Literals\\n1'b0\\n1'bx\\n1'bz\\n16'hDC78\\n'hdeadbeef\\n'b0011xxzz\\n1234\\n32'd5678\\n3.4e6\\n-128.7\\n\\n// Macro definition\\n`define BUS_WIDTH = 8;\\n\\n// Module definition\\nmodule block(\\n  input                   clk,\\n  input                   rst_n,\\n  input  [`BUS_WIDTH-1:0] data_in,\\n  output [`BUS_WIDTH-1:0] data_out\\n);\\n  \\n  always @(posedge clk or negedge rst_n) begin\\n\\n    if (~rst_n) begin\\n      data_out <= 8'b0;\\n    end else begin\\n      data_out <= data_in;\\n    end\\n    \\n    if (~rst_n)\\n      data_out <= 8'b0;\\n    else\\n      data_out <= data_in;\\n    \\n    if (~rst_n)\\n      begin\\n        data_out <= 8'b0;\\n      end\\n    else\\n      begin\\n        data_out <= data_in;\\n      end\\n\\n  end\\n  \\nendmodule\\n\\n// Class definition\\nclass test;\\n\\n  /**\\n   * Sum two integers\\n   */\\n  function int sum(int a, int b);\\n    int result = a + b;\\n    string msg = $sformatf(\\\"%d + %d = %d\\\", a, b, result);\\n    $display(msg);\\n    return result;\\n  endfunction\\n  \\n  task delay(int num_cycles);\\n    repeat(num_cycles) #1;\\n  endtask\\n  \\nendclass\\n\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"LIBRARY ieee;\\nUSE ieee.std_logic_1164.ALL;\\nUSE ieee.numeric_std.ALL;\\n\\nENTITY tb IS\\nEND tb;\\n\\nARCHITECTURE behavior OF tb IS\\n   --Inputs\\n   signal a : unsigned(2 downto 0) := (others => '0');\\n   signal b : unsigned(2 downto 0) := (others => '0');\\n    --Outputs\\n   signal a_eq_b : std_logic;\\n   signal a_le_b : std_logic;\\n   signal a_gt_b : std_logic;\\n\\n    signal i,j : integer;\\n\\nBEGIN\\n\\n    -- Instantiate the Unit Under Test (UUT)\\n   uut: entity work.comparator PORT MAP (\\n          a => a,\\n          b => b,\\n          a_eq_b => a_eq_b,\\n          a_le_b => a_le_b,\\n          a_gt_b => a_gt_b\\n        );\\n\\n   -- Stimulus process\\n   stim_proc: process\\n   begin\\n        for i in 0 to 8 loop\\n            for j in 0 to 8 loop\\n                a <= to_unsigned(i,3); --integer to unsigned type conversion\\n                b <= to_unsigned(j,3);\\n                wait for 10 ns;\\n            end loop;\\n        end loop;\\n   end process;\\n\\nEND;\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<template>\\n  <div class=\\\"sass\\\">Im am a {{mustache-like}} template</div>\\n</template>\\n\\n<script lang=\\\"coffee\\\">\\n  module.exports =\\n    props: ['one', 'two', 'three']\\n</script>\\n\\n<style lang=\\\"sass\\\">\\n.sass\\n  font-size: 18px\\n</style>\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"[NamedConstructor=Image(optional unsigned long width, optional unsigned long height)]\\ninterface HTMLImageElement : HTMLElement {\\n           attribute DOMString alt;\\n           attribute DOMString src;\\n           attribute DOMString srcset;\\n           attribute DOMString sizes;\\n           attribute DOMString? crossOrigin;\\n           attribute DOMString useMap;\\n           attribute boolean isMap;\\n           attribute unsigned long width;\\n           attribute unsigned long height;\\n  readonly attribute unsigned long naturalWidth;\\n  readonly attribute unsigned long naturalHeight;\\n  readonly attribute boolean complete;\\n  readonly attribute DOMString currentSrc;\\n\\n  // also has obsolete members\\n};\\n\\npartial interface HTMLImageElement {\\n  attribute DOMString name;\\n  attribute DOMString lowsrc;\\n  attribute DOMString align;\\n  attribute unsigned long hspace;\\n  attribute unsigned long vspace;\\n  attribute DOMString longDesc;\\n\\n  [TreatNullAs=EmptyString] attribute DOMString border;\\n};\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"<html style=\\\"color: green\\\">\\n  <!-- this is a comment -->\\n  <head>\\n    <title>HTML Example</title>\\n  </head>\\n  <body>\\n    The indentation tries to be <em>somewhat &quot;do what\\n    I mean&quot;</em>... but might not match your style.\\n  </body>\\n</html>\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \" \\nxquery version \\\"1.0-ml\\\";\\n(: this is\\n : a \\n   \\\"comment\\\" :)\\nlet $let := <x attr=\\\"value\\\">\\\"test\\\"<func>function() $var {function()} {$var}</func></x>\\nlet $joe:=1\\nreturn element element {\\n  attribute attribute { 1 },\\n  element test { 'a' }, \\n  attribute foo { \\\"bar\\\" },\\n  fn:doc()[ foo/@bar eq $let ],\\n  //x }  \\n \\n(: a more 'evil' test :)\\n(: Modified Blakeley example (: with nested comment :) ... :)\\ndeclare private function local:declare() {()};\\ndeclare private function local:private() {()};\\ndeclare private function local:function() {()};\\ndeclare private function local:local() {()};\\nlet $let := <let>let $let := \\\"let\\\"</let>\\nreturn element element {\\n  attribute attribute { try { xdmp:version() } catch($e) { xdmp:log($e) } },\\n  attribute fn:doc { \\\"bar\\\" castable as xs:string },\\n  element text { text { \\\"text\\\" } },\\n  fn:doc()[ child::eq/(@bar | attribute::attribute) eq $let ],\\n  //fn:doc\\n}\\n\\n\\n\\nxquery version \\\"1.0-ml\\\";\\n\\n(: Copyright 2006-2010 Mark Logic Corporation. :)\\n\\n(:\\n : Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n : you may not use this file except in compliance with the License.\\n : You may obtain a copy of the License at\\n :\\n :     http://www.apache.org/licenses/LICENSE-2.0\\n :\\n : Unless required by applicable law or agreed to in writing, software\\n : distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n : See the License for the specific language governing permissions and\\n : limitations under the License.\\n :)\\n\\nmodule namespace json = \\\"http://marklogic.com/json\\\";\\ndeclare default function namespace \\\"http://www.w3.org/2005/xpath-functions\\\";\\n\\n(: Need to backslash escape any double quotes, backslashes, and newlines :)\\ndeclare function json:escape($s as xs:string) as xs:string {\\n  let $s := replace($s, \\\"\\\\\\\", \\\"\\\\\\\\\\\")\\n  let $s := replace($s, \\\"\\\"\\\"\\\", \\\"\\\\\\\"\\\"\\\")\\n  let $s := replace($s, codepoints-to-string((13, 10)), \\\"\\\\n\\\")\\n  let $s := replace($s, codepoints-to-string(13), \\\"\\\\n\\\")\\n  let $s := replace($s, codepoints-to-string(10), \\\"\\\\n\\\")\\n  return $s\\n};\\n\\ndeclare function json:atomize($x as element()) as xs:string {\\n  if (count($x/node()) = 0) then 'null'\\n  else if ($x/@type = \\\"number\\\") then\\n    let $castable := $x castable as xs:float or\\n                     $x castable as xs:double or\\n                     $x castable as xs:decimal\\n    return\\n    if ($castable) then xs:string($x)\\n    else error(concat(\\\"Not a number: \\\", xdmp:describe($x)))\\n  else if ($x/@type = \\\"boolean\\\") then\\n    let $castable := $x castable as xs:boolean\\n    return\\n    if ($castable) then xs:string(xs:boolean($x))\\n    else error(concat(\\\"Not a boolean: \\\", xdmp:describe($x)))\\n  else concat('\\\"', json:escape($x), '\\\"')\\n};\\n\\n(: Print the thing that comes after the colon :)\\ndeclare function json:print-value($x as element()) as xs:string {\\n  if (count($x/*) = 0) then\\n    json:atomize($x)\\n  else if ($x/@quote = \\\"true\\\") then\\n    concat('\\\"', json:escape(xdmp:quote($x/node())), '\\\"')\\n  else\\n    string-join(('{',\\n      string-join(for $i in $x/* return json:print-name-value($i), \\\",\\\"),\\n    '}'), \\\"\\\")\\n};\\n\\n(: Print the name and value both :)\\ndeclare function json:print-name-value($x as element()) as xs:string? {\\n  let $name := name($x)\\n  let $first-in-array :=\\n    count($x/preceding-sibling::*[name(.) = $name]) = 0 and\\n    (count($x/following-sibling::*[name(.) = $name]) > 0 or $x/@array = \\\"true\\\")\\n  let $later-in-array := count($x/preceding-sibling::*[name(.) = $name]) > 0\\n  return\\n\\n  if ($later-in-array) then\\n    ()  (: I was handled previously :)\\n  else if ($first-in-array) then\\n    string-join(('\\\"', json:escape($name), '\\\":[',\\n      string-join((for $i in ($x, $x/following-sibling::*[name(.) = $name]) return json:print-value($i)), \\\",\\\"),\\n    ']'), \\\"\\\")\\n   else\\n     string-join(('\\\"', json:escape($name), '\\\":', json:print-value($x)), \\\"\\\")\\n};\\n\\n(:~\\n  Transforms an XML element into a JSON string representation.  See http://json.org.\\n  <p/>\\n  Sample usage:\\n  <pre>\\n    xquery version \\\"1.0-ml\\\";\\n    import module namespace json=\\\"http://marklogic.com/json\\\" at \\\"json.xqy\\\";\\n    json:serialize(&lt;foo&gt;&lt;bar&gt;kid&lt;/bar&gt;&lt;/foo&gt;)\\n  </pre>\\n  Sample transformations:\\n  <pre>\\n  &lt;e/&gt; becomes {\\\"e\\\":null}\\n  &lt;e&gt;text&lt;/e&gt; becomes {\\\"e\\\":\\\"text\\\"}\\n  &lt;e&gt;quote \\\" escaping&lt;/e&gt; becomes {\\\"e\\\":\\\"quote \\\\\\\" escaping\\\"}\\n  &lt;e&gt;backslash \\\\ escaping&lt;/e&gt; becomes {\\\"e\\\":\\\"backslash \\\\ escaping\\\"}\\n  &lt;e&gt;&lt;a&gt;text1&lt;/a&gt;&lt;b&gt;text2&lt;/b&gt;&lt;/e&gt; becomes {\\\"e\\\":{\\\"a\\\":\\\"text1\\\",\\\"b\\\":\\\"text2\\\"}}\\n  &lt;e&gt;&lt;a&gt;text1&lt;/a&gt;&lt;a&gt;text2&lt;/a&gt;&lt;/e&gt; becomes {\\\"e\\\":{\\\"a\\\":[\\\"text1\\\",\\\"text2\\\"]}}\\n  &lt;e&gt;&lt;a array=\\\"true\\\"&gt;text1&lt;/a&gt;&lt;/e&gt; becomes {\\\"e\\\":{\\\"a\\\":[\\\"text1\\\"]}}\\n  &lt;e&gt;&lt;a type=\\\"boolean\\\"&gt;false&lt;/a&gt;&lt;/e&gt; becomes {\\\"e\\\":{\\\"a\\\":false}}\\n  &lt;e&gt;&lt;a type=\\\"number\\\"&gt;123.5&lt;/a&gt;&lt;/e&gt; becomes {\\\"e\\\":{\\\"a\\\":123.5}}\\n  &lt;e quote=\\\"true\\\"&gt;&lt;div attrib=\\\"value\\\"/&gt;&lt;/e&gt; becomes {\\\"e\\\":\\\"&lt;div attrib=\\\\\\\"value\\\\\\\"/&gt;\\\"}\\n  </pre>\\n  <p/>\\n  Namespace URIs are ignored. Namespace prefixes are included in the JSON name.\\n  <p/>\\n  Attributes are ignored, except for the special attribute @array=\\\"true\\\" that\\n  indicates the JSON serialization should write the node, even if single, as an\\n  array, and the attribute @type that can be set to \\\"boolean\\\" or \\\"number\\\" to\\n  dictate the value should be written as that type (unquoted).  There's also\\n  an @quote attribute that when set to true writes the inner content as text\\n  rather than as structured JSON, useful for sending some XHTML over the\\n  wire.\\n  <p/>\\n  Text nodes within mixed content are ignored.\\n\\n  @param $x Element node to convert\\n  @return String holding JSON serialized representation of $x\\n\\n  @author Jason Hunter\\n  @version 1.0.1\\n    \\n  Ported to xquery 1.0-ml; double escaped backslashes in json:escape\\n:)\\ndeclare function json:serialize($x as element())  as xs:string {\\n  string-join(('{', json:print-name-value($x), '}'), \\\"\\\")\\n};\\n    \\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"// example yacas code\\nGraph(edges_IsList) <-- [\\n    Local(v, e, f, t);\\n\\n    vertices := {};\\n\\n    ForEach (e, edges) [\\n        If (IsList(e), e := Head(e));\\n        {f, t} := Tail(Listify(e));\\n\\n        DestructiveAppend(vertices, f);\\n        DestructiveAppend(vertices, t);\\n    ];\\n\\n    Graph(RemoveDuplicates(vertices), edges);\\n];\\n\\n10 # IsGraph(Graph(vertices_IsList, edges_IsList)) <-- True;\\n20 # IsGraph(_x) <-- False;\\n\\nEdges(Graph(vertices_IsList, edges_IsList)) <-- edges;\\nVertices(Graph(vertices_IsList, edges_IsList)) <-- vertices;\\n\\nAdjacencyList(g_IsGraph) <-- [\\n    Local(l, vertices, edges, e, op, f, t);\\n\\n    l := Association'Create();\\n\\n    vertices := Vertices(g);\\n    ForEach (v, vertices)\\n        Association'Set(l, v, {});\\n\\n    edges := Edges(g);\\n\\n    ForEach(e, edges) [\\n        If (IsList(e), e := Head(e));\\n        {op, f, t} := Listify(e);\\n        DestructiveAppend(Association'Get(l, f), t);\\n        If (String(op) = \\\"<->\\\", DestructiveAppend(Association'Get(l, t), f));\\n    ];\\n\\n    l;\\n];\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"---\\nreceipt:     Oz-Ware Purchase Invoice\\ndate:        2007-08-06\\ncustomer:\\n    given:   Dorothy\\n    family:  Gale\\n\\nitems:\\n    - part_no:   A4786\\n      descrip:   Water Bucket (Filled)\\n      price:     1.47\\n      quantity:  4\\n\\n    - part_no:   E1628\\n      descrip:   High Heeled \\\"Ruby\\\" Slippers\\n      size:       8\\n      price:     100.27\\n      quantity:  1\\n\\nbill-to:  &id001\\n    street: |\\n            123 Tornado Alley\\n            Suite 16\\n    city:   East Centerville\\n    state:  KS\\n\\nship-to:  *id001\\n\\nspecialDelivery:  >\\n    Follow the Yellow Brick\\n    Road to the Emerald City.\\n    Pay no attention to the\\n    man behind the curtain.\\n---\\n\\nGitHub Flavored Markdown\\n========================\\n\\nEverything from markdown plus GFM features:\\n\\n## URL autolinking\\n\\nUnderscores_are_allowed_between_words.\\n\\n## Strikethrough text\\n\\nGFM adds syntax to strikethrough text, which is missing from standard Markdown.\\n\\n~~Mistaken text.~~\\n~~**works with other formatting**~~\\n\\n~~spans across\\nlines~~\\n\\n## Fenced code blocks (and syntax highlighting)\\n\\n```javascript\\nfor (var i = 0; i < items.length; i++) {\\n  console.log(items[i], i); // log them\\n}\\n```\\n\\n## Task Lists\\n\\n- [ ] Incomplete task list item\\n- [x] **Completed** task list item\\n\\n## A bit of GitHub spice\\n\\n* SHA: be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\\n* User@SHA ref: mojombo@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\\n* User/Project@SHA: mojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\\n* #Num: #1\\n* User/#Num: mojombo#1\\n* User/Project#Num: mojombo/god#1\\n\\nSee http://github.github.com/github-flavored-markdown/.\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"--- # Favorite movies\\n- Casablanca\\n- North by Northwest\\n- The Man Who Wasn't There\\n--- # Shopping list\\n[milk, pumpkin pie, eggs, juice]\\n--- # Indented Blocks, common in YAML data files, use indentation and new lines to separate the key: value pairs\\n  name: John Smith\\n  age: 33\\n--- # Inline Blocks, common in YAML data streams, use commas to separate the key: value pairs between braces\\n{name: John Smith, age: 33}\\n---\\nreceipt:     Oz-Ware Purchase Invoice\\ndate:        2007-08-06\\ncustomer:\\n    given:   Dorothy\\n    family:  Gale\\n\\nitems:\\n    - part_no:   A4786\\n      descrip:   Water Bucket (Filled)\\n      price:     1.47\\n      quantity:  4\\n\\n    - part_no:   E1628\\n      descrip:   High Heeled \\\"Ruby\\\" Slippers\\n      size:       8\\n      price:     100.27\\n      quantity:  1\\n\\nbill-to:  &id001\\n    street: |\\n            123 Tornado Alley\\n            Suite 16\\n    city:   East Centerville\\n    state:  KS\\n\\nship-to:  *id001\\n\\nspecialDelivery:  >\\n    Follow the Yellow Brick\\n    Road to the Emerald City.\\n    Pay no attention to the\\n    man behind the curtain.\\n...\\n\\n\";\nvar _default = code;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar code = \"#include    \\\"ti83plus.inc\\\"\\n#define     progStart   $9D95\\n    .org progStart-2\\n    .db $BB,$6D\\n\\n    bcall(_ClrLCDFull)\\n    ld hl,0\\n    ld (CurCol),hl\\n    ld hl,Message\\n    bcall(_PutS) ; Displays the string\\n    bcall(_NewLine)\\n    ret\\nMessage:\\n    .db \\\"Hello world!\\\",0\\n\\n\";\nvar _default = code;\nexports.default = _default;"],"sourceRoot":""}